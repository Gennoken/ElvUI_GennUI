local E, L, V, P, G = unpack(ElvUI);
local GNUI = E:GetModule("GennUI");

function GNUI:LoadPlaterProfile()
PlaterDB = {
["captured_spells"] = {
[24450] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cat",
["npcID"] = 165189,
},
},
["profileKeys"] = {
},
["captured_casts"] = {
[427758] = {
["source"] = "Envoy of Winter",
["event"] = "SPELL_CAST_START",
["npcID"] = 209929,
},
[424176] = {
["source"] = "Ancient Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 210637,
},
[381701] = {
["source"] = "Augmented Flood",
["event"] = "SPELL_CAST_START",
["npcID"] = 192457,
},
[383237] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Lava Elemental",
["npcID"] = 187321,
},
[377608] = {
["source"] = "Rimebound Subjugator",
["event"] = "SPELL_CAST_START",
["npcID"] = 195837,
},
[378120] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Rock",
["npcID"] = 192799,
},
[427760] = {
["source"] = "Envoy of Winter",
["event"] = "SPELL_CAST_START",
["npcID"] = 209929,
},
[424178] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sickened Growth",
["npcID"] = 207926,
},
[377609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cleff",
["npcID"] = 194514,
},
[410873] = {
["source"] = "Gust Soldier",
["event"] = "SPELL_CAST_START",
["npcID"] = 45477,
},
[392451] = {
["source"] = "Flame Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 197985,
},
[369423] = {
["source"] = "Skittering Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 184303,
},
[104318] = {
["npcID"] = 55659,
},
[377612] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[400641] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["event"] = "SPELL_CAST_START",
["npcID"] = 198998,
},
[372495] = {
["source"] = "Ensnaring Current",
["event"] = "SPELL_CAST_START",
["npcID"] = 191328,
},
[426741] = {
["source"] = "Naz'jar Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 40577,
},
[417018] = {
["source"] = "Alliance Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206351,
},
[387337] = {
["source"] = "Primalist Earthrazer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203739,
},
[418554] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Banehollow",
["npcID"] = 204243,
},
[374544] = {
["source"] = "Fetid Rotsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186226,
},
[375056] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["encounterID"] = 2613,
["event"] = "SPELL_CAST_START",
["npcID"] = 189340,
},
[380174] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[200642] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadsoul Ruiner",
["npcID"] = 95771,
},
[200898] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Inquisitor Tormentorum",
["npcID"] = 96015,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[414974] = {
["source"] = "Searing Rootguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 210592,
},
[377105] = {
["source"] = "Vault Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 190510,
},
[76813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Spiritmender",
["npcID"] = 41096,
},
[418046] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Grommash Hellscream",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203678,
},
[418558] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Banehollow",
["npcID"] = 204243,
},
[201411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfire Imp",
["npcID"] = 100527,
},
[418047] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Anduin Lothar",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203679,
},
[427771] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 40586,
},
[118905] = {
["source"] = "Capacitor Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 61245,
},
[373526] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dizzying Flutterer",
["npcID"] = 211020,
},
[400649] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["event"] = "SPELL_CAST_START",
["npcID"] = 198998,
},
[390926] = {
["event"] = "SPELL_CAST_START",
["source"] = "Barker",
["npcID"] = 194515,
},
[396044] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 188252,
},
[76686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Obsidian Borer",
["npcID"] = 40019,
},
[264525] = {
["source"] = "Maddened Survivalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 131850,
},
[375575] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Dragonspawn Flamebender",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191230,
},
[369946] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonhunter Igordan",
["npcID"] = 191611,
},
[411910] = {
["source"] = "Young Storm Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 45919,
},
[191946] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["encounterID"] = 1810,
["event"] = "SPELL_CAST_START",
["npcID"] = 91784,
},
[47059] = {
["source"] = "Stars' Rest Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 51797,
},
[388882] = {
["source"] = "Infuser Sariya",
["event"] = "SPELL_CAST_START",
["npcID"] = 190405,
},
[375065] = {
["source"] = "Fetid Rotsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186226,
},
[406282] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thorak Greenscale",
["npcID"] = 205618,
},
[209602] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["npcID"] = 104218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1870,
},
[417030] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Alliance Conjuror",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 206351,
},
[76815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Spiritmender",
["npcID"] = 41096,
},
[410890] = {
["source"] = "Infinite Warder",
["event"] = "SPELL_CAST_START",
["npcID"] = 205259,
},
[375068] = {
["encounterName"] = "Magmatusk",
["source"] = "Lava Tentacles",
["encounterID"] = 2610,
["event"] = "SPELL_CAST_START",
["npcID"] = 190023,
},
[400144] = {
["source"] = "Vraken the Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 200584,
},
[382233] = {
["event"] = "SPELL_CAST_START",
["source"] = "Batak",
["npcID"] = 193462,
},
[404744] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[418056] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Anduin Lothar",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203679,
},
[417011] = {
["source"] = "Paladin of the Silver Hand",
["event"] = "SPELL_CAST_START",
["npcID"] = 208193,
},
[406798] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sawscale Viper",
["npcID"] = 208691,
},
[196290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormwake Hydra",
["npcID"] = 91792,
},
[378143] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Infiltrator",
["npcID"] = 189895,
},
[281420] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilge Rat Brinescale",
["npcID"] = 129600,
},
[117628] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Zian of the Endless Shadow",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60701,
},
[395029] = {
["isChanneled"] = true,
["source"] = "Melidrussa Chillworn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 195119,
},
[428293] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Honor Guard",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 40633,
},
[371489] = {
["isChanneled"] = true,
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[388377] = {
["source"] = "Captured Raven",
["event"] = "SPELL_CAST_START",
["npcID"] = 191508,
},
[409359] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["encounterID"] = 2682,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 199659,
},
[418059] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Anduin Lothar",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203679,
},
[200637] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[404754] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Null Glimmer",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 202971,
},
[411407] = {
["source"] = "Time-Lost Waveshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 205363,
},
[427245] = {
["source"] = "Hapless Assistant",
["event"] = "SPELL_CAST_START",
["npcID"] = 212981,
},
[88080] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whipping Wind",
["npcID"] = 47238,
},
[406802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sawscale Viper",
["npcID"] = 208691,
},
[264024] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[376073] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[413427] = {
["source"] = "Pendule",
["event"] = "SPELL_CAST_START",
["npcID"] = 206074,
},
[412922] = {
["source"] = "Spurlok, Timesworn Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 205158,
},
[374563] = {
["source"] = "Dazzling Dragonfly",
["event"] = "SPELL_CAST_START",
["npcID"] = 190362,
},
[418544] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Banehollow",
["npcID"] = 204243,
},
[128249] = {
["source"] = "Scarlet Evoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 58756,
},
[414992] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Flamespeaker",
["npcID"] = 206975,
},
[420102] = {
["source"] = "Captain Garrick",
["event"] = "SPELL_CAST_START",
["npcID"] = 209057,
},
[169179] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 83846,
},
[397110] = {
["source"] = "Air Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 203743,
},
[414993] = {
["source"] = "Elder Cassaphine",
["event"] = "SPELL_CAST_START",
["npcID"] = 206818,
},
[395035] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulharvester Galtmaa",
["npcID"] = 195927,
},
[371471] = {
["isChanneled"] = true,
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 187969,
},
[17843] = {
["source"] = "Novice Timewalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 189583,
},
[111752] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Neophyte",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58823,
},
[118529] = {
["source"] = "Mogu'shan Secret-Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 61131,
},
[418591] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["npcID"] = 208367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[212423] = {
["source"] = "Risen Skulker",
["event"] = "SPELL_CAST_START",
["npcID"] = 99541,
},
[240066] = {
["encounterName"] = "Harjatan",
["source"] = "Razorjaw Wavemender",
["npcID"] = 116569,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2036,
},
[374567] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["encounterID"] = 2582,
["event"] = "SPELL_CAST_START",
["npcID"] = 186644,
},
[375079] = {
["source"] = "Squallbringer Cyraz",
["event"] = "SPELL_CAST_START",
["npcID"] = 190370,
},
[375591] = {
["source"] = "Bubbling Sapling",
["event"] = "SPELL_CAST_START",
["npcID"] = 191313,
},
[378150] = {
["source"] = "Molten Primalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 186825,
},
[388897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Root Snapper",
["npcID"] = 210106,
},
[372538] = {
["source"] = "Lava Flare",
["event"] = "SPELL_CAST_START",
["npcID"] = 189470,
},
[75539] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Rom'ogg Bonecrusher",
["npcID"] = 39665,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1040,
},
[200905] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Inquisitor Tormentorum",
["npcID"] = 96015,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1850,
},
[395541] = {
["source"] = "Emblazion",
["event"] = "SPELL_CAST_START",
["npcID"] = 193650,
},
[373034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mudfin Mudrunner",
["npcID"] = 186690,
},
[426768] = {
["source"] = "Naz'jar Tempest Witch",
["event"] = "SPELL_CAST_START",
["npcID"] = 40634,
},
[410904] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[411433] = {
["isChanneled"] = true,
["source"] = "Frigid Binder",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205384,
},
[403740] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[114182] = {
["source"] = "Scarlet Scholar",
["event"] = "SPELL_CAST_START",
["npcID"] = 59372,
},
[265568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[110968] = {
["source"] = "Scarlet Purifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 58569,
},
[403741] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[256959] = {
["source"] = "Reanimated Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 127757,
},
[387388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Knoll",
["npcID"] = 194521,
},
[254901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Atal'Shadra Bloodletter",
["npcID"] = 122872,
},
[420647] = {
["source"] = "Ashendir Hartwood",
["event"] = "SPELL_CAST_START",
["npcID"] = 211258,
},
[373549] = {
["source"] = "Skittering Hoverfly",
["event"] = "SPELL_CAST_START",
["npcID"] = 198420,
},
[382249] = {
["source"] = "Trickclaw Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 185528,
},
[195801] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skrog Tidestomper",
["npcID"] = 95939,
},
[410351] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199659,
},
[225732] = {
["source"] = "Lady Velandras Ravencrest",
["event"] = "SPELL_CAST_START",
["npcID"] = 98538,
},
[379134] = {
["source"] = "Earthshaker Theurgist",
["event"] = "SPELL_CAST_START",
["npcID"] = 189230,
},
[405279] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[207806] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[266106] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Bloodswarmer",
["npcID"] = 133835,
},
[392486] = {
["source"] = "Tempest Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 198047,
},
[368434] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Karantun",
["npcID"] = 193647,
},
[200913] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[396069] = {
["source"] = "Primal Earthshard",
["event"] = "SPELL_CAST_START",
["npcID"] = 185647,
},
[215754] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spawn of Serpentrix",
["npcID"] = 108655,
},
[264038] = {
["source"] = "Coven Thornshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 131666,
},
[393511] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cauldronbearer Blakor",
["npcID"] = 186783,
},
[397109] = {
["event"] = "SPELL_CAST_START",
["source"] = "Air Revenant",
["npcID"] = 203743,
},
[405316] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[200658] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadsoul Ruiner",
["npcID"] = 95771,
},
[9613] = {
["source"] = "Darkfiend Defiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 93111,
},
[400165] = {
["source"] = "Infinite Twilight Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 201223,
},
[374066] = {
["source"] = "Primalist Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 190345,
},
[255421] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["npcID"] = 122963,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2086,
},
[369409] = {
["source"] = "Earthen Custodian",
["event"] = "SPELL_CAST_START",
["npcID"] = 184130,
},
[422683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oxis of Fire",
["npcID"] = 210319,
},
[200154] = {
["source"] = "Understone Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 102253,
},
[214988] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Vengeance",
["npcID"] = 100364,
},
[239808] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Soulguard",
["npcID"] = 120191,
},
[211406] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 104295,
},
[427290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galok Wingslicer",
["npcID"] = 209047,
},
[413473] = {
["source"] = "Temporal Deviation",
["event"] = "SPELL_CAST_START",
["npcID"] = 206063,
},
[369411] = {
["source"] = "Cavern Seeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 184301,
},
[422685] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oxis of Fire",
["npcID"] = 210319,
},
[382277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Balara",
["npcID"] = 193457,
},
[126973] = {
["source"] = "Mogu'shan Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 64063,
},
[373046] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 188252,
},
[396075] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Elemental",
["npcID"] = 203747,
},
[372568] = {
["isChanneled"] = true,
["source"] = "Flashfrost Earthshaper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[240577] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidescale Combatant",
["npcID"] = 120473,
},
[391470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bowline",
["npcID"] = 194451,
},
[369465] = {
["source"] = "Earthen Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 186420,
},
[15228] = {
["source"] = "Zandalari Fire-Dancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 60402,
},
[352520] = {
["npcID"] = 178601,
},
[239810] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Soulguard",
["npcID"] = 120191,
},
[192985] = {
["encounterName"] = "Wrath of Azshara",
["source"] = "Wrath of Azshara",
["npcID"] = 96028,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1814,
},
[395558] = {
["source"] = "Emblazion",
["event"] = "SPELL_CAST_START",
["npcID"] = 193650,
},
[386866] = {
["source"] = "Gorging Stagbeetle",
["event"] = "SPELL_CAST_START",
["npcID"] = 195709,
},
[372553] = {
["source"] = "Scavenger Matriarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 192812,
},
[396078] = {
["source"] = "Summoned Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 193288,
},
[374073] = {
["source"] = "Primalist Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 190345,
},
[133111] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Baxel Brassbombs",
["npcID"] = 67504,
},
[395567] = {
["source"] = "Gravlion",
["event"] = "SPELL_CAST_START",
["npcID"] = 193654,
},
[372047] = {
["source"] = "Defier Draghar",
["event"] = "SPELL_CAST_START",
["npcID"] = 187897,
},
[260793] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["npcID"] = 131817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2118,
},
[374586] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189478,
},
[373051] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mudfin Salamancer",
["npcID"] = 186669,
},
[422691] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[196587] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["encounterID"] = 1832,
["event"] = "SPELL_CAST_START",
["npcID"] = 98542,
},
[89105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lurking Tempest",
["npcID"] = 45704,
},
[424227] = {
["source"] = "Priestess of the Moon",
["event"] = "SPELL_CAST_START",
["npcID"] = 211076,
},
[377658] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[382795] = {
["isChanneled"] = true,
["source"] = "Qalashi Lavamancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 193944,
},
[384823] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189886,
},
[416999] = {
["source"] = "Paladin of the Silver Hand",
["event"] = "SPELL_CAST_START",
["npcID"] = 208193,
},
[422693] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oxis of Fire",
["npcID"] = 210319,
},
[377594] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[388918] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[125056] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zuckerberg",
["npcID"] = 165189,
},
[201176] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[421603] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2786,
},
[419624] = {
["source"] = "Whispering Behemoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 207171,
},
[390897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scalepiercer",
["npcID"] = 186632,
},
[396084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Elemental",
["npcID"] = 203747,
},
[428360] = {
["source"] = "Firelands Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 210293,
},
[411437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Siegemaster",
["npcID"] = 198874,
},
[381280] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uktulut Trainee",
["npcID"] = 193203,
},
[422696] = {
["source"] = "Avius Flamebeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 210305,
},
[374080] = {
["source"] = "Primalist Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 190348,
},
[384827] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[391480] = {
["event"] = "SPELL_CAST_START",
["source"] = "Two-Eye",
["npcID"] = 194522,
},
[102156] = {
["encounterName"] = "Echo of Baine",
["source"] = "Time-Twisted Seer",
["encounterID"] = 1881,
["event"] = "SPELL_CAST_START",
["npcID"] = 54553,
},
[384316] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["npcID"] = 186615,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2636,
},
[411439] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Siegemaster",
["npcID"] = 198874,
},
[250050] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[195037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Oracle",
["npcID"] = 95861,
},
[80279] = {
["source"] = "Stonecore Rift Conjurer",
["event"] = "SPELL_CAST_START",
["npcID"] = 42691,
},
[413487] = {
["source"] = "Temporal Fusion",
["event"] = "SPELL_CAST_START",
["npcID"] = 206068,
},
[411952] = {
["source"] = "Infinite Timebender",
["event"] = "SPELL_CAST_START",
["npcID"] = 205337,
},
[418605] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Future Self",
["npcID"] = 208959,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[396600] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorger",
["npcID"] = 192759,
},
[397112] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Proto-Dragon",
["npcID"] = 189798,
},
[405812] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[265081] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[372561] = {
["source"] = "Qalashi Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 189227,
},
[113141] = {
["encounterName"] = "Darkmaster Gandling",
["source"] = "Darkmaster Gandling",
["encounterID"] = 1430,
["event"] = "SPELL_CAST_START",
["npcID"] = 59080,
},
[317792] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magus of the Dead",
["npcID"] = 163366,
},
[373573] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sprite Dreamer",
["npcID"] = 207617,
},
[265594] = {
["event"] = "SPELL_CAST_START",
["source"] = "Umbra'rix",
["npcID"] = 134717,
},
[376644] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[421636] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2786,
},
[209628] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["npcID"] = 104218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1870,
},
[199389] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1838,
},
[419632] = {
["isChanneled"] = true,
["source"] = "Pendule",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208945,
},
[383298] = {
["source"] = "Summoned Lava Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 182815,
},
[391998] = {
["source"] = "Erupting Magma",
["event"] = "SPELL_CAST_START",
["npcID"] = 191917,
},
[169445] = {
["source"] = "Twisted Abomination",
["event"] = "SPELL_CAST_START",
["npcID"] = 84767,
},
[382787] = {
["source"] = "Disease Slasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 187315,
},
[126958] = {
["source"] = "Mogu'shan Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 64061,
},
[391999] = {
["source"] = "Nokhud Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 185445,
},
[38618] = {
["encounterName"] = "Frozen Commander",
["source"] = "Commander Stoutbeard",
["encounterID"] = 519,
["event"] = "SPELL_CAST_START",
["npcID"] = 26796,
},
[193505] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[411958] = {
["source"] = "Iridikron's Creation",
["event"] = "SPELL_CAST_START",
["npcID"] = 205691,
},
[102158] = {
["encounterName"] = "Echo of Baine",
["source"] = "Time-Twisted Seer",
["encounterID"] = 1881,
["event"] = "SPELL_CAST_START",
["npcID"] = 54553,
},
[419123] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[401212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trudging Devourer",
["npcID"] = 201066,
},
[403771] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[387826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ukhel Beastcaller",
["npcID"] = 195878,
},
[418539] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Banehollow",
["npcID"] = 204243,
},
[256922] = {
["source"] = "Faceless Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 131821,
},
[389443] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Nullification Device",
["encounterID"] = 2615,
["event"] = "SPELL_CAST_START",
["npcID"] = 196712,
},
[265088] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["npcID"] = 133219,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2094,
},
[214989] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Vengeance",
["npcID"] = 100364,
},
[382791] = {
["source"] = "Qalashi Lavamancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 193944,
},
[201141] = {
["isChanneled"] = true,
["source"] = "Wrathguard Bladelord",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98810,
},
[265089] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Blood Priest",
["npcID"] = 131492,
},
[401642] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[114185] = {
["isChanneled"] = true,
["source"] = "Scarlet Scholar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59372,
},
[385351] = {
["source"] = "Unstable Arcanogolem",
["event"] = "SPELL_CAST_START",
["npcID"] = 201554,
},
[406333] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[257732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Enforcer",
["npcID"] = 129602,
},
[202728] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadlord Mendacius",
["npcID"] = 99649,
},
[389446] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Nullification Device",
["encounterID"] = 2615,
["event"] = "SPELL_CAST_START",
["npcID"] = 196712,
},
[265091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Blood Priest",
["npcID"] = 131492,
},
[133889] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilgewater Field Medic",
["npcID"] = 67919,
},
[390982] = {
["source"] = "Forge-Keep Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 192699,
},
[376171] = {
["source"] = "Primalist Icecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 190377,
},
[375630] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Drakonid Stormbringer",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191232,
},
[388424] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["encounterID"] = 2618,
["event"] = "SPELL_CAST_START",
["npcID"] = 189729,
},
[390983] = {
["source"] = "Qalashi Drakeflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 192341,
},
[260292] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["npcID"] = 131817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2118,
},
[396629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elusive Prime Salamanther",
["npcID"] = 194062,
},
[387960] = {
["source"] = "Caldera Stomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187919,
},
[390984] = {
["source"] = "Qalashi Rampager",
["event"] = "SPELL_CAST_START",
["npcID"] = 186727,
},
[209378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imacu'tya",
["npcID"] = 104275,
},
[257478] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Mastiff",
["npcID"] = 128551,
},
[424241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amirdrassil Sentinel",
["npcID"] = 207782,
},
[372562] = {
["source"] = "Hyena Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 192506,
},
[257736] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Stormcaller",
["npcID"] = 126919,
},
[410999] = {
["source"] = "Armored Mistral",
["event"] = "SPELL_CAST_START",
["npcID"] = 45915,
},
[419626] = {
["source"] = "Calderamor",
["event"] = "SPELL_CAST_START",
["npcID"] = 207136,
},
[426845] = {
["source"] = "Infested Icecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 84989,
},
[369399] = {
["source"] = "Earthen Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 186420,
},
[385263] = {
["source"] = "Coastal Eel",
["event"] = "SPELL_CAST_START",
["npcID"] = 198782,
},
[406851] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[390987] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emberspark",
["npcID"] = 208664,
},
[428345] = {
["source"] = "Molten Scorpid",
["event"] = "SPELL_CAST_START",
["npcID"] = 213696,
},
[383823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Hornsounder",
["npcID"] = 192796,
},
[170738] = {
["source"] = "Undermage Kesalon",
["event"] = "SPELL_CAST_START",
["npcID"] = 85496,
},
[390988] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Sentinel",
["npcID"] = 192700,
},
[385359] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[422717] = {
["source"] = "Phebis of the Burning Sea",
["event"] = "SPELL_CAST_START",
["npcID"] = 210306,
},
[384336] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Plainstomper",
["npcID"] = 191847,
},
[382704] = {
["source"] = "Grand Artificer Zeerak",
["event"] = "SPELL_CAST_START",
["npcID"] = 201553,
},
[368984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Firebinder",
["npcID"] = 186605,
},
[392013] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystalline Walker",
["npcID"] = 201063,
},
[406854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malgosa Spellbinder",
["npcID"] = 205620,
},
[403272] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[384868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Longbow",
["npcID"] = 192789,
},
[201139] = {
["source"] = "Wrathguard Bladelord",
["event"] = "SPELL_CAST_START",
["npcID"] = 98810,
},
[374634] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189478,
},
[388944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Flowbreaker",
["npcID"] = 203748,
},
[423265] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2786,
},
[406344] = {
["source"] = "Zaqali Firecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 200454,
},
[57046] = {
["source"] = "Crazed Mana-Surge",
["event"] = "SPELL_CAST_START",
["npcID"] = 26737,
},
[396520] = {
["source"] = "Stoneclaw Terror",
["event"] = "SPELL_CAST_START",
["npcID"] = 194119,
},
[387410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Boss",
["npcID"] = 194404,
},
[412448] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepflayer Broodmatron",
["npcID"] = 200115,
},
[390481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uranto the Swift",
["npcID"] = 191103,
},
[9232] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "High Inquisitor Whitemane",
["encounterID"] = 1425,
["event"] = "SPELL_CAST_START",
["npcID"] = 3977,
},
[387411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulharvester Galtmaa",
["npcID"] = 195927,
},
[199143] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[204243] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightmare Dweller",
["npcID"] = 101991,
},
[264050] = {
["source"] = "Thistle Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 135474,
},
[410848] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neltharion",
["npcID"] = 201668,
},
[414535] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[415047] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[412012] = {
["isChanneled"] = true,
["source"] = "Infinite Timeslicer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205408,
},
[373084] = {
["source"] = "Irontorch Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 189466,
},
[424771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Harbinger of Incineration",
["npcID"] = 210147,
},
[200185] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[430292] = {
["source"] = "Inquisitor Fairbell",
["event"] = "SPELL_CAST_START",
["npcID"] = 211930,
},
[201959] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113536,
},
[241108] = {
["encounterName"] = "Harjatan",
["source"] = "Tidescale Legionnaire",
["npcID"] = 117123,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2036,
},
[242909] = {
["encounterName"] = "Goroth",
["source"] = "Infernal Chaosbringer",
["npcID"] = 118022,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2032,
},
[425796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Harbinger of Incineration",
["npcID"] = 210147,
},
[196563] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["npcID"] = 91784,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[371551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rebel Incinerator",
["npcID"] = 195062,
},
[419144] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[427863] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[373087] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189886,
},
[428868] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["encounterID"] = 1047,
["event"] = "SPELL_CAST_START",
["npcID"] = 213770,
},
[427333] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rydra Scalegorger",
["npcID"] = 209048,
},
[111631] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Instructor Chillheart",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58633,
},
[56919] = {
["source"] = "Alliance Cleric",
["event"] = "SPELL_CAST_START",
["npcID"] = 26805,
},
[411994] = {
["isChanneled"] = true,
["source"] = "Infinite Chronoweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205384,
},
[114062] = {
["encounterName"] = "Jandice Barov",
["source"] = "Jandice Barov",
["encounterID"] = 1427,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59184,
},
[270264] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Breacher",
["npcID"] = 209821,
},
[273185] = {
["source"] = "Shieldbearer of Zul",
["event"] = "SPELL_CAST_START",
["npcID"] = 127879,
},
[385883] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Custodian",
["npcID"] = 192703,
},
[198379] = {
["encounterName"] = "Archdruid Glaidalis",
["source"] = "Archdruid Glaidalis",
["npcID"] = 96512,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1836,
},
[419659] = {
["event"] = "SPELL_CAST_START",
["source"] = "Incendiary Runebear",
["npcID"] = 209882,
},
[399701] = {
["source"] = "Swooping Flayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 199809,
},
[385258] = {
["source"] = "Coastal Eel",
["event"] = "SPELL_CAST_START",
["npcID"] = 198782,
},
[415106] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198997,
},
[421672] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["encounterID"] = 2737,
["event"] = "SPELL_CAST_START",
["npcID"] = 208478,
},
[210150] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[418637] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[382303] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["encounterID"] = 2556,
["event"] = "SPELL_CAST_START",
["npcID"] = 184018,
},
[255952] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Skycap'n Kragg",
["npcID"] = 126832,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2093,
},
[407891] = {
["source"] = "Horde Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 204206,
},
[413044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grotesque Horror",
["npcID"] = 138187,
},
[417634] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[81439] = {
["source"] = "Millhouse Manastorm",
["event"] = "SPELL_CAST_START",
["npcID"] = 43391,
},
[428823] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 83846,
},
[375652] = {
["source"] = "Arcane Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 196115,
},
[398681] = {
["source"] = "Frigid Binder",
["event"] = "SPELL_CAST_START",
["npcID"] = 200623,
},
[110963] = {
["source"] = "Scarlet Purifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 58569,
},
[264603] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[406358] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[384353] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[256405] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["npcID"] = 126969,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2095,
},
[389474] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Flowbreaker",
["npcID"] = 203748,
},
[78754] = {
["source"] = "Ashenvale Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 34177,
},
[427341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rydra Scalegorger",
["npcID"] = 209048,
},
[381765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ice Elemental",
["npcID"] = 203752,
},
[412378] = {
["source"] = "Infinite Timebender",
["event"] = "SPELL_CAST_START",
["npcID"] = 205337,
},
[191941] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[413013] = {
["encounterName"] = "Chronikar",
["source"] = "Chronikar",
["encounterID"] = 2666,
["event"] = "SPELL_CAST_START",
["npcID"] = 198995,
},
[81440] = {
["source"] = "Millhouse Manastorm",
["event"] = "SPELL_CAST_START",
["npcID"] = 43391,
},
[393454] = {
["event"] = "SPELL_CAST_START",
["source"] = "Battlehorn Pyrhus",
["npcID"] = 190986,
},
[173563] = {
["encounterName"] = "Yalnu",
["source"] = "Feral Lasher",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 86684,
},
[75683] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[194545] = {
["source"] = "Scarlet Technician",
["event"] = "SPELL_CAST_START",
["npcID"] = 211884,
},
[405850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drazos Blackwing",
["npcID"] = 205623,
},
[256494] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["npcID"] = 126969,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2095,
},
[376169] = {
["source"] = "High Thaumaturge Fural",
["event"] = "SPELL_CAST_START",
["npcID"] = 189905,
},
[256979] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Eudora",
["npcID"] = 126848,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2094,
},
[264608] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["npcID"] = 133219,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2094,
},
[383846] = {
["source"] = "Swelling Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 188667,
},
[394593] = {
["event"] = "SPELL_CAST_START",
["source"] = "Captain Lancer",
["npcID"] = 193198,
},
[424315] = {
["source"] = "Druid of the Moon",
["event"] = "SPELL_CAST_START",
["npcID"] = 211086,
},
[111762] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Neophyte",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58823,
},
[412505] = {
["source"] = "Tyr's Vanguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 205151,
},
[205549] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[413529] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[385383] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Sentinel",
["npcID"] = 192700,
},
[268202] = {
["encounterName"] = "Gorak Tul",
["source"] = "Deathtouched Slaver",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 135552,
},
[425300] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zaqali Flamemancer",
["npcID"] = 210170,
},
[198641] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Kur'talos Ravencrest",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98965,
},
[197141] = {
["source"] = "Hatecoil Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 100216,
},
[373614] = {
["source"] = "Blazebound Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 190034,
},
[398690] = {
["source"] = "Glakis, Winter's Wrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 199502,
},
[409437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[407902] = {
["source"] = "Horde Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 204206,
},
[370054] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magmammoth Breaker",
["npcID"] = 194912,
},
[200700] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[386921] = {
["encounterName"] = "Granyth",
["source"] = "Dragonkiller Lance",
["npcID"] = 194367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2637,
},
[385386] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Stonetongue",
["npcID"] = 201552,
},
[201902] = {
["source"] = "Taintheart Deadeye",
["event"] = "SPELL_CAST_START",
["npcID"] = 100539,
},
[398692] = {
["source"] = "Glakis, Winter's Wrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 199502,
},
[81442] = {
["source"] = "Millhouse Manastorm",
["event"] = "SPELL_CAST_START",
["npcID"] = 43391,
},
[428374] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 40586,
},
[369049] = {
["encounterName"] = "Emberon",
["source"] = "Vault Keeper",
["encounterID"] = 2558,
["event"] = "SPELL_CAST_START",
["npcID"] = 186107,
},
[386411] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["npcID"] = 186339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[75813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Tempest Witch",
["npcID"] = 40634,
},
[188907] = {
["source"] = "Darkfiend Dreadbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 92789,
},
[395594] = {
["source"] = "Zurgaz Corebreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 193680,
},
[384365] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Plainstomper",
["npcID"] = 191847,
},
[76325] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flame Caller",
["npcID"] = 39708,
},
[191735] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Myrmidon",
["npcID"] = 98954,
},
[392576] = {
["source"] = "Tempest Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 198047,
},
[413024] = {
["source"] = "Valow, Timesworn Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 201222,
},
[423771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elisande",
["npcID"] = 208668,
},
[385390] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Sentinel",
["npcID"] = 192700,
},
[428889] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["encounterID"] = 1047,
["event"] = "SPELL_CAST_START",
["npcID"] = 213770,
},
[423260] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2786,
},
[427727] = {
["source"] = "Reefbreaker Moruud",
["event"] = "SPELL_CAST_START",
["npcID"] = 209898,
},
[183548] = {
["source"] = "Stoneclaw Grubmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 102404,
},
[387950] = {
["source"] = "Caldera Stomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187919,
},
[56969] = {
["source"] = "Azure Scale-Binder",
["event"] = "SPELL_CAST_START",
["npcID"] = 26735,
},
[372107] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189232,
},
[377204] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["encounterID"] = 2611,
["event"] = "SPELL_CAST_START",
["npcID"] = 189901,
},
[367481] = {
["source"] = "Claw Fighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 185508,
},
[372087] = {
["source"] = "Defier Draghar",
["event"] = "SPELL_CAST_START",
["npcID"] = 187897,
},
[409445] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[389487] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neela Firebane",
["npcID"] = 193686,
},
[408422] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[374135] = {
["source"] = "Craggy Stag",
["event"] = "SPELL_CAST_START",
["npcID"] = 191541,
},
[423775] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Boughweaver",
["npcID"] = 211383,
},
[393582] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cindershard Igniter",
["npcID"] = 198382,
},
[375671] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Iceslinger",
["npcID"] = 203750,
},
[258777] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Oarsman",
["npcID"] = 127111,
},
[382836] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["npcID"] = 186338,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[389423] = {
["source"] = "Thieving Conjurer",
["event"] = "SPELL_CAST_START",
["npcID"] = 196388,
},
[367484] = {
["source"] = "Claw Fighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 185508,
},
[394607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Captain Lancer",
["npcID"] = 193198,
},
[404364] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 202789,
},
[393584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horned Armoredon",
["npcID"] = 194692,
},
[193018] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["npcID"] = 91797,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1812,
},
[198079] = {
["encounterName"] = "Smashspite the Hateful",
["source"] = "Smashspite the Hateful",
["encounterID"] = 1834,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98949,
},
[419684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Incendiary Runebear",
["npcID"] = 209882,
},
[128233] = {
["source"] = "Scarlet Evangelist",
["event"] = "SPELL_CAST_START",
["npcID"] = 58685,
},
[185854] = {
["source"] = "Nightmare Rider",
["event"] = "SPELL_CAST_START",
["npcID"] = 92792,
},
[376186] = {
["source"] = "Overseer Lahar",
["event"] = "SPELL_CAST_START",
["npcID"] = 189235,
},
[413544] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[198904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotheart Dryad",
["npcID"] = 99358,
},
[76588] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Zealot",
["npcID"] = 39990,
},
[372093] = {
["source"] = "Furious Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 196540,
},
[236518] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Priestess Lunaspyre",
["npcID"] = 118518,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[250096] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[383864] = {
["source"] = "Erupting Magma",
["event"] = "SPELL_CAST_START",
["npcID"] = 191917,
},
[404846] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[278444] = {
["source"] = "Devouring Maggot",
["event"] = "SPELL_CAST_START",
["npcID"] = 134024,
},
[407917] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[385912] = {
["isChanneled"] = true,
["source"] = "Wild Crystalspine",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 192591,
},
[241305] = {
["event"] = "SPELL_CAST_START",
["source"] = "Razorjaw Acolyte",
["npcID"] = 117154,
},
[207861] = {
["source"] = "Genn Greymane",
["event"] = "SPELL_CAST_START",
["npcID"] = 214073,
},
[418153] = {
["source"] = "Cinderclaw Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 207084,
},
[383866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Incarnated Wick",
["npcID"] = 205407,
},
[164887] = {
["source"] = "Everbloom Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 81820,
},
[392087] = {
["source"] = "Stubborn Hornswog",
["event"] = "SPELL_CAST_START",
["npcID"] = 186834,
},
[387440] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ukhel Beastcaller",
["npcID"] = 195878,
},
[405905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Henri Snufftail",
["npcID"] = 210075,
},
[400777] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[214003] = {
["source"] = "Risen Swordsman",
["event"] = "SPELL_CAST_START",
["npcID"] = 102094,
},
[376725] = {
["encounterName"] = "Balakar Khan",
["source"] = "Nokhud Stormcaster",
["npcID"] = 190294,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[426855] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 206172,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[388474] = {
["source"] = "Bloodstripe Great Ray",
["event"] = "SPELL_CAST_START",
["npcID"] = 210050,
},
[409456] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[411000] = {
["source"] = "Armored Mistral",
["event"] = "SPELL_CAST_START",
["npcID"] = 45915,
},
[385916] = {
["encounterName"] = "Granyth",
["source"] = "Granyth",
["npcID"] = 186616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2637,
},
[392569] = {
["source"] = "Flamegullet",
["event"] = "SPELL_CAST_START",
["npcID"] = 197697,
},
[196078] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["encounterID"] = 1832,
["event"] = "SPELL_CAST_START",
["npcID"] = 98542,
},
[278961] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diseased Lasher",
["npcID"] = 133870,
},
[375011] = {
["source"] = "Seismic Force",
["event"] = "SPELL_CAST_START",
["npcID"] = 192745,
},
[408946] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Preserver",
["npcID"] = 198870,
},
[201733] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[375719] = {
["source"] = "Primalbound Water Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 190739,
},
[373636] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sutaan",
["npcID"] = 188274,
},
[122259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Engineer",
["npcID"] = 62632,
},
[226287] = {
["source"] = "Vileshard Chunk",
["event"] = "SPELL_CAST_START",
["npcID"] = 101438,
},
[416048] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[383872] = {
["source"] = "Swelling Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 188667,
},
[214001] = {
["source"] = "Risen Lancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 102095,
},
[405366] = {
["source"] = "Lady Shaz'ra",
["event"] = "SPELL_CAST_START",
["npcID"] = 200885,
},
[21807] = {
["source"] = "Wily Woodling",
["event"] = "SPELL_CAST_START",
["npcID"] = 61155,
},
[377732] = {
["source"] = "Refti Custodian",
["event"] = "SPELL_CAST_START",
["npcID"] = 184319,
},
[372452] = {
["source"] = "Snowstorm Rager",
["event"] = "SPELL_CAST_START",
["npcID"] = 194158,
},
[207865] = {
["source"] = "Genn Greymane",
["event"] = "SPELL_CAST_START",
["npcID"] = 214073,
},
[369055] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Mender",
["npcID"] = 186602,
},
[428908] = {
["source"] = "Meredy Huntswell",
["event"] = "SPELL_CAST_START",
["npcID"] = 209059,
},
[392574] = {
["source"] = "Tempest Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 198047,
},
[427885] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[117485] = {
["encounterName"] = "Will of the Emperor",
["source"] = "Emperor's Courage",
["encounterID"] = 1407,
["event"] = "SPELL_CAST_START",
["npcID"] = 60398,
},
[375687] = {
["source"] = "Decay Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 190426,
},
[384933] = {
["isChanneled"] = true,
["source"] = "Primalist Flowbreaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[384899] = {
["source"] = "Rotbow Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186208,
},
[81576] = {
["source"] = "Stonecore Earthshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 43537,
},
[367500] = {
["source"] = "Bracken Warscourge",
["event"] = "SPELL_CAST_START",
["npcID"] = 185529,
},
[345495] = {
["npcID"] = 175519,
},
[421746] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Stonewarmer",
["npcID"] = 210235,
},
[233983] = {
["encounterName"] = "Demonic Inquisition",
["source"] = "Belac",
["npcID"] = 116691,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2048,
},
[396159] = {
["source"] = "Lava Burster",
["event"] = "SPELL_CAST_START",
["npcID"] = 186836,
},
[427376] = {
["source"] = "Gilgoblin Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 40935,
},
[425875] = {
["isChanneled"] = true,
["source"] = "Lingering Torment",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209564,
},
[428400] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Burning Colossus",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 207796,
},
[192003] = {
["encounterName"] = "Serpentrix",
["source"] = "Blazing Hydra Spawn",
["npcID"] = 97259,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[390531] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uranto the Swift",
["npcID"] = 191103,
},
[3110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Yazbis",
["npcID"] = 416,
},
[428401] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["encounterID"] = 1047,
["event"] = "SPELL_CAST_START",
["npcID"] = 213770,
},
[367503] = {
["source"] = "Decay Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186191,
},
[411002] = {
["source"] = "Cloud Prince",
["event"] = "SPELL_CAST_START",
["npcID"] = 45917,
},
[403326] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[201983] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[395991] = {
["source"] = "Awakened Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 191129,
},
[391385] = {
["source"] = "Summoned Lava Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 182815,
},
[413562] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Lurking Tempest",
["encounterID"] = 1043,
["event"] = "SPELL_CAST_START",
["npcID"] = 204337,
},
[412027] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Infinite Keeper",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 205212,
},
[381834] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186122,
},
[374158] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hecutta",
["npcID"] = 207300,
},
[372623] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["encounterID"] = 2557,
["event"] = "SPELL_CAST_START",
["npcID"] = 184124,
},
[263959] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[192005] = {
["encounterName"] = "Serpentrix",
["source"] = "Arcane Hydra Spawn",
["npcID"] = 97260,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[406911] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sarek Cinderbreath",
["npcID"] = 205619,
},
[113690] = {
["encounterName"] = "Flameweaver Koegler",
["source"] = "Flameweaver Koegler",
["encounterID"] = 1420,
["event"] = "SPELL_CAST_START",
["npcID"] = 59150,
},
[387465] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Altered Wymling",
["npcID"] = 190776,
},
[422776] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[169657] = {
["source"] = "Twisted Abomination",
["event"] = "SPELL_CAST_START",
["npcID"] = 84767,
},
[266181] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 131864,
},
[407936] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[118552] = {
["source"] = "Mogu'shan Secret-Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 61131,
},
[257739] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blacktooth Scrapper",
["npcID"] = 129529,
},
[106526] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56448,
},
[378155] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186125,
},
[418684] = {
["source"] = "Alliance Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 208208,
},
[427384] = {
["source"] = "Gilgoblin Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 40935,
},
[236529] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Huntress Kasparian",
["npcID"] = 118523,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[389515] = {
["source"] = "Shiverweb Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 185811,
},
[385434] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["npcID"] = 186339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[76717] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defiled Earth Rager",
["npcID"] = 40023,
},
[113691] = {
["source"] = "Flameweaver Koegler",
["event"] = "SPELL_CAST_START",
["npcID"] = 59150,
},
[111772] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Acolyte",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58757,
},
[406886] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 198997,
},
[374137] = {
["source"] = "Angerdrool",
["event"] = "SPELL_CAST_START",
["npcID"] = 195968,
},
[118297] = {
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 61029,
},
[369573] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Baelog",
["encounterID"] = 2555,
["event"] = "SPELL_CAST_START",
["npcID"] = 184581,
},
[111599] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Acolyte",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58757,
},
[392406] = {
["source"] = "Storm Warrior",
["event"] = "SPELL_CAST_START",
["npcID"] = 197982,
},
[427899] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 82682,
},
[196870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Stormweaver",
["npcID"] = 91783,
},
[256489] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["npcID"] = 126969,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2095,
},
[411012] = {
["source"] = "Young Storm Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 45919,
},
[226296] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[142625] = {
["source"] = "Wily Woodling",
["event"] = "SPELL_CAST_START",
["npcID"] = 61155,
},
[76590] = {
["source"] = "Faceless Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 40936,
},
[200105] = {
["source"] = "Ghostly Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 98368,
},
[375727] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["event"] = "SPELL_CAST_START",
["npcID"] = 184125,
},
[369050] = {
["source"] = "Primalist Worshipper",
["event"] = "SPELL_CAST_START",
["npcID"] = 186759,
},
[420737] = {
["source"] = "Flame-Warped Sister",
["event"] = "SPELL_CAST_START",
["npcID"] = 207016,
},
[113134] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "High Inquisitor Whitemane",
["encounterID"] = 1425,
["event"] = "SPELL_CAST_START",
["npcID"] = 3977,
},
[376727] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[263961] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[428926] = {
["source"] = "Faceless Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 40936,
},
[409009] = {
["source"] = "Summitshaper Lorac",
["event"] = "SPELL_CAST_START",
["npcID"] = 201522,
},
[75823] = {
["encounterName"] = "Corla, Herald of Twilight",
["source"] = "Corla, Herald of Twilight",
["npcID"] = 39679,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1038,
},
[164357] = {
["encounterName"] = "Witherbark",
["source"] = "Witherbark",
["encounterID"] = 1746,
["event"] = "SPELL_CAST_START",
["npcID"] = 81522,
},
[209410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Arcanist",
["npcID"] = 104247,
},
[408969] = {
["source"] = "Monstrous Mud",
["event"] = "SPELL_CAST_START",
["npcID"] = 192519,
},
[408483] = {
["source"] = "Zaqali Lavatongue",
["event"] = "SPELL_CAST_START",
["npcID"] = 208661,
},
[385442] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["encounterID"] = 2616,
["event"] = "SPELL_CAST_START",
["npcID"] = 189722,
},
[169494] = {
["source"] = "Gnarlroot",
["event"] = "SPELL_CAST_START",
["npcID"] = 81984,
},
[76719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Incendiary Spark",
["npcID"] = 40021,
},
[423811] = {
["source"] = "Overseer Chardryn",
["event"] = "SPELL_CAST_START",
["npcID"] = 210912,
},
[111774] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Acolyte",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58757,
},
[376723] = {
["encounterName"] = "Balakar Khan",
["source"] = "Nokhud Stormcaster",
["npcID"] = 190294,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[268234] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Bile Oozeling",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 136541,
},
[82858] = {
["source"] = "High Priestess Azil",
["event"] = "SPELL_CAST_START",
["npcID"] = 42333,
},
[193803] = {
["isChanneled"] = true,
["source"] = "Tarspitter Grub",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 92538,
},
[424836] = {
["source"] = "Sylvanesh the Ascended",
["event"] = "SPELL_CAST_START",
["npcID"] = 207107,
},
[394037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystalline Walker",
["npcID"] = 201063,
},
[266209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Deathspeaker",
["npcID"] = 134284,
},
[383385] = {
["source"] = "Filth Caller",
["event"] = "SPELL_CAST_START",
["npcID"] = 185656,
},
[121114] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Amber-Weaver",
["npcID"] = 61929,
},
[406399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malgosa Spellbinder",
["npcID"] = 205620,
},
[274383] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vermin Trapper",
["npcID"] = 130404,
},
[426783] = {
["source"] = "Faceless Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212775,
},
[396180] = {
["source"] = "Lava Burster",
["event"] = "SPELL_CAST_START",
["npcID"] = 186836,
},
[424352] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[76047] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["npcID"] = 40765,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1044,
},
[416139] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[209413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Construct",
["npcID"] = 104270,
},
[408975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sarek Cinderbreath",
["npcID"] = 205619,
},
[264150] = {
["source"] = "Thornguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 131858,
},
[418187] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["npcID"] = 208363,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[371618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Farseer",
["npcID"] = 201117,
},
[401325] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[419524] = {
["source"] = "Loose Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 209170,
},
[375201] = {
["source"] = "Bright Gustfeather",
["event"] = "SPELL_CAST_START",
["npcID"] = 195002,
},
[201226] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodtainted Fury",
["npcID"] = 100531,
},
[111008] = {
["source"] = "Scarlet Zealot",
["event"] = "SPELL_CAST_START",
["npcID"] = 58590,
},
[421059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
[369061] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["encounterID"] = 2558,
["event"] = "SPELL_CAST_START",
["npcID"] = 184422,
},
[408466] = {
["source"] = "Drogbar Crystal-collector",
["event"] = "SPELL_CAST_START",
["npcID"] = 204407,
},
[421260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
[264153] = {
["source"] = "Devouring Maggot",
["event"] = "SPELL_CAST_START",
["npcID"] = 134024,
},
[389532] = {
["source"] = "Giant Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 194588,
},
[401318] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[259531] = {
["encounterName"] = "Vol'kaal",
["source"] = "Reanimation Totem",
["encounterID"] = 2085,
["event"] = "SPELL_CAST_START",
["npcID"] = 125977,
},
[423820] = {
["source"] = "Overseer Chardryn",
["event"] = "SPELL_CAST_START",
["npcID"] = 210912,
},
[202661] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel Scorcher",
["npcID"] = 102583,
},
[375716] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Primalist Mage",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191206,
},
[384416] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[409492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Afflicted Soul",
["npcID"] = 204773,
},
[189469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Vengeance",
["npcID"] = 100364,
},
[410516] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199659,
},
[255371] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["event"] = "SPELL_CAST_START",
["npcID"] = 122963,
},
[207881] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["npcID"] = 104217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[197546] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Illysanna Ravencrest",
["encounterID"] = 1833,
["event"] = "SPELL_CAST_START",
["npcID"] = 98696,
},
[194064] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Foul Mother",
["npcID"] = 98533,
},
[388817] = {
["encounterName"] = "Granyth",
["source"] = "Granyth",
["npcID"] = 186616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2637,
},
[382883] = {
["source"] = "Vile Rothexer",
["event"] = "SPELL_CAST_START",
["npcID"] = 194241,
},
[430476] = {
["source"] = "Hallowed Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 211933,
},
[211464] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felbound Enforcer",
["npcID"] = 104278,
},
[401214] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Honeypelt",
["npcID"] = 202451,
},
[199193] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[188587] = {
["source"] = "Understone Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 102253,
},
[425381] = {
["isChanneled"] = true,
["source"] = "Firelands Flameguard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210290,
},
[415125] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207638,
},
[413590] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201788,
},
[114848] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "High Inquisitor Whitemane",
["encounterID"] = 1425,
["event"] = "SPELL_CAST_START",
["npcID"] = 3977,
},
[412868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Karokta",
["npcID"] = 203625,
},
[398750] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nimbulatus, Storm's Wrath",
["npcID"] = 199667,
},
[425873] = {
["source"] = "Lingering Torment",
["event"] = "SPELL_CAST_START",
["npcID"] = 209564,
},
[172567] = {
["source"] = "Frostwall Grunt",
["event"] = "SPELL_CAST_START",
["npcID"] = 81368,
},
[86830] = {
["source"] = "Millhouse Manastorm",
["event"] = "SPELL_CAST_START",
["npcID"] = 43391,
},
[424825] = {
["source"] = "Sylvanesh the Ascended",
["event"] = "SPELL_CAST_START",
["npcID"] = 207107,
},
[374699] = {
["source"] = "Flamecaller Aymi",
["event"] = "SPELL_CAST_START",
["npcID"] = 190368,
},
[80158] = {
["source"] = "Stonecore Warbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 42696,
},
[197137] = {
["source"] = "Hatecoil Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 100216,
},
[378282] = {
["source"] = "Qalashi Thaumaturge",
["event"] = "SPELL_CAST_START",
["npcID"] = 192788,
},
[236542] = {
["encounterName"] = "The Desolate Host",
["source"] = "The Desolate Host",
["npcID"] = 119072,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2054,
},
[397729] = {
["source"] = "Glakis, Winter's Wrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 199502,
},
[385959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Titan Defense Matrix",
["npcID"] = 193244,
},
[374719] = {
["source"] = "Stonejaw Basilisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 188128,
},
[79922] = {
["source"] = "Stonecore Flayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 42808,
},
[418200] = {
["source"] = "Infinite Riftmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 208698,
},
[125212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Initiate Oman",
["npcID"] = 205818,
},
[426684] = {
["source"] = "Naz'jar Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 212673,
},
[397514] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199659,
},
[369073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Tundrafur",
["npcID"] = 193231,
},
[259572] = {
["encounterName"] = "Vol'kaal",
["source"] = "Vol'kaal",
["encounterID"] = 2085,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 122965,
},
[368983] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rebel Incinerator",
["npcID"] = 195062,
},
[213688] = {
["source"] = "Fel Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 107024,
},
[196883] = {
["source"] = "Lord Etheldrin Ravencrest",
["event"] = "SPELL_CAST_START",
["npcID"] = 98521,
},
[373680] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["encounterID"] = 2609,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188252,
},
[260852] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[429973] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[381357] = {
["event"] = "SPELL_CAST_START",
["source"] = "Clearwater Ottuk",
["npcID"] = 192854,
},
[76584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Zealot",
["npcID"] = 39990,
},
[197797] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Risen Arcanist",
["encounterID"] = 1833,
["event"] = "SPELL_CAST_START",
["npcID"] = 100486,
},
[401316] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[412063] = {
["isChanneled"] = true,
["source"] = "Epoch Ripper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205435,
},
[389056] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["encounterID"] = 2615,
["event"] = "SPELL_CAST_START",
["npcID"] = 189719,
},
[372147] = {
["event"] = "SPELL_CAST_START",
["source"] = "Balara",
["npcID"] = 193457,
},
[374706] = {
["source"] = "Flamecaller Aymi",
["event"] = "SPELL_CAST_START",
["npcID"] = 190368,
},
[373972] = {
["isChanneled"] = true,
["source"] = "Primalist Flamedancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 190206,
},
[426905] = {
["source"] = "Minion of Ghur'sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 212778,
},
[427417] = {
["source"] = "Prophet of the Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 207315,
},
[436117] = {
["source"] = "Eratus, the Unwoven Paradox",
["event"] = "SPELL_CAST_START",
["npcID"] = 217190,
},
[405924] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krono Sandtongue",
["npcID"] = 205622,
},
[211470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Mistress",
["npcID"] = 104300,
},
[392640] = {
["source"] = "Thunderhead",
["event"] = "SPELL_CAST_START",
["npcID"] = 197698,
},
[401319] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[198820] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Latosius",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[422813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Ordan",
["npcID"] = 208727,
},
[257784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilge Rat Brinescale",
["npcID"] = 129600,
},
[386991] = {
["source"] = "Primal Proto-Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 184869,
},
[398770] = {
["source"] = "Akiormi",
["event"] = "SPELL_CAST_START",
["npcID"] = 200702,
},
[172578] = {
["isChanneled"] = true,
["source"] = "Melded Berserker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 86372,
},
[370104] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Protector",
["npcID"] = 186600,
},
[252923] = {
["source"] = "Zanchuli Witch-Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122969,
},
[387504] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["encounterID"] = 2618,
["event"] = "SPELL_CAST_START",
["npcID"] = 189729,
},
[422815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Ordan",
["npcID"] = 208727,
},
[389433] = {
["source"] = "Qiraji Prophet",
["event"] = "SPELL_CAST_START",
["npcID"] = 195641,
},
[200099] = {
["isChanneled"] = true,
["source"] = "Ghostly Protector",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98368,
},
[106797] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[382670] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["npcID"] = 186339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[394440] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntmaster Yrgena",
["npcID"] = 201538,
},
[383693] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Beastmaster",
["npcID"] = 192794,
},
[395694] = {
["source"] = "Primalist Shocktrooper",
["event"] = "SPELL_CAST_START",
["npcID"] = 199037,
},
[427444] = {
["source"] = "Prophet of the Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 207315,
},
[263943] = {
["source"] = "Heartsbane Runeweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 131677,
},
[419516] = {
["source"] = "Chronaxie",
["event"] = "SPELL_CAST_START",
["npcID"] = 206070,
},
[401342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sawscale Viper",
["npcID"] = 208691,
},
[197144] = {
["source"] = "Hatecoil Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 100216,
},
[272402] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cutwater Knife Juggler",
["npcID"] = 129599,
},
[413607] = {
["source"] = "Infinite Twilight Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 201223,
},
[407978] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Ahnzon",
["encounterID"] = 2668,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 201792,
},
[111398] = {
["isChanneled"] = true,
["source"] = "Scarlet Evangelist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 58685,
},
[392663] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Crazed Alpha",
["npcID"] = 194224,
},
[385339] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["npcID"] = 186338,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[111024] = {
["source"] = "Spirit of Redemption",
["event"] = "SPELL_CAST_START",
["npcID"] = 58592,
},
[373692] = {
["source"] = "Blazebound Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 190034,
},
[425379] = {
["source"] = "Flamespreader",
["event"] = "SPELL_CAST_START",
["npcID"] = 210294,
},
[266225] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 131864,
},
[405696] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["encounterID"] = 2667,
["event"] = "SPELL_CAST_START",
["npcID"] = 198996,
},
[373693] = {
["source"] = "Blazebound Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 190034,
},
[235271] = {
["encounterName"] = "Maiden of Vigilance",
["source"] = "Maiden of Vigilance",
["npcID"] = 118289,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2052,
},
[56837] = {
["source"] = "Mage Hunter Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 26727,
},
[423617] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elisande",
["npcID"] = 208668,
},
[428963] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Burning Colossus",
["npcID"] = 207796,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[427428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greedy Gessie",
["npcID"] = 209936,
},
[376170] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 186121,
},
[197422] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["npcID"] = 95888,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[253583] = {
["isChanneled"] = true,
["source"] = "Dazar'ai Augur",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 122972,
},
[121762] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Builder",
["npcID"] = 62633,
},
[78903] = {
["encounterName"] = "Ozruk",
["source"] = "Ozruk",
["encounterID"] = 1058,
["event"] = "SPELL_CAST_START",
["npcID"] = 42188,
},
[392665] = {
["source"] = "Time-Lost Thunderhide",
["event"] = "SPELL_CAST_START",
["npcID"] = 187258,
},
[420746] = {
["source"] = "Kaldorei Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 207117,
},
[200238] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1839,
},
[376780] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["encounterID"] = 2611,
["event"] = "SPELL_CAST_START",
["npcID"] = 189901,
},
[264694] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[200218] = {
["source"] = "Reaves",
["event"] = "SPELL_CAST_START",
["npcID"] = 101462,
},
[408970] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Preserver",
["npcID"] = 198870,
},
[425397] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Fiery Treant",
["npcID"] = 208459,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2731,
},
[403891] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[404403] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[427432] = {
["source"] = "Prophet of the Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 207315,
},
[268278] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131545,
},
[391610] = {
["source"] = "Gusting Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 190401,
},
[22907] = {
["source"] = "Alliance Ranger",
["event"] = "SPELL_CAST_START",
["npcID"] = 26802,
},
[404916] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[207906] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["npcID"] = 104217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[389564] = {
["source"] = "Huntergreen Salamanther",
["event"] = "SPELL_CAST_START",
["npcID"] = 212145,
},
[375605] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Golem",
["npcID"] = 190779,
},
[413105] = {
["encounterName"] = "Chronikar",
["source"] = "Chronikar",
["encounterID"] = 2666,
["event"] = "SPELL_CAST_START",
["npcID"] = 198995,
},
[374724] = {
["source"] = "Flamecaller Aymi",
["event"] = "SPELL_CAST_START",
["npcID"] = 190368,
},
[409271] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199703,
},
[420782] = {
["isChanneled"] = true,
["source"] = "Zaqali Lavatongue",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208661,
},
[425388] = {
["source"] = "Flamewaker Infernoguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 210295,
},
[376049] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["event"] = "SPELL_CAST_START",
["npcID"] = 184125,
},
[391613] = {
["source"] = "Subterranean Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 190404,
},
[428983] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Urctos",
["npcID"] = 210518,
},
[385419] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Stonetongue",
["npcID"] = 201552,
},
[395196] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Proto-Dragon",
["npcID"] = 185883,
},
[252687] = {
["source"] = "Shadowblade Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 122970,
},
[196127] = {
["encounterName"] = "Serpentrix",
["source"] = "Mak'rana Siltwalker",
["npcID"] = 91790,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[268306] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131545,
},
[401338] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sawscale Viper",
["npcID"] = 208691,
},
[369110] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["encounterID"] = 2558,
["event"] = "SPELL_CAST_START",
["npcID"] = 184422,
},
[269843] = {
["encounterName"] = "Unbound Abomination",
["source"] = "Unbound Abomination",
["npcID"] = 133007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2123,
},
[383452] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rugren",
["npcID"] = 201563,
},
[413621] = {
["source"] = "Infinite Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 206214,
},
[259597] = {
["event"] = "SPELL_CAST_START",
["source"] = "Child of Gonk",
["npcID"] = 127254,
},
[430051] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Screaming Soul",
["npcID"] = 214608,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[409016] = {
["source"] = "Summitshaper Lorac",
["event"] = "SPELL_CAST_START",
["npcID"] = 201522,
},
[413622] = {
["source"] = "Infinite Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 206214,
},
[420289] = {
["source"] = "Primalist Stormchaser",
["event"] = "SPELL_CAST_START",
["npcID"] = 207276,
},
[378850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Elemental",
["npcID"] = 190780,
},
[372735] = {
["source"] = "Flashfrost Earthshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187969,
},
[372683] = {
["source"] = "Infused Whelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 187894,
},
[388801] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Warrior",
["npcID"] = 195855,
},
[265168] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["npcID"] = 133219,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2094,
},
[197418] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Illysanna Ravencrest",
["encounterID"] = 1833,
["event"] = "SPELL_CAST_START",
["npcID"] = 98696,
},
[270334] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Breacher",
["npcID"] = 209821,
},
[389572] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Umbraclaw",
["npcID"] = 211401,
},
[372696] = {
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 188244,
},
[382749] = {
["source"] = "Stubborn Hornswog",
["event"] = "SPELL_CAST_START",
["npcID"] = 186834,
},
[369865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonhunter Igordan",
["npcID"] = 191611,
},
[398300] = {
["source"] = "Shambling Infester",
["event"] = "SPELL_CAST_START",
["npcID"] = 200387,
},
[422837] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[396738] = {
["source"] = "The Blue Gulper",
["event"] = "SPELL_CAST_START",
["npcID"] = 195976,
},
[378827] = {
["source"] = "Qalashi Plunderer",
["event"] = "SPELL_CAST_START",
["npcID"] = 192786,
},
[193585] = {
["source"] = "Rockbound Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 102232,
},
[408509] = {
["source"] = "Portalkeeper Cimbra",
["event"] = "SPELL_CAST_START",
["npcID"] = 202613,
},
[382410] = {
["source"] = "Trickclaw Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 185528,
},
[196144] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mak'rana Siltwalker",
["npcID"] = 91790,
},
[428468] = {
["source"] = "Shuja Grimaxe",
["event"] = "SPELL_CAST_START",
["npcID"] = 214390,
},
[418478] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Bear",
["npcID"] = 207050,
},
[203163] = {
["source"] = "Felspite Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 102788,
},
[374735] = {
["source"] = "Flamecaller Aymi",
["event"] = "SPELL_CAST_START",
["npcID"] = 190368,
},
[398806] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nimbulatus, Storm's Wrath",
["npcID"] = 199667,
},
[398276] = {
["source"] = "Glakis, Winter's Wrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 199502,
},
[422699] = {
["source"] = "Phebis of the Burning Sea",
["event"] = "SPELL_CAST_START",
["npcID"] = 210306,
},
[409473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[382434] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[408029] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Loszkeleth",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201790,
},
[282110] = {
["source"] = "Kaldorei Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 210645,
},
[192050] = {
["encounterName"] = "Serpentrix",
["source"] = "Serpentrix",
["npcID"] = 91808,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[371984] = {
["source"] = "Flashfrost Chillweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 188067,
},
[195109] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Stormweaver",
["npcID"] = 91783,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[82362] = {
["encounterName"] = "Corla, Herald of Twilight",
["source"] = "Evolved Twilight Zealot",
["npcID"] = 50284,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1038,
},
[378832] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rebel Bruiser",
["npcID"] = 195058,
},
[428472] = {
["isChanneled"] = true,
["source"] = "Violetwing Stagbeetle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210295,
},
[420525] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["npcID"] = 208363,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[413872] = {
["source"] = "Meredy Huntswell",
["event"] = "SPELL_CAST_START",
["npcID"] = 209059,
},
[386015] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Stormspeaker",
["npcID"] = 194894,
},
[375251] = {
["encounterName"] = "Magmatusk",
["source"] = "Magmatusk",
["encounterID"] = 2610,
["event"] = "SPELL_CAST_START",
["npcID"] = 181861,
},
[396774] = {
["source"] = "Cragsworn Conqueror",
["event"] = "SPELL_CAST_START",
["npcID"] = 195839,
},
[119524] = {
["source"] = "Mogu Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 61345,
},
[405431] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["encounterID"] = 2667,
["event"] = "SPELL_CAST_START",
["npcID"] = 198996,
},
[202019] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[388046] = {
["source"] = "Stinkbreath",
["event"] = "SPELL_CAST_START",
["npcID"] = 187033,
},
[385517] = {
["source"] = "Rotbow Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 187021,
},
[79932] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nevo",
["npcID"] = 81999,
},
[253721] = {
["isChanneled"] = true,
["source"] = "Shieldbearer of Zul",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 127879,
},
[383953] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bakar Companion",
["npcID"] = 194255,
},
[413123] = {
["source"] = "Forgemaster Kraglin",
["event"] = "SPELL_CAST_START",
["npcID"] = 201625,
},
[391118] = {
["source"] = "Scalebane Lieutenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 191739,
},
[401382] = {
["event"] = "SPELL_CAST_START",
["source"] = "Past Self",
["npcID"] = 185800,
},
[372719] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["encounterID"] = 2557,
["event"] = "SPELL_CAST_START",
["npcID"] = 184124,
},
[400842] = {
["source"] = "Zaqali Keeneye",
["event"] = "SPELL_CAST_START",
["npcID"] = 208660,
},
[384978] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[56934] = {
["encounterName"] = "Grand Magus Telestra",
["source"] = "Grand Magus Telestra",
["encounterID"] = 2010,
["event"] = "SPELL_CAST_START",
["npcID"] = 26731,
},
[388374] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elusive Deepstrider",
["npcID"] = 204833,
},
[265741] = {
["source"] = "Matron Bryndle",
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
[407496] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[387049] = {
["source"] = "Bouldron",
["event"] = "SPELL_CAST_START",
["npcID"] = 193644,
},
[426663] = {
["isChanneled"] = true,
["source"] = "Vicious Snap Dragon",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212681,
},
[428023] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[124967] = {
["encounterName"] = "Elegon",
["source"] = "Elegon",
["encounterID"] = 1500,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60410,
},
[225562] = {
["encounterName"] = "Dresaron",
["source"] = "Bloodtainted Burster",
["npcID"] = 100532,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1838,
},
[400333] = {
["source"] = "Cliffkeeper Bouldani",
["event"] = "SPELL_CAST_START",
["npcID"] = 202612,
},
[427456] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["encounterID"] = 1044,
["event"] = "SPELL_CAST_START",
["npcID"] = 40765,
},
[57091] = {
["encounterName"] = "Keristrasza",
["source"] = "Keristrasza",
["encounterID"] = 2011,
["event"] = "SPELL_CAST_START",
["npcID"] = 26723,
},
[391634] = {
["source"] = "Glacial Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 190403,
},
[396775] = {
["source"] = "Cragsworn Conqueror",
["event"] = "SPELL_CAST_START",
["npcID"] = 195839,
},
[421316] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[424615] = {
["source"] = "Elder Cassaphine",
["event"] = "SPELL_CAST_START",
["npcID"] = 206818,
},
[427999] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2824,
},
[400335] = {
["source"] = "Vraken the Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 200584,
},
[183088] = {
["source"] = "Mightstone Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 90997,
},
[372701] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["encounterID"] = 2557,
["event"] = "SPELL_CAST_START",
["npcID"] = 184124,
},
[386745] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormbrand Ko'mal",
["npcID"] = 206684,
},
[427694] = {
["source"] = "Reefbreaker Moruud",
["event"] = "SPELL_CAST_START",
["npcID"] = 209898,
},
[427459] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83893,
},
[405375] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["npcID"] = 200913,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[20801] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imp Minion",
["npcID"] = 12922,
},
[86331] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Grand Vizier Ertan",
["encounterID"] = 1043,
["event"] = "SPELL_CAST_START",
["npcID"] = 43878,
},
[413131] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["npcID"] = 126983,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2096,
},
[417737] = {
["source"] = "Whispering Behemoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 207171,
},
[208165] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["npcID"] = 104217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[106807] = {
["encounterName"] = "Ook-Ook",
["source"] = "Ook-Ook",
["npcID"] = 56637,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1412,
},
[384474] = {
["source"] = "Fathomless Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 209580,
},
[87618] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["encounterID"] = 1042,
["event"] = "SPELL_CAST_START",
["npcID"] = 43875,
},
[393686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Turboris",
["npcID"] = 187886,
},
[193069] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Infester",
["npcID"] = 96587,
},
[413133] = {
["source"] = "Forgemaster Kraglin",
["event"] = "SPELL_CAST_START",
["npcID"] = 201625,
},
[407504] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[85692] = {
["source"] = "Doomguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 11859,
},
[406481] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[384476] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Longbow",
["npcID"] = 192789,
},
[378847] = {
["source"] = "Qalashi Spinecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 192787,
},
[420326] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamebound Sentinel",
["npcID"] = 206900,
},
[386012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormcaller Boroo",
["npcID"] = 194317,
},
[413135] = {
["source"] = "Forgemaster Kraglin",
["event"] = "SPELL_CAST_START",
["npcID"] = 201625,
},
[200248] = {
["source"] = "Risen Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 98280,
},
[281329] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Jolly",
["npcID"] = 126845,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2094,
},
[388060] = {
["source"] = "Stinkbreath",
["event"] = "SPELL_CAST_START",
["npcID"] = 187033,
},
[413136] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["npcID"] = 126983,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2096,
},
[387037] = {
["source"] = "Primal Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 195917,
},
[381408] = {
["source"] = "Shiverweb Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 192591,
},
[398296] = {
["source"] = "Shambling Infester",
["event"] = "SPELL_CAST_START",
["npcID"] = 200387,
},
[421325] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[419790] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Moon",
["npcID"] = 210686,
},
[428004] = {
["isChanneled"] = true,
["source"] = "Keeper of the Dream",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210423,
},
[373733] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["encounterID"] = 2613,
["event"] = "SPELL_CAST_START",
["npcID"] = 189340,
},
[376292] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["event"] = "SPELL_CAST_START",
["npcID"] = 184125,
},
[266266] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 131864,
},
[384531] = {
["encounterName"] = "Gutshot",
["source"] = "Rotfang Hyena",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 194745,
},
[422053] = {
["encounterName"] = "Gnarlroot",
["source"] = "Tainted Lasher",
["npcID"] = 210231,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[260879] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[372225] = {
["source"] = "Qalashi Bonesplitter",
["event"] = "SPELL_CAST_START",
["npcID"] = 189467,
},
[369129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Modak Flamespit",
["npcID"] = 186509,
},
[372730] = {
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 188244,
},
[382435] = {
["source"] = "Decay Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186191,
},
[375296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rebel Bruiser",
["npcID"] = 195058,
},
[412117] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[420817] = {
["source"] = "Priestess of the Moon",
["event"] = "SPELL_CAST_START",
["npcID"] = 211076,
},
[372201] = {
["source"] = "Qalashi Irontorch",
["event"] = "SPELL_CAST_START",
["npcID"] = 189464,
},
[391136] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drakonid Breaker",
["npcID"] = 187240,
},
[420306] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamebound Sentinel",
["npcID"] = 206900,
},
[404442] = {
["source"] = "Vraken the Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 200584,
},
[372202] = {
["isChanneled"] = true,
["source"] = "Qalashi Irontorch",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189464,
},
[84037] = {
["encounterName"] = "Ozumat",
["source"] = "Neptulon",
["npcID"] = 40792,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[114864] = {
["source"] = "Bored Student",
["event"] = "SPELL_CAST_START",
["npcID"] = 59614,
},
[391050] = {
["source"] = "High Channeler Ryvati",
["event"] = "SPELL_CAST_START",
["npcID"] = 197535,
},
[265759] = {
["source"] = "Matron Bryndle",
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
[373947] = {
["source"] = "Skaara",
["event"] = "SPELL_CAST_START",
["npcID"] = 192949,
},
[260894] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[390115] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sarana",
["npcID"] = 190161,
},
[265760] = {
["source"] = "Matron Bryndle",
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
[384493] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shikaar Hunter",
["npcID"] = 184657,
},
[390834] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sarana",
["npcID"] = 190161,
},
[417481] = {
["source"] = "Timeline Marauder",
["event"] = "SPELL_CAST_START",
["npcID"] = 199748,
},
[413145] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["npcID"] = 126983,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2096,
},
[376811] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["encounterID"] = 2568,
["event"] = "SPELL_CAST_START",
["npcID"] = 186120,
},
[372474] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ranger Bolor",
["npcID"] = 188782,
},
[376827] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[419287] = {
["source"] = "Crenna Earth-Daughter",
["event"] = "SPELL_CAST_START",
["npcID"] = 209072,
},
[33844] = {
["event"] = "SPELL_CAST_START",
["source"] = "Treant Grovetender",
["npcID"] = 207616,
},
[387559] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["encounterID"] = 2618,
["event"] = "SPELL_CAST_START",
["npcID"] = 189729,
},
[373742] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["encounterID"] = 2613,
["event"] = "SPELL_CAST_START",
["npcID"] = 189340,
},
[413147] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["npcID"] = 126983,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2096,
},
[259092] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Stormcaller",
["npcID"] = 126919,
},
[372222] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[114872] = {
["source"] = "Bored Student",
["event"] = "SPELL_CAST_START",
["npcID"] = 59614,
},
[409581] = {
["source"] = "Whisper in the Dark",
["event"] = "SPELL_CAST_START",
["npcID"] = 203806,
},
[111667] = {
["encounterName"] = "Armsmaster Harlan",
["source"] = "Scarlet Evoker",
["encounterID"] = 1421,
["event"] = "SPELL_CAST_START",
["npcID"] = 58756,
},
[56937] = {
["encounterName"] = "Grand Magus Telestra",
["source"] = "Grand Magus Telestra",
["encounterID"] = 2010,
["event"] = "SPELL_CAST_START",
["npcID"] = 26930,
},
[386026] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Squall",
["npcID"] = 194895,
},
[332500] = {
["source"] = "Fathomless Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 209580,
},
[375094] = {
["event"] = "SPELL_CAST_START",
["source"] = "Swift Hornstrider",
["npcID"] = 188089,
},
[424408] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bodwin",
["npcID"] = 209153,
},
[31707] = {
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 78116,
},
[384492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Beastmaster",
["npcID"] = 192794,
},
[374797] = {
["event"] = "SPELL_CAST_START",
["source"] = "Divebeak Ohuna",
["npcID"] = 189373,
},
[196916] = {
["source"] = "Lady Velandras Ravencrest",
["event"] = "SPELL_CAST_START",
["npcID"] = 98538,
},
[80195] = {
["source"] = "Stonecore Bruiser",
["event"] = "SPELL_CAST_START",
["npcID"] = 42692,
},
[413151] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Grand Vizier Ertan",
["encounterID"] = 1043,
["event"] = "SPELL_CAST_START",
["npcID"] = 43878,
},
[385005] = {
["event"] = "SPELL_CAST_START",
["source"] = "General Rajaxx",
["npcID"] = 195628,
},
[387564] = {
["source"] = "Conjured Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 196102,
},
[115506] = {
["source"] = "Scarlet Flamethrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 59705,
},
[421340] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Anvil",
["npcID"] = 206478,
},
[421852] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irate Gladehart",
["npcID"] = 207785,
},
[412129] = {
["source"] = "Lerai, Timesworn Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 205152,
},
[407039] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Sundered Edgelord",
["encounterID"] = 2684,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 203812,
},
[386559] = {
["encounterName"] = "Khajin the Unyielding",
["source"] = "Khajin the Unyielding",
["encounterID"] = 2617,
["event"] = "SPELL_CAST_START",
["npcID"] = 189727,
},
[401383] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[407207] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[374789] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["encounterID"] = 2582,
["event"] = "SPELL_CAST_START",
["npcID"] = 186644,
},
[423607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elisande",
["npcID"] = 208668,
},
[429037] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Erunak Stonespeaker",
["encounterID"] = 1046,
["event"] = "SPELL_CAST_START",
["npcID"] = 40825,
},
[423410] = {
["source"] = "Isaqa",
["event"] = "SPELL_CAST_START",
["npcID"] = 209919,
},
[377844] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186122,
},
[425437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Surging Lasher",
["npcID"] = 210111,
},
[385029] = {
["encounterName"] = "Gutshot",
["source"] = "Fleshripper Vulture",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186246,
},
[395756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Cauldron Keeper",
["npcID"] = 186606,
},
[404456] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[396780] = {
["source"] = "Rimebound Subjugator",
["event"] = "SPELL_CAST_START",
["npcID"] = 195837,
},
[418464] = {
["event"] = "SPELL_CAST_START",
["source"] = "Empowered Felguard",
["npcID"] = 208542,
},
[56938] = {
["encounterName"] = "Grand Magus Telestra",
["source"] = "Grand Magus Telestra",
["encounterID"] = 2010,
["event"] = "SPELL_CAST_START",
["npcID"] = 26928,
},
[429021] = {
["source"] = "Faceless Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 40936,
},
[386546] = {
["source"] = "Arcane Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 186741,
},
[421398] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2786,
},
[398339] = {
["isChanneled"] = true,
["source"] = "Seismodor, Earth's Wrath",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 199664,
},
[386223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Stormshield",
["npcID"] = 194896,
},
[212784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Watchful Inquisitor",
["npcID"] = 105715,
},
[417764] = {
["event"] = "SPELL_CAST_START",
["source"] = "Empowered Dreadstalker",
["npcID"] = 208538,
},
[381430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Protector",
["npcID"] = 186849,
},
[129325] = {
["source"] = "Bloodthirsty Prowler",
["event"] = "SPELL_CAST_START",
["npcID"] = 62945,
},
[400877] = {
["source"] = "Smoldering Hound",
["event"] = "SPELL_CAST_START",
["npcID"] = 205045,
},
[369335] = {
["source"] = "Runic Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 184107,
},
[412136] = {
["source"] = "Valow, Timesworn Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 201222,
},
[405022] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["npcID"] = 201754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2685,
},
[389804] = {
["source"] = "Unstable Curator",
["event"] = "SPELL_CAST_START",
["npcID"] = 187154,
},
[111670] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "Scarlet Zealot",
["encounterID"] = 1425,
["event"] = "SPELL_CAST_START",
["npcID"] = 58590,
},
[414184] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[387083] = {
["source"] = "Time-Lost Briarback",
["event"] = "SPELL_CAST_START",
["npcID"] = 187264,
},
[267824] = {
["source"] = "Soul Essence",
["event"] = "SPELL_CAST_START",
["npcID"] = 135240,
},
[226347] = {
["source"] = "Stoneclaw Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 91332,
},
[397809] = {
["source"] = "Glakis, Winter's Wrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 199502,
},
[177731] = {
["encounterName"] = "Witherbark",
["source"] = "Enchanted Waters",
["encounterID"] = 1746,
["event"] = "SPELL_CAST_START",
["npcID"] = 88862,
},
[212786] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[194966] = {
["source"] = "Lord Etheldrin Ravencrest",
["event"] = "SPELL_CAST_START",
["npcID"] = 98521,
},
[395763] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Cauldron Keeper",
["npcID"] = 186606,
},
[420347] = {
["source"] = "Kaldorei Archdruid",
["event"] = "SPELL_CAST_START",
["npcID"] = 211066,
},
[372223] = {
["source"] = "Qalashi Bonetender",
["event"] = "SPELL_CAST_START",
["npcID"] = 189265,
},
[119347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Vanguard",
["npcID"] = 61434,
},
[377341] = {
["source"] = "Aqua Rager",
["event"] = "SPELL_CAST_START",
["npcID"] = 190407,
},
[384014] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["encounterID"] = 2615,
["event"] = "SPELL_CAST_START",
["npcID"] = 189719,
},
[373939] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Rotburst Totem",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 190381,
},
[407535] = {
["source"] = "Horde Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203861,
},
[264757] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[398324] = {
["isChanneled"] = true,
["source"] = "Winter's Aegis",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 200399,
},
[400883] = {
["source"] = "Zaqali Keeneye",
["event"] = "SPELL_CAST_START",
["npcID"] = 208660,
},
[193597] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[385531] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["encounterID"] = 2616,
["event"] = "SPELL_CAST_START",
["npcID"] = 189722,
},
[61353] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dagna Flintlock",
["npcID"] = 96779,
},
[372226] = {
["source"] = "Qalashi Bonetender",
["event"] = "SPELL_CAST_START",
["npcID"] = 189265,
},
[387067] = {
["source"] = "Arcane Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 186740,
},
[381438] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tormented Steam",
["npcID"] = 188696,
},
[375327] = {
["source"] = "Subterranean Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 190404,
},
[421355] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Anvil",
["npcID"] = 206478,
},
[388635] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Volatile Spark",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 194999,
},
[369157] = {
["source"] = "Primal Tarasek",
["event"] = "SPELL_CAST_START",
["npcID"] = 188372,
},
[196157] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Shadowmoon Technician",
["npcID"] = 99645,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[415215] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Alliance Archer",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 206352,
},
[405492] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["npcID"] = 200913,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[83914] = {
["encounterName"] = "Ozumat",
["source"] = "Vicious Mindlasher",
["npcID"] = 44715,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[406516] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[427498] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83892,
},
[419343] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208445,
},
[420334] = {
["source"] = "Keeper Adranas",
["event"] = "SPELL_CAST_START",
["npcID"] = 209931,
},
[420846] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 206172,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[239401] = {
["encounterName"] = "Demonic Inquisition",
["source"] = "Belac",
["npcID"] = 116691,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2048,
},
[385024] = {
["source"] = "Salty Salamander",
["event"] = "SPELL_CAST_START",
["npcID"] = 188027,
},
[391849] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bound Flame",
["npcID"] = 186626,
},
[392733] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dewdrop Tortoise",
["npcID"] = 211145,
},
[191848] = {
["encounterName"] = "Serpentrix",
["source"] = "Serpentrix",
["npcID"] = 91808,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1813,
},
[372743] = {
["isChanneled"] = true,
["source"] = "Flashfrost Chillweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[274507] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilge Rat Swabby",
["npcID"] = 129526,
},
[404472] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[164965] = {
["source"] = "Everbloom Naturalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 81819,
},
[202075] = {
["isChanneled"] = true,
["source"] = "Burning Geode",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 101437,
},
[111801] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Risen Guard",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58822,
},
[369674] = {
["source"] = "Stonevault Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 184022,
},
[425455] = {
["event"] = "SPELL_CAST_START",
["source"] = "Surging Lasher",
["npcID"] = 210111,
},
[407544] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[428526] = {
["encounterName"] = "Ozumat",
["source"] = "Splotch",
["encounterID"] = 1047,
["event"] = "SPELL_CAST_START",
["npcID"] = 213806,
},
[369675] = {
["source"] = "Stonevault Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 184022,
},
[407200] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[200784] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[258338] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Raoul",
["npcID"] = 126847,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2094,
},
[117948] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Qiang the Merciless",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60709,
},
[372235] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rebel Mender",
["npcID"] = 195064,
},
[197696] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Illysanna Ravencrest",
["encounterID"] = 1833,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98696,
},
[257315] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Irontide Grenadier",
["npcID"] = 129758,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2096,
},
[369677] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Olaf",
["encounterID"] = 2555,
["event"] = "SPELL_CAST_START",
["npcID"] = 184580,
},
[147289] = {
["source"] = "Death Adder",
["event"] = "SPELL_CAST_START",
["npcID"] = 72841,
},
[425970] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verdant Boughwalker",
["npcID"] = 213576,
},
[111715] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Neophyte",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58823,
},
[377411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mature Slyvern",
["npcID"] = 192169,
},
[387614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ukhel Deathspeaker",
["npcID"] = 195851,
},
[87622] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["encounterID"] = 1042,
["event"] = "SPELL_CAST_START",
["npcID"] = 43875,
},
[428530] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["encounterID"] = 1047,
["event"] = "SPELL_CAST_START",
["npcID"] = 213770,
},
[200256] = {
["source"] = "Arcane Minion",
["event"] = "SPELL_CAST_START",
["npcID"] = 101549,
},
[426645] = {
["source"] = "Naz'jar Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 212673,
},
[200768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Razorbeak",
["npcID"] = 95766,
},
[114873] = {
["source"] = "Professor Slate",
["event"] = "SPELL_CAST_START",
["npcID"] = 59613,
},
[390150] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmeater",
["npcID"] = 186612,
},
[382474] = {
["source"] = "Decay Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186191,
},
[411644] = {
["source"] = "Time-Lost Tidehunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 205365,
},
[412156] = {
["source"] = "Time-Lost Aerobot",
["event"] = "SPELL_CAST_START",
["npcID"] = 205723,
},
[420856] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[427509] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83893,
},
[115652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloated Brew Alemental",
["npcID"] = 59518,
},
[412693] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Dreamcrusher",
["npcID"] = 211057,
},
[193093] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["npcID"] = 91797,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1812,
},
[396805] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorger",
["npcID"] = 192759,
},
[407552] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[379406] = {
["source"] = "Qalashi Lavabearer",
["event"] = "SPELL_CAST_START",
["npcID"] = 189472,
},
[408576] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[384524] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["encounterID"] = 2615,
["event"] = "SPELL_CAST_START",
["npcID"] = 189719,
},
[385036] = {
["source"] = "Primalist Galesinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 190373,
},
[114874] = {
["source"] = "Professor Slate",
["event"] = "SPELL_CAST_START",
["npcID"] = 59613,
},
[256551] = {
["encounterName"] = "Ring of Booty",
["source"] = "Sawtooth Shark",
["npcID"] = 129359,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2095,
},
[168040] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83893,
},
[272609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[387596] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Mystic",
["npcID"] = 195877,
},
[410625] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 201754,
},
[429108] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Cycle Warden",
["npcID"] = 209800,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[258672] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Crackshot",
["npcID"] = 126918,
},
[381602] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190484,
},
[89415] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Ghost Iron Dragonling",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 57783,
},
[386096] = {
["source"] = "Screechflight Witherer",
["event"] = "SPELL_CAST_START",
["npcID"] = 183954,
},
[408605] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devastator",
["npcID"] = 198869,
},
[385551] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["encounterID"] = 2616,
["event"] = "SPELL_CAST_START",
["npcID"] = 189722,
},
[386063] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["npcID"] = 186338,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[419327] = {
["source"] = "Timeline Marauder",
["event"] = "SPELL_CAST_START",
["npcID"] = 199748,
},
[372397] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snowhide Brute",
["npcID"] = 189653,
},
[421013] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[429051] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Erunak Stonespeaker",
["encounterID"] = 1046,
["event"] = "SPELL_CAST_START",
["npcID"] = 40825,
},
[409093] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[212031] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Bound Energy",
["npcID"] = 105705,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[385553] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Stormseeker Acolyte",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 194990,
},
[200261] = {
["source"] = "Soul-Torn Champion",
["event"] = "SPELL_CAST_START",
["npcID"] = 98243,
},
[204611] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[272457] = {
["encounterName"] = "Sporecaller Zancha",
["source"] = "Sporecaller Zancha",
["npcID"] = 131383,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2112,
},
[57984] = {
["source"] = "Greater Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 95061,
},
[415770] = {
["source"] = "Coalesced Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 206140,
},
[32637] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomwalker",
["npcID"] = 167749,
},
[391726] = {
["source"] = "Thunderhead",
["event"] = "SPELL_CAST_START",
["npcID"] = 197698,
},
[428542] = {
["source"] = "Naz'jar Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 40577,
},
[157348] = {
["source"] = "Primal Storm Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 77942,
},
[396814] = {
["source"] = "Rimebound Controller",
["event"] = "SPELL_CAST_START",
["npcID"] = 195836,
},
[387091] = {
["source"] = "Time-Lost Sunseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 187239,
},
[392239] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunhide Stomphoof",
["npcID"] = 190953,
},
[426519] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 206172,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[199567] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Image of Latosius",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 101028,
},
[401421] = {
["encounterName"] = "Chronikar",
["source"] = "Chronikar",
["encounterID"] = 2666,
["event"] = "SPELL_CAST_START",
["npcID"] = 198995,
},
[398494] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Shalewing",
["npcID"] = 207090,
},
[375834] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[75610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corla, Herald of Twilight",
["npcID"] = 39679,
},
[385046] = {
["source"] = "Gutstabber",
["event"] = "SPELL_CAST_START",
["npcID"] = 197857,
},
[385558] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190485,
},
[387629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Desecrated Ohuna",
["npcID"] = 195876,
},
[37624] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadlord Defiler",
["npcID"] = 41471,
},
[422961] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2709,
},
[416264] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[204885] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twinkle",
["npcID"] = 204964,
},
[409635] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[409612] = {
["source"] = "Whisper in the Dark",
["event"] = "SPELL_CAST_START",
["npcID"] = 203806,
},
[426500] = {
["source"] = "Gnarlroot",
["event"] = "SPELL_CAST_START",
["npcID"] = 81984,
},
[381512] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190485,
},
[260907] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[395284] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rugren",
["npcID"] = 201563,
},
[373279] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thing From Beyond",
["npcID"] = 189988,
},
[386722] = {
["source"] = "Stormbrand Ko'mal",
["event"] = "SPELL_CAST_START",
["npcID"] = 206684,
},
[378397] = {
["source"] = "Primal Earth Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 187322,
},
[377435] = {
["source"] = "Time-Lost Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 187265,
},
[135529] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thaumaturge Saresse",
["npcID"] = 67692,
},
[209477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mana Wyrm",
["npcID"] = 105703,
},
[378420] = {
["source"] = "Cracking Sediment",
["event"] = "SPELL_CAST_START",
["npcID"] = 212820,
},
[209033] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Guard",
["npcID"] = 104246,
},
[212564] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Tormenting Orb",
["npcID"] = 107114,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1850,
},
[405042] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["npcID"] = 200913,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[9734] = {
["source"] = "Scarlet Purifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 210969,
},
[421898] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[13860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadlord Defiler",
["npcID"] = 41471,
},
[264407] = {
["source"] = "Faceless Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 131821,
},
[370212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Shieldcracker",
["npcID"] = 186609,
},
[376865] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[191823] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[390194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uranto the Swift",
["npcID"] = 191103,
},
[209495] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Construct",
["npcID"] = 104270,
},
[272469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Abyssal Reach",
["npcID"] = 138538,
},
[387613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ukhel Corruptor",
["npcID"] = 195842,
},
[396313] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Stormcaller",
["npcID"] = 185147,
},
[396825] = {
["source"] = "Rimebound Controller",
["event"] = "SPELL_CAST_START",
["npcID"] = 195836,
},
[425995] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[165213] = {
["source"] = "Everbloom Cultivator",
["event"] = "SPELL_CAST_START",
["npcID"] = 81985,
},
[369703] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["encounterID"] = 2556,
["event"] = "SPELL_CAST_START",
["npcID"] = 184018,
},
[372262] = {
["source"] = "Qalashi Bonesplitter",
["event"] = "SPELL_CAST_START",
["npcID"] = 189467,
},
[106563] = {
["encounterName"] = "Yan-Zhu the Uncasked",
["source"] = "Yan-Zhu the Uncasked",
["encounterID"] = 1414,
["event"] = "SPELL_CAST_START",
["npcID"] = 59479,
},
[406678] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[396315] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Stormcaller",
["npcID"] = 185147,
},
[419344] = {
["source"] = "Crenna Earth-Daughter",
["event"] = "SPELL_CAST_START",
["npcID"] = 209072,
},
[391837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emerald Healer",
["npcID"] = 207048,
},
[369193] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Mender",
["npcID"] = 186602,
},
[396316] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Huntmaster",
["npcID"] = 185353,
},
[407701] = {
["isChanneled"] = true,
["source"] = "Pendule",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 204030,
},
[374823] = {
["source"] = "Squallbringer Cyraz",
["event"] = "SPELL_CAST_START",
["npcID"] = 190370,
},
[249919] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[420881] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Ashwarden",
["npcID"] = 208659,
},
[376892] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[389686] = {
["source"] = "Crystal Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 187160,
},
[411700] = {
["source"] = "Time-Lost Tidehunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 205365,
},
[372296] = {
["source"] = "Irontorch Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 189466,
},
[374339] = {
["source"] = "Refti Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 190340,
},
[428047] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verlann Timbercrush",
["npcID"] = 207554,
},
[377384] = {
["source"] = "Aqua Rager",
["event"] = "SPELL_CAST_START",
["npcID"] = 190407,
},
[422972] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valunei",
["npcID"] = 208709,
},
[388643] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[119358] = {
["encounterName"] = "Elegon",
["source"] = "Elegon",
["encounterID"] = 1500,
["event"] = "SPELL_CAST_START",
["npcID"] = 60410,
},
[369197] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Firebinder",
["npcID"] = 186599,
},
[373803] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Infused Whelp",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 189893,
},
[193633] = {
["source"] = "Risen Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 98275,
},
[255041] = {
["source"] = "Feasting Skyscreamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 128434,
},
[427585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Bristlebruin",
["npcID"] = 210507,
},
[22883] = {
["source"] = "Novice Timewalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 189583,
},
[377923] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bound Spark",
["npcID"] = 186624,
},
[385063] = {
["source"] = "Primalist Cinderweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 190207,
},
[385181] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["encounterID"] = 2616,
["event"] = "SPELL_CAST_START",
["npcID"] = 189722,
},
[422964] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
[425492] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[415769] = {
["source"] = "Coalesced Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 206140,
},
[395811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Soldier",
["npcID"] = 186607,
},
[377900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Scavenger",
["npcID"] = 191833,
},
[371875] = {
["source"] = "Qalashi Trainee",
["event"] = "SPELL_CAST_START",
["npcID"] = 189266,
},
[385065] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[428564] = {
["isChanneled"] = true,
["source"] = "Molten Scorpid",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210290,
},
[412700] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Dreamcrusher",
["npcID"] = 211057,
},
[370225] = {
["source"] = "Shrieking Whelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 187159,
},
[119365] = {
["source"] = "Sorcerer Mogu",
["event"] = "SPELL_CAST_START",
["npcID"] = 61250,
},
[385578] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[209485] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Manifestation",
["npcID"] = 105704,
},
[389274] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mudfin Shaman",
["npcID"] = 186679,
},
[428054] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 40586,
},
[116] = {
["npcID"] = 188027,
},
[428082] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[421402] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Pyremancer",
["npcID"] = 209963,
},
[415773] = {
["source"] = "Interval",
["event"] = "SPELL_CAST_START",
["npcID"] = 206065,
},
[135538] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thaumaturge Saresse",
["npcID"] = 67692,
},
[201298] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodtainted Burster",
["npcID"] = 100532,
},
[396355] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarasek Marauder",
["npcID"] = 184461,
},
[420490] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crustbreaker Conduit",
["npcID"] = 207038,
},
[395816] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Shieldcracker",
["npcID"] = 186609,
},
[371358] = {
["source"] = "Unstable Curator",
["event"] = "SPELL_CAST_START",
["npcID"] = 187154,
},
[115650] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sudsy Brew Alemental",
["npcID"] = 59522,
},
[420405] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Caller",
["npcID"] = 207041,
},
[391723] = {
["source"] = "Flamegullet",
["event"] = "SPELL_CAST_START",
["npcID"] = 197697,
},
[387657] = {
["source"] = "Earthborne Charger",
["event"] = "SPELL_CAST_START",
["npcID"] = 201471,
},
[410254] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Grommash Hellscream",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203678,
},
[106055] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56448,
},
[375348] = {
["source"] = "Gusting Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 190401,
},
[396330] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Sentry",
["npcID"] = 185357,
},
[394795] = {
["source"] = "Grizzlerock",
["event"] = "SPELL_CAST_START",
["npcID"] = 193652,
},
[204896] = {
["isChanneled"] = true,
["source"] = "Bloodscent Felhound",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98813,
},
[426524] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Fiery Treant",
["npcID"] = 208459,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[420895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
[115139] = {
["encounterName"] = "Thalnos the Soulrender",
["source"] = "Thalnos the Soulrender",
["encounterID"] = 1423,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59789,
},
[169840] = {
["source"] = "Infested Icecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 84989,
},
[197974] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Soul-torn Vanguard",
["npcID"] = 100485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1833,
},
[408614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devastator",
["npcID"] = 198869,
},
[135029] = {
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 78116,
},
[374839] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["event"] = "SPELL_CAST_START",
["npcID"] = 189478,
},
[111813] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Risen Guard",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58822,
},
[398380] = {
["source"] = "Seismodor, Earth's Wrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 199664,
},
[117960] = {
["encounterName"] = "Elegon",
["source"] = "Elegon",
["encounterID"] = 1500,
["event"] = "SPELL_CAST_START",
["npcID"] = 60410,
},
[372793] = {
["isChanneled"] = true,
["source"] = "Primal Avalanche",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188244,
},
[87761] = {
["source"] = "Executor of the Caliph",
["event"] = "SPELL_CAST_START",
["npcID"] = 45928,
},
[395855] = {
["source"] = "The Black Gulper",
["event"] = "SPELL_CAST_START",
["npcID"] = 195975,
},
[422023] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2820,
},
[372794] = {
["isChanneled"] = true,
["source"] = "Defier Draghar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 187897,
},
[370259] = {
["source"] = "Primal Earth Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 187322,
},
[227913] = {
["source"] = "Felspite Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 102788,
},
[200291] = {
["source"] = "Risen Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 98691,
},
[424581] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2786,
},
[412200] = {
["source"] = "Time-Lost Aerobot",
["event"] = "SPELL_CAST_START",
["npcID"] = 205723,
},
[400430] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[423459] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 209800,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2708,
},
[387125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Thunderbeast",
["npcID"] = 195696,
},
[377402] = {
["source"] = "Infuser Sariya",
["event"] = "SPELL_CAST_START",
["npcID"] = 190405,
},
[260666] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Gilded Priestess",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 132126,
},
[417928] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Flameclaw",
["npcID"] = 206805,
},
[407596] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[87762] = {
["source"] = "Minister of Air",
["event"] = "SPELL_CAST_START",
["npcID"] = 45930,
},
[408620] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Obsidian Guard",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 200836,
},
[15620] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilgewater Grenadier",
["npcID"] = 67460,
},
[387127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Thunderbeast",
["npcID"] = 195696,
},
[75992] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Tempest Witch",
["npcID"] = 40634,
},
[424997] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Fiery Treant",
["npcID"] = 208459,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2731,
},
[191325] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1838,
},
[429116] = {
["isChanneled"] = true,
["source"] = "Inquisitor Fairbell",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211930,
},
[188046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Denizen of the Dream",
["npcID"] = 198489,
},
[375870] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[78807] = {
["encounterName"] = "Ozruk",
["source"] = "Ozruk",
["encounterID"] = 1058,
["event"] = "SPELL_CAST_START",
["npcID"] = 42188,
},
[372800] = {
["event"] = "SPELL_CAST_START",
["source"] = "Expedition Guardian",
["npcID"] = 187125,
},
[381593] = {
["source"] = "Ebonstone Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 184300,
},
[375871] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[128708] = {
["source"] = "Bubbling Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59521,
},
[368287] = {
["source"] = "Bonebolt Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 185534,
},
[210261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Sentry",
["npcID"] = 104251,
},
[386107] = {
["source"] = "Screechflight Hexclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 183995,
},
[396854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brutal Motivator",
["npcID"] = 184453,
},
[207980] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baalgar the Watchful",
["npcID"] = 104274,
},
[397878] = {
["encounterName"] = "Wise Mari",
["source"] = "Corrupt Living Water",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56511,
},
[420907] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 206172,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[405043] = {
["source"] = "Primal Nightflame",
["event"] = "SPELL_CAST_START",
["npcID"] = 200931,
},
[417860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Umbraclaw",
["npcID"] = 211401,
},
[422443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sickened Growth",
["npcID"] = 207926,
},
[113479] = {
["source"] = "Master Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 59175,
},
[396856] = {
["source"] = "Firava the Rekindler",
["event"] = "SPELL_CAST_START",
["npcID"] = 195915,
},
[379033] = {
["source"] = "Edai",
["event"] = "SPELL_CAST_START",
["npcID"] = 192952,
},
[113629] = {
["source"] = "Boneweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 59193,
},
[265337] = {
["source"] = "Gorestained Piglet",
["event"] = "SPELL_CAST_START",
["npcID"] = 135048,
},
[385145] = {
["source"] = "Time-Lost Raptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 187256,
},
[164973] = {
["source"] = "Everbloom Naturalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 81819,
},
[261438] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131527,
},
[396346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oppressive Artificer",
["npcID"] = 184444,
},
[83926] = {
["encounterName"] = "Ozumat",
["source"] = "Vicious Mindlasher",
["npcID"] = 44715,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[387135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Arcblade",
["npcID"] = 194898,
},
[410249] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198998,
},
[390290] = {
["source"] = "Infuser Sariya",
["event"] = "SPELL_CAST_START",
["npcID"] = 190405,
},
[396859] = {
["source"] = "Earth Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 203742,
},
[125506] = {
["source"] = "Commander Lindon",
["event"] = "SPELL_CAST_START",
["npcID"] = 59191,
},
[426541] = {
["source"] = "Runic Disciple",
["event"] = "SPELL_CAST_START",
["npcID"] = 131685,
},
[76634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tainted Sentry",
["npcID"] = 40925,
},
[400954] = {
["source"] = "Volgoth The Flamebringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 209129,
},
[428077] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[375929] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[382102] = {
["source"] = "Grand Artificer Zeerak",
["event"] = "SPELL_CAST_START",
["npcID"] = 201553,
},
[396861] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Golem",
["npcID"] = 190779,
},
[417843] = {
["source"] = "Listless Nae'dra",
["event"] = "SPELL_CAST_START",
["npcID"] = 211164,
},
[261440] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131527,
},
[396350] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodbeak the Ravenous",
["npcID"] = 201535,
},
[391825] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Iceslinger",
["npcID"] = 203750,
},
[395857] = {
["source"] = "Qalashi Stonemender",
["event"] = "SPELL_CAST_START",
["npcID"] = 187600,
},
[412215] = {
["source"] = "Spurlok, Timesworn Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 205158,
},
[393811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maiden of Diligence",
["npcID"] = 192718,
},
[429615] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 206172,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[370764] = {
["source"] = "Crystal Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 187160,
},
[412806] = {
["source"] = "Risen Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 205804,
},
[396882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Air Elemental",
["npcID"] = 196155,
},
[198496] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["encounterID"] = 1791,
["event"] = "SPELL_CAST_START",
["npcID"] = 91004,
},
[374892] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tamed Magmammoth Calf",
["npcID"] = 197224,
},
[397888] = {
["source"] = "Fallen Waterspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 200126,
},
[398400] = {
["source"] = "Seismodor, Earth's Wrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 199664,
},
[395860] = {
["source"] = "The Red Gulper",
["event"] = "SPELL_CAST_START",
["npcID"] = 195974,
},
[370766] = {
["source"] = "Crystal Thrasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 187139,
},
[118106] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Subetai the Swift",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60710,
},
[373912] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 186121,
},
[169839] = {
["source"] = "Putrid Pyromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 84957,
},
[256106] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Skycap'n Kragg",
["npcID"] = 126832,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2093,
},
[82137] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rom'ogg Bonecrusher",
["npcID"] = 39665,
},
[422966] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nolaki",
["npcID"] = 208706,
},
[396430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Custodial Protector",
["npcID"] = 192694,
},
[396370] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ice Elemental",
["npcID"] = 203752,
},
[76508] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Mage",
["npcID"] = 39982,
},
[398403] = {
["source"] = "Furious Earth",
["event"] = "SPELL_CAST_START",
["npcID"] = 200431,
},
[255814] = {
["source"] = "Reanimated Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 127757,
},
[387145] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormcaller Boroo",
["npcID"] = 194317,
},
[381516] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190485,
},
[195172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Crusher",
["npcID"] = 91782,
},
[374365] = {
["encounterName"] = "Magmatusk",
["source"] = "Magmatusk",
["encounterID"] = 2610,
["event"] = "SPELL_CAST_START",
["npcID"] = 181861,
},
[404027] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[381517] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190485,
},
[423491] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raelas Firewind",
["npcID"] = 209152,
},
[169841] = {
["source"] = "Addled Arcanomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 84990,
},
[374865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravenous Rockfang",
["npcID"] = 185903,
},
[59638] = {
["source"] = "Mirror Image",
["event"] = "SPELL_CAST_START",
["npcID"] = 31216,
},
[194956] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["encounterID"] = 1832,
["event"] = "SPELL_CAST_START",
["npcID"] = 98542,
},
[371812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarasek Marauder",
["npcID"] = 184461,
},
[397383] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199703,
},
[381519] = {
["source"] = "Wrathion",
["event"] = "SPELL_CAST_START",
["npcID"] = 201412,
},
[396360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarasek Marauder",
["npcID"] = 184461,
},
[113999] = {
["encounterName"] = "Rattlegore",
["source"] = "Rattlegore",
["encounterID"] = 1428,
["event"] = "SPELL_CAST_START",
["npcID"] = 59153,
},
[117833] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Meng the Demented",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60708,
},
[38209] = {
["source"] = "Scarlet Purifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 210969,
},
[369750] = {
["source"] = "Qalashi Scaleripper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187602,
},
[408141] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201788,
},
[397892] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imacu'tya",
["npcID"] = 104275,
},
[397897] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Jazshariu",
["npcID"] = 104273,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[369751] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Djaradin",
["npcID"] = 195032,
},
[427579] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Bristlebruin",
["npcID"] = 210507,
},
[387151] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2583,
},
[421501] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["npcID"] = 208367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[236115] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Captain Yathae Moonstrike",
["npcID"] = 118374,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[372311] = {
["source"] = "Qalashi Trainee",
["event"] = "SPELL_CAST_START",
["npcID"] = 189266,
},
[395871] = {
["source"] = "Qalashi Stonemender",
["event"] = "SPELL_CAST_START",
["npcID"] = 187600,
},
[397899] = {
["source"] = "Sha-Touched Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 200131,
},
[241233] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rez the Tombwatcher",
["npcID"] = 121003,
},
[427581] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Bristlebruin",
["npcID"] = 210507,
},
[401482] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["event"] = "SPELL_CAST_START",
["npcID"] = 198998,
},
[409177] = {
["source"] = "Entropic Hatred",
["event"] = "SPELL_CAST_START",
["npcID"] = 203809,
},
[369754] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["encounterID"] = 2556,
["event"] = "SPELL_CAST_START",
["npcID"] = 184018,
},
[396877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Air Elemental",
["npcID"] = 196155,
},
[429176] = {
["source"] = "Gilgoblin Aquamage",
["event"] = "SPELL_CAST_START",
["npcID"] = 40943,
},
[381525] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190484,
},
[396366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rimetalon Spellflinger",
["npcID"] = 195756,
},
[411738] = {
["source"] = "Rashok",
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[385108] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rampaging Podling",
["npcID"] = 209630,
},
[375385] = {
["source"] = "Primalbound Water Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 190739,
},
[429119] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[384597] = {
["source"] = "Qalashi Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 193293,
},
[191595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Infester",
["npcID"] = 96587,
},
[398471] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nimbulatus, Storm's Wrath",
["npcID"] = 199667,
},
[253517] = {
["source"] = "Dazar'ai Confessor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122973,
},
[394833] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magmammoth Breaker",
["npcID"] = 194912,
},
[372828] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mudfin Shaman",
["npcID"] = 186679,
},
[412233] = {
["source"] = "Time-Lost Rocketeer",
["event"] = "SPELL_CAST_START",
["npcID"] = 205727,
},
[420933] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["encounterID"] = 2737,
["event"] = "SPELL_CAST_START",
["npcID"] = 208478,
},
[374364] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["encounterID"] = 2582,
["event"] = "SPELL_CAST_START",
["npcID"] = 186644,
},
[420476] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crustbreaker Conduit",
["npcID"] = 207038,
},
[420422] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[435263] = {
["source"] = "Infinite Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 217557,
},
[204646] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[386700] = {
["source"] = "Rimebound Froststalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 199795,
},
[211299] = {
["event"] = "SPELL_CAST_START",
["source"] = "Watchful Inquisitor",
["npcID"] = 105715,
},
[256589] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Raoul",
["npcID"] = 126847,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2094,
},
[400977] = {
["source"] = "Zaqali Firecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 200454,
},
[270481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Demonic Tyrant",
["npcID"] = 135002,
},
[397907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baalgar the Watchful",
["npcID"] = 104274,
},
[425030] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Juggernaut",
["npcID"] = 210172,
},
[382555] = {
["source"] = "Bracken Warscourge",
["event"] = "SPELL_CAST_START",
["npcID"] = 185529,
},
[192621] = {
["encounterName"] = "Ash'Golm",
["source"] = "Ash'Golm",
["npcID"] = 95886,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1816,
},
[409217] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Manaweaver",
["npcID"] = 198872,
},
[377950] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186125,
},
[256846] = {
["source"] = "Dinomancer Kish'o",
["event"] = "SPELL_CAST_START",
["npcID"] = 129553,
},
[279199] = {
["source"] = "Scarlet Siegemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 211937,
},
[381582] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brutal Motivator",
["npcID"] = 184453,
},
[255567] = {
["source"] = "T'lonja",
["event"] = "SPELL_CAST_START",
["npcID"] = 128455,
},
[257870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Buccaneer",
["npcID"] = 130011,
},
[428103] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Frost Witch",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 44404,
},
[389258] = {
["source"] = "Piskato",
["event"] = "SPELL_CAST_START",
["npcID"] = 195973,
},
[192135] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Shellbreaker",
["encounterID"] = 1810,
["event"] = "SPELL_CAST_START",
["npcID"] = 97264,
},
[407122] = {
["source"] = "Horde Warlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 203857,
},
[369811] = {
["source"] = "Hulking Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 184020,
},
[381535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bound Pebbles",
["npcID"] = 186628,
},
[265368] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[255824] = {
["source"] = "Dazar'ai Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 122971,
},
[204905] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Mogu'shan Secret-Keeper",
["npcID"] = 99676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[235638] = {
["event"] = "SPELL_CAST_START",
["source"] = "Treant Grovetender",
["npcID"] = 207616,
},
[425035] = {
["source"] = "Ancient Core Hound",
["event"] = "SPELL_CAST_START",
["npcID"] = 210288,
},
[265881] = {
["source"] = "Matron Alma",
["event"] = "SPELL_CAST_START",
["npcID"] = 135365,
},
[268440] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Crackshot",
["npcID"] = 126918,
},
[255577] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 122967,
},
[372369] = {
["source"] = "Hyena Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 192506,
},
[382561] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snowhide Shaman",
["npcID"] = 189654,
},
[374885] = {
["source"] = "Astral Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 189555,
},
[397914] = {
["source"] = "Depraved Mistweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 200137,
},
[425037] = {
["source"] = "Ancient Core Hound",
["event"] = "SPELL_CAST_START",
["npcID"] = 210288,
},
[256849] = {
["source"] = "Dinomancer Kish'o",
["event"] = "SPELL_CAST_START",
["npcID"] = 129553,
},
[372839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Harrier",
["npcID"] = 195758,
},
[373392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Hornsounder",
["npcID"] = 192796,
},
[265372] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[409174] = {
["source"] = "Incarnation of Entropy",
["event"] = "SPELL_CAST_START",
["npcID"] = 203811,
},
[376934] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["encounterID"] = 2568,
["event"] = "SPELL_CAST_START",
["npcID"] = 186120,
},
[20296] = {
["source"] = "Scarlet Technician",
["event"] = "SPELL_CAST_START",
["npcID"] = 211884,
},
[118094] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Subetai the Swift",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60710,
},
[403034] = {
["source"] = "Fyrakk",
["event"] = "SPELL_CAST_START",
["npcID"] = 200832,
},
[201837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Summoner",
["npcID"] = 99366,
},
[371306] = {
["source"] = "Arcane Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 186741,
},
[196208] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Shadowmoon Warlock",
["npcID"] = 99704,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[388706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Turbulent Gust",
["npcID"] = 186917,
},
[401500] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[426576] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dream Seedling",
["npcID"] = 211339,
},
[420947] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["npcID"] = 208363,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[386660] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["encounterID"] = 2582,
["event"] = "SPELL_CAST_START",
["npcID"] = 186644,
},
[421971] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[6358] = {
["source"] = "Betlissa",
["event"] = "SPELL_CAST_START",
["npcID"] = 1863,
},
[265376] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Headhunter",
["npcID"] = 133663,
},
[376426] = {
["source"] = "Summoned Ripple",
["event"] = "SPELL_CAST_START",
["npcID"] = 192463,
},
[226406] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[225635] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lunar Archer",
["npcID"] = 120721,
},
[412761] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[51963] = {
["source"] = "Ebon Gargoyle",
["event"] = "SPELL_CAST_START",
["npcID"] = 27829,
},
[201839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Summoner",
["npcID"] = 99366,
},
[397931] = {
["source"] = "Minion of Doubt",
["event"] = "SPELL_CAST_START",
["npcID"] = 57109,
},
[390245] = {
["source"] = "Embertooth Spearhunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 188725,
},
[375950] = {
["source"] = "Primalist Icecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 190377,
},
[33860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodhilt Battlemage",
["npcID"] = 68639,
},
[389270] = {
["source"] = "Expedition Guarantor",
["event"] = "SPELL_CAST_START",
["npcID"] = 187062,
},
[375924] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Baelog",
["encounterID"] = 2555,
["event"] = "SPELL_CAST_START",
["npcID"] = 184581,
},
[260697] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131825,
},
[413787] = {
["source"] = "Entropic Hatred",
["event"] = "SPELL_CAST_START",
["npcID"] = 203809,
},
[255591] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["encounterID"] = 2084,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 122967,
},
[371824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarasek Marauder",
["npcID"] = 184461,
},
[429652] = {
["source"] = "Shuja Grimaxe",
["event"] = "SPELL_CAST_START",
["npcID"] = 214390,
},
[414330] = {
["encounterName"] = "Iridikron",
["source"] = "Chromie",
["encounterID"] = 2669,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 204449,
},
[371313] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Manifestation",
["npcID"] = 186336,
},
[375919] = {
["source"] = "Primal Scythid",
["event"] = "SPELL_CAST_START",
["npcID"] = 191104,
},
[17290] = {
["source"] = "Mage Hunter Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 26727,
},
[383084] = {
["source"] = "Primalist Springfeeder",
["event"] = "SPELL_CAST_START",
["npcID"] = 192456,
},
[200050] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[273570] = {
["source"] = "Ringtail Bandicoon",
["event"] = "SPELL_CAST_START",
["npcID"] = 139166,
},
[384620] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["npcID"] = 186615,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2636,
},
[204666] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[265371] = {
["source"] = "Enthralled Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 131585,
},
[76133] = {
["encounterName"] = "Ozumat",
["source"] = "Neptulon",
["npcID"] = 40792,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[394869] = {
["source"] = "Boneshaper Jardak",
["event"] = "SPELL_CAST_START",
["npcID"] = 188693,
},
[374898] = {
["event"] = "SPELL_CAST_START",
["source"] = "Meadowhoof Musken",
["npcID"] = 190905,
},
[414303] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["encounterID"] = 2667,
["event"] = "SPELL_CAST_START",
["npcID"] = 198996,
},
[369781] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Eric \"The Swift\"",
["encounterID"] = 2555,
["event"] = "SPELL_CAST_START",
["npcID"] = 184582,
},
[388716] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[429663] = {
["source"] = "Shuja Grimaxe",
["event"] = "SPELL_CAST_START",
["npcID"] = 214390,
},
[373364] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gerenth the Vile",
["npcID"] = 107435,
},
[172673] = {
["source"] = "Calia Menethil",
["event"] = "SPELL_CAST_START",
["npcID"] = 214074,
},
[384623] = {
["source"] = "Qalashi Blacksmith",
["event"] = "SPELL_CAST_START",
["npcID"] = 189471,
},
[265377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Headhunter",
["npcID"] = 133663,
},
[386694] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormsurge Totem",
["npcID"] = 194897,
},
[377971] = {
["source"] = "Spawning Thresher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200038,
},
[236142] = {
["encounterName"] = "The Desolate Host",
["source"] = "Engine of Souls",
["npcID"] = 118460,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2054,
},
[118865] = {
["source"] = "Jade Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 62619,
},
[275110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodbeak the Ravenous",
["npcID"] = 201535,
},
[408677] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Scaleguard",
["npcID"] = 198871,
},
[411236] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[382578] = {
["source"] = "Earthen Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 184131,
},
[414307] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["encounterID"] = 2667,
["event"] = "SPELL_CAST_START",
["npcID"] = 198996,
},
[425054] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Portalkeeper",
["npcID"] = 211756,
},
[375439] = {
["encounterName"] = "Magmatusk",
["source"] = "Magmatusk",
["encounterID"] = 2610,
["event"] = "SPELL_CAST_START",
["npcID"] = 181861,
},
[372862] = {
["source"] = "Primal Splash",
["event"] = "SPELL_CAST_START",
["npcID"] = 185645,
},
[426596] = {
["source"] = "Coven Diviner",
["event"] = "SPELL_CAST_START",
["npcID"] = 131819,
},
[260696] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131823,
},
[421473] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 206172,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2708,
},
[387186] = {
["source"] = "Infinite Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 217557,
},
[412262] = {
["source"] = "Time-Lost Rocketeer",
["event"] = "SPELL_CAST_START",
["npcID"] = 205727,
},
[255579] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 122967,
},
[386675] = {
["source"] = "Novice Timewalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 189583,
},
[372858] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["encounterID"] = 2606,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189232,
},
[410225] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2677,
},
[423010] = {
["source"] = "Zealous Dryad",
["event"] = "SPELL_CAST_START",
["npcID"] = 210813,
},
[84451] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard Destroyer",
["npcID"] = 41470,
},
[385141] = {
["source"] = "Primalist Galesinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 190373,
},
[389251] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overgrown Lasher",
["npcID"] = 208626,
},
[398447] = {
["source"] = "Seismodor, Earth's Wrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 199664,
},
[423523] = {
["source"] = "Anguished Dream Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 210304,
},
[387189] = {
["source"] = "Srivantor",
["event"] = "SPELL_CAST_START",
["npcID"] = 201555,
},
[260703] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131823,
},
[260698] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[272046] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Sharkbait",
["npcID"] = 126841,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2093,
},
[411754] = {
["source"] = "Conduit Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 205478,
},
[265407] = {
["source"] = "Banquet Steward",
["event"] = "SPELL_CAST_START",
["npcID"] = 131586,
},
[369791] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Eric \"The Swift\"",
["encounterID"] = 2555,
["event"] = "SPELL_CAST_START",
["npcID"] = 184582,
},
[411763] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Infinite Keeper",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 205212,
},
[411755] = {
["source"] = "Conduit Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 205478,
},
[250208] = {
["source"] = "Enriched Rockshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 130776,
},
[260699] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[425573] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[372863] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189232,
},
[381570] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bound Stones",
["npcID"] = 186630,
},
[425062] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Steelshaper",
["npcID"] = 210173,
},
[403057] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[193152] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["npcID"] = 91797,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1812,
},
[394367] = {
["source"] = "Morchok",
["event"] = "SPELL_CAST_START",
["npcID"] = 187306,
},
[260700] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131823,
},
[169613] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 83846,
},
[110168] = {
["encounterName"] = "Echo of Baine",
["source"] = "The Black Brewmaiden",
["encounterID"] = 1881,
["event"] = "SPELL_CAST_START",
["npcID"] = 54336,
},
[410223] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[207979] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Jazshariu",
["npcID"] = 104273,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[114646] = {
["source"] = "Haunting Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 59555,
},
[393876] = {
["source"] = "Gragza the Dragon-Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 191507,
},
[377473] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["encounterID"] = 2611,
["event"] = "SPELL_CAST_START",
["npcID"] = 189901,
},
[260701] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131825,
},
[198024] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["encounterID"] = 1790,
["event"] = "SPELL_CAST_START",
["npcID"] = 91003,
},
[375384] = {
["source"] = "Primalist Earthshaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 190371,
},
[387708] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maiden of Diligence",
["npcID"] = 192718,
},
[407159] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 198997,
},
[423531] = {
["source"] = "Anguished Dream Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 210304,
},
[206459] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Avatar of Shadow",
["npcID"] = 104293,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[194942] = {
["encounterName"] = "Glazer",
["source"] = "Glazer",
["npcID"] = 95887,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1817,
},
[394362] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rasnar the War Ender",
["npcID"] = 193232,
},
[256864] = {
["source"] = "Dinomancer Kish'o",
["event"] = "SPELL_CAST_START",
["npcID"] = 129553,
},
[422518] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[192138] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Crestrider",
["npcID"] = 97269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[429674] = {
["source"] = "Shuja Grimaxe",
["event"] = "SPELL_CAST_START",
["npcID"] = 214390,
},
[382593] = {
["source"] = "Cruel Bonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 186206,
},
[428139] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[387711] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tyrhold Watcher",
["npcID"] = 192696,
},
[22121] = {
["event"] = "SPELL_CAST_START",
["source"] = "Timberstep Archer",
["npcID"] = 194041,
},
[197502] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Crestrider",
["encounterID"] = 1810,
["event"] = "SPELL_CAST_START",
["npcID"] = 97269,
},
[390760] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Grrlgllmesh",
["npcID"] = 186678,
},
[202108] = {
["source"] = "Blightshard Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 90998,
},
[369813] = {
["source"] = "Summoned Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 193288,
},
[204667] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[379023] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hillside Forager",
["npcID"] = 191240,
},
[209027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Guard",
["npcID"] = 111563,
},
[120149] = {
["source"] = "Mirror Image",
["event"] = "SPELL_CAST_START",
["npcID"] = 194853,
},
[407120] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Horde Axe Thrower",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203799,
},
[194682] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 98963,
},
[375937] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[157331] = {
["source"] = "Primal Storm Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 77942,
},
[115030] = {
["source"] = "Muck Brawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 192630,
},
[423529] = {
["source"] = "Anguished Dream Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 210304,
},
[87779] = {
["source"] = "Temple Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 45935,
},
[375945] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Argali",
["npcID"] = 191553,
},
[428130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verlann Timbercrush",
["npcID"] = 207554,
},
[409721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Winglord Dezran",
["npcID"] = 202610,
},
[387192] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Hammer",
["npcID"] = 209831,
},
[384134] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Warspear",
["npcID"] = 192791,
},
[401022] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[387205] = {
["source"] = "Tyrhold Gryphon",
["event"] = "SPELL_CAST_START",
["npcID"] = 198417,
},
[410234] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Anduin Lothar",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203679,
},
[369806] = {
["source"] = "Hulking Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 184020,
},
[390788] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Grrlgllmesh",
["npcID"] = 186678,
},
[415850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Roiling Deathstalker",
["npcID"] = 211242,
},
[393859] = {
["source"] = "Thaldraszian Hoverbug",
["event"] = "SPELL_CAST_START",
["npcID"] = 195380,
},
[369788] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Djaradin",
["npcID"] = 188296,
},
[384648] = {
["source"] = "Keeper Adranas",
["event"] = "SPELL_CAST_START",
["npcID"] = 209931,
},
[409724] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neltharion",
["npcID"] = 201668,
},
[410236] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Grommash Hellscream",
["encounterID"] = 2672,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 203678,
},
[377421] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amberfur Prowler",
["npcID"] = 187455,
},
[113364] = {
["encounterName"] = "Flameweaver Koegler",
["source"] = "Flameweaver Koegler",
["encounterID"] = 1420,
["event"] = "SPELL_CAST_START",
["npcID"] = 59150,
},
[115289] = {
["encounterName"] = "Thalnos the Soulrender",
["source"] = "Thalnos the Soulrender",
["encounterID"] = 1423,
["event"] = "SPELL_CAST_START",
["npcID"] = 59789,
},
[417868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Umbraclaw",
["npcID"] = 211401,
},
[429172] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Mindbender Ghur'sha",
["encounterID"] = 1046,
["event"] = "SPELL_CAST_START",
["npcID"] = 40788,
},
[388747] = {
["source"] = "Boggy Bullfrog",
["event"] = "SPELL_CAST_START",
["npcID"] = 193699,
},
[23337] = {
["source"] = "Stars' Rest Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 26448,
},
[402050] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[414844] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[427638] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nuoberon",
["npcID"] = 209113,
},
[264390] = {
["source"] = "Runic Disciple",
["event"] = "SPELL_CAST_START",
["npcID"] = 131685,
},
[393830] = {
["source"] = "Gragza the Dragon-Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 191507,
},
[253544] = {
["source"] = "Dazar'ai Confessor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122973,
},
[409216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Manaweaver",
["npcID"] = 198872,
},
[168082] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83892,
},
[377488] = {
["source"] = "Rune Seal Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187155,
},
[377486] = {
["source"] = "Infinite Agent",
["event"] = "SPELL_CAST_START",
["npcID"] = 184335,
},
[136098] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodhilt Lightsworn",
["npcID"] = 68640,
},
[201858] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Deadeye",
["npcID"] = 100539,
},
[373395] = {
["event"] = "SPELL_CAST_START",
["source"] = "Batak",
["npcID"] = 193462,
},
[241263] = {
["encounterName"] = "Harjatan",
["source"] = "Tidescale Witch",
["npcID"] = 121011,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2036,
},
[270022] = {
["source"] = "Silverback Thumpknuckle",
["event"] = "SPELL_CAST_START",
["npcID"] = 130543,
},
[388211] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shale Giant",
["npcID"] = 188122,
},
[418430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Empowered Imp",
["npcID"] = 208545,
},
[118105] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Subetai the Swift",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60710,
},
[136099] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodhilt Lightsworn",
["npcID"] = 68640,
},
[407125] = {
["source"] = "Alliance Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 208165,
},
[381585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brutal Motivator",
["npcID"] = 184453,
},
[407124] = {
["source"] = "Alliance Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 208165,
},
[200580] = {
["event"] = "SPELL_CAST_START",
["source"] = "Festerhide Grizzly",
["npcID"] = 95779,
},
[265880] = {
["source"] = "Matron Alma",
["event"] = "SPELL_CAST_START",
["npcID"] = 135365,
},
[194951] = {
["source"] = "Scarlet Siegemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 211937,
},
[407121] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Horde Warlock",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203857,
},
[410728] = {
["source"] = "Sabellian",
["event"] = "SPELL_CAST_START",
["npcID"] = 201411,
},
[265876] = {
["source"] = "Matron Alma",
["event"] = "SPELL_CAST_START",
["npcID"] = 135365,
},
[375446] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunhide Stomphoof",
["npcID"] = 190953,
},
[429180] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cycle Warden",
["npcID"] = 210518,
},
[375388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Iceslinger",
["npcID"] = 203750,
},
[403593] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magma Burster",
["npcID"] = 200801,
},
[387729] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trudging Devourer",
["npcID"] = 201066,
},
[369818] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Hulking Berserker",
["encounterID"] = 2555,
["event"] = "SPELL_CAST_START",
["npcID"] = 184020,
},
[397904] = {
["source"] = "Sha-Touched Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 200131,
},
[200551] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[383062] = {
["source"] = "Decayed Elder",
["event"] = "SPELL_CAST_START",
["npcID"] = 189531,
},
[382101] = {
["source"] = "Grand Artificer Zeerak",
["event"] = "SPELL_CAST_START",
["npcID"] = 201553,
},
[396879] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Air Elemental",
["npcID"] = 196155,
},
[420419] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Caller",
["npcID"] = 207041,
},
[418436] = {
["event"] = "SPELL_CAST_START",
["source"] = "Empowered Imp",
["npcID"] = 208545,
},
[410760] = {
["source"] = "Wild Vortex",
["event"] = "SPELL_CAST_START",
["npcID"] = 45912,
},
[252781] = {
["source"] = "Zanchuli Witch-Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122969,
},
[195944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skrog Wavecrasher",
["npcID"] = 91796,
},
[387732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Sentinel",
["npcID"] = 192700,
},
[396432] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Proto-Dragon",
["npcID"] = 189798,
},
[257899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Ravager",
["npcID"] = 130012,
},
[389268] = {
["source"] = "Expedition Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 187135,
},
[378454] = {
["event"] = "SPELL_CAST_START",
["source"] = "Worldbreaker Brute",
["npcID"] = 185589,
},
[397386] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199703,
},
[384663] = {
["source"] = "Forgewrought Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 194816,
},
[389269] = {
["source"] = "Expedition Guarantor",
["event"] = "SPELL_CAST_START",
["npcID"] = 187062,
},
[428674] = {
["encounterName"] = "Ozumat",
["source"] = "Neptulon",
["encounterID"] = 1047,
["event"] = "SPELL_CAST_START",
["npcID"] = 40792,
},
[369823] = {
["source"] = "Vicious Basilisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 184023,
},
[420925] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
[88170] = {
["source"] = "Turbulent Squall",
["event"] = "SPELL_CAST_START",
["npcID"] = 45924,
},
[377500] = {
["source"] = "Infinite Agent",
["event"] = "SPELL_CAST_START",
["npcID"] = 184335,
},
[378012] = {
["source"] = "Lavacaller Primalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 186823,
},
[179091] = {
["source"] = "Nar'thalas Magister",
["event"] = "SPELL_CAST_START",
["npcID"] = 88783,
},
[272592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[395924] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maeleera",
["npcID"] = 193677,
},
[398483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nimbulatus, Storm's Wrath",
["npcID"] = 199667,
},
[392854] = {
["source"] = "Primal Scythid Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 184853,
},
[200289] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[377502] = {
["source"] = "Time-Lost Murloc",
["event"] = "SPELL_CAST_START",
["npcID"] = 190584,
},
[95826] = {
["source"] = "Starfall Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 82506,
},
[382620] = {
["source"] = "Bonebolt Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 185534,
},
[389273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmeater",
["npcID"] = 186612,
},
[377503] = {
["source"] = "Rune Seal Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187155,
},
[377927] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Feather",
["npcID"] = 192690,
},
[372808] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 188252,
},
[422026] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[375457] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Juvenile Frost Proto-Dragon",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191222,
},
[369828] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Vicious Basilisk",
["encounterID"] = 2555,
["event"] = "SPELL_CAST_START",
["npcID"] = 184023,
},
[35913] = {
["source"] = "Fel-Blessed Highborne",
["event"] = "SPELL_CAST_START",
["npcID"] = 207147,
},
[422027] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Spirit of the Kaldorei",
["npcID"] = 207800,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[387740] = {
["source"] = "Tyrhold Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 192696,
},
[397881] = {
["source"] = "Corrupt Living Water",
["event"] = "SPELL_CAST_START",
["npcID"] = 56511,
},
[427657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nuoberon",
["npcID"] = 209113,
},
[261446] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["encounterID"] = 2116,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 131545,
},
[375459] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunder Lizard",
["npcID"] = 191827,
},
[265433] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodsworn Defiler",
["npcID"] = 133912,
},
[430218] = {
["source"] = "Inquisitor Fairbell",
["event"] = "SPELL_CAST_START",
["npcID"] = 211930,
},
[265352] = {
["source"] = "Blight Toad",
["event"] = "SPELL_CAST_START",
["npcID"] = 135052,
},
[406165] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[218755] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Festerhide Grizzly",
["npcID"] = 95779,
},
[257904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ludwig Von Tortollan",
["npcID"] = 129699,
},
[168092] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83892,
},
[264923] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[384161] = {
["source"] = "Qalashi Irontorch",
["event"] = "SPELL_CAST_START",
["npcID"] = 189464,
},
[402989] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[387232] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emerald Preserver",
["npcID"] = 209202,
},
[418449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Bear",
["npcID"] = 207050,
},
[387122] = {
["source"] = "Arcane Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 186740,
},
[375351] = {
["source"] = "Glacial Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 190403,
},
[81008] = {
["source"] = "Crystalspawn Giant",
["event"] = "SPELL_CAST_START",
["npcID"] = 42810,
},
[383651] = {
["source"] = "Qalashi Lavamancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 193944,
},
[395819] = {
["source"] = "Qalashi Scaleripper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187602,
},
[256882] = {
["source"] = "Monzumi",
["event"] = "SPELL_CAST_START",
["npcID"] = 129552,
},
[411798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oozing Sludge",
["npcID"] = 205644,
},
[381605] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190484,
},
[381521] = {
["source"] = "Summoned Downpour",
["event"] = "SPELL_CAST_START",
["npcID"] = 192462,
},
[267997] = {
["npcID"] = 135816,
},
[258162] = {
["source"] = "Lago the Drowned",
["event"] = "SPELL_CAST_START",
["npcID"] = 193025,
},
[377512] = {
["event"] = "SPELL_CAST_START",
["source"] = "Basalt Shell",
["npcID"] = 186622,
},
[410776] = {
["source"] = "Infinite Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 204658,
},
[195473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gritslime Snail",
["npcID"] = 91786,
},
[193682] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[421400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Spear",
["npcID"] = 209973,
},
[82800] = {
["source"] = "Fel Queen's Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 207152,
},
[253239] = {
["source"] = "Dazar'ai Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 122971,
},
[383143] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blightpaw the Depraved",
["npcID"] = 193128,
},
[420501] = {
["source"] = "Wildfire Primalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 209200,
},
[373932] = {
["encounterName"] = "Azureblade",
["source"] = "Draconic Image",
["npcID"] = 190187,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[417431] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[259187] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[419351] = {
["source"] = "Infinite Saboteur",
["event"] = "SPELL_CAST_START",
["npcID"] = 208438,
},
[398497] = {
["event"] = "SPELL_CAST_START",
["source"] = "Karokta",
["npcID"] = 203625,
},
[257908] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Officer",
["npcID"] = 127106,
},
[395427] = {
["source"] = "Overseer Lahar",
["event"] = "SPELL_CAST_START",
["npcID"] = 189235,
},
[264931] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[371887] = {
["isChanneled"] = true,
["source"] = "Enraged Shards",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[427668] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["encounterID"] = 1044,
["event"] = "SPELL_CAST_START",
["npcID"] = 40765,
},
[422039] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[257397] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Bonesaw",
["npcID"] = 129788,
},
[378029] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Gashtooth",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186124,
},
[385075] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["encounterID"] = 2584,
["event"] = "SPELL_CAST_START",
["npcID"] = 186738,
},
[424087] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Devastator",
["npcID"] = 207089,
},
[373424] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["encounterID"] = 2613,
["event"] = "SPELL_CAST_START",
["npcID"] = 189340,
},
[183633] = {
["source"] = "Rockbound Pelter",
["event"] = "SPELL_CAST_START",
["npcID"] = 91008,
},
[427670] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["encounterID"] = 1044,
["event"] = "SPELL_CAST_START",
["npcID"] = 40765,
},
[47731] = {
["encounterName"] = "Grand Magus Telestra",
["source"] = "Grand Magus Telestra",
["encounterID"] = 2010,
["event"] = "SPELL_CAST_START",
["npcID"] = 26929,
},
[193941] = {
["source"] = "Embershard Scorpion",
["event"] = "SPELL_CAST_START",
["npcID"] = 98406,
},
[398501] = {
["source"] = "Hunting Rock Viper",
["event"] = "SPELL_CAST_START",
["npcID"] = 203783,
},
[114658] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Instructor Chillheart",
["encounterID"] = 1426,
["event"] = "SPELL_CAST_START",
["npcID"] = 58633,
},
[403978] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[428695] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2786,
},
[116155] = {
["event"] = "SPELL_CAST_START",
["source"] = "Yeasty Brew Alemental",
["npcID"] = 66413,
},
[427672] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["encounterID"] = 1044,
["event"] = "SPELL_CAST_START",
["npcID"] = 40765,
},
[416256] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron's Creation",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 204918,
},
[200084] = {
["source"] = "Ghostly Retainer",
["event"] = "SPELL_CAST_START",
["npcID"] = 98366,
},
[421020] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["npcID"] = 208363,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[384686] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["npcID"] = 186615,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2636,
},
[405668] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drazos Blackwing",
["npcID"] = 205623,
},
[377522] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Raging Ember",
["encounterID"] = 2611,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 192464,
},
[425115] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fruitface",
["npcID"] = 209913,
},
[427510] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Dulhu",
["encounterID"] = 1757,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 83894,
},
[278755] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[408228] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Grommash Hellscream",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203678,
},
[253562] = {
["source"] = "Dazar'ai Augur",
["event"] = "SPELL_CAST_START",
["npcID"] = 122972,
},
[407205] = {
["source"] = "Alliance Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 208208,
},
[411811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bubbling Slime",
["npcID"] = 205651,
},
[371383] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snowhide Shaman",
["npcID"] = 189654,
},
[373942] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 186121,
},
[411300] = {
["source"] = "Time-Lost Waveshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 205363,
},
[417953] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galok Wingslicer",
["npcID"] = 206460,
},
[406183] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krono Sandtongue",
["npcID"] = 205622,
},
[421024] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["npcID"] = 208367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[76790] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Invader",
["npcID"] = 39616,
},
[403625] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[198715] = {
["event"] = "SPELL_CAST_START",
["source"] = "Val'kyr Battlemaiden",
["npcID"] = 100876,
},
[204344] = {
["source"] = "Blacktalon Assassin",
["event"] = "SPELL_CAST_START",
["npcID"] = 191955,
},
[423912] = {
["source"] = "The Stonewarmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 210235,
},
[385757] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mender Eskros",
["npcID"] = 195303,
},
[257402] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["npcID"] = 126983,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2096,
},
[198723] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotheart Dryad",
["npcID"] = 99358,
},
[186269] = {
["source"] = "Blightshard Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 90998,
},
[374969] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["event"] = "SPELL_CAST_START",
["npcID"] = 189478,
},
[423396] = {
["source"] = "Lethka",
["event"] = "SPELL_CAST_START",
["npcID"] = 208740,
},
[421343] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[396975] = {
["source"] = "Firava the Rekindler",
["event"] = "SPELL_CAST_START",
["npcID"] = 195915,
},
[377017] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["encounterID"] = 2611,
["event"] = "SPELL_CAST_START",
["npcID"] = 189901,
},
[57047] = {
["source"] = "Crazed Mana-Surge",
["event"] = "SPELL_CAST_START",
["npcID"] = 26737,
},
[369853] = {
["source"] = "Burly Rock-Thrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 184019,
},
[407069] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[195129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Crusher",
["npcID"] = 91782,
},
[387571] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["encounterID"] = 2618,
["event"] = "SPELL_CAST_START",
["npcID"] = 189729,
},
[421029] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["npcID"] = 208367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[386547] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["npcID"] = 186339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[426147] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 206172,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[191900] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["encounterID"] = 1810,
["event"] = "SPELL_CAST_START",
["npcID"] = 91784,
},
[384961] = {
["source"] = "Rotbow Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186208,
},
[378818] = {
["source"] = "Qalashi Thaumaturge",
["event"] = "SPELL_CAST_START",
["npcID"] = 192788,
},
[408551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystalline Walker",
["npcID"] = 201063,
},
[265540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fetid Maggot",
["npcID"] = 130909,
},
[317791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magus of the Dead",
["npcID"] = 163366,
},
[409261] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[75543] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Rom'ogg Bonecrusher",
["npcID"] = 39665,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1040,
},
[389947] = {
["source"] = "Warmonger Kharad",
["event"] = "SPELL_CAST_START",
["npcID"] = 190932,
},
[200345] = {
["isChanneled"] = true,
["source"] = "Risen Archer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98275,
},
[415403] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2677,
},
[427992] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[418474] = {
["event"] = "SPELL_CAST_START",
["source"] = "Empowered Felhunter",
["npcID"] = 208791,
},
[114022] = {
["source"] = "Scarlet Treasurer",
["event"] = "SPELL_CAST_START",
["npcID"] = 59241,
},
[79351] = {
["encounterName"] = "High Priestess Azil",
["source"] = "High Priestess Azil",
["encounterID"] = 1057,
["event"] = "SPELL_CAST_START",
["npcID"] = 42333,
},
[386028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Thunderbeast",
["npcID"] = 195696,
},
[400052] = {
["source"] = "Swooping Flayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 199809,
},
[394423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rohzor Forgesmash",
["npcID"] = 187598,
},
[9739] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moonalli",
["npcID"] = 82015,
},
[383165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blightpaw the Depraved",
["npcID"] = 193128,
},
[386024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Stormspeaker",
["npcID"] = 194894,
},
[194611] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Hunter",
["npcID"] = 98926,
},
[278044] = {
["source"] = "Enraged Velvet Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 210185,
},
[430247] = {
["source"] = "Hallowed Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 211933,
},
[257407] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["event"] = "SPELL_CAST_START",
["npcID"] = 122963,
},
[419798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Moon",
["npcID"] = 210686,
},
[235968] = {
["encounterName"] = "The Desolate Host",
["source"] = "Ghastly Bonewarden",
["npcID"] = 118728,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2054,
},
[387261] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[400055] = {
["source"] = "Scavenging Slicer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203384,
},
[435366] = {
["source"] = "Eratus, the Unwoven Paradox",
["event"] = "SPELL_CAST_START",
["npcID"] = 217190,
},
[417455] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[424646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flametouched Enforcer",
["npcID"] = 210150,
},
[193951] = {
["event"] = "SPELL_CAST_START",
["source"] = "Barbed Spiderling",
["npcID"] = 97677,
},
[387039] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Commander",
["npcID"] = 195761,
},
[391958] = {
["source"] = "Cloying Gale",
["event"] = "SPELL_CAST_START",
["npcID"] = 198126,
},
[407733] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[76026] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["npcID"] = 40765,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1044,
},
[401810] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[106546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloated Brew Alemental",
["npcID"] = 59518,
},
[395222] = {
["source"] = "Kain Firebrand",
["event"] = "SPELL_CAST_START",
["npcID"] = 193675,
},
[204852] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightmare Dweller",
["npcID"] = 101991,
},
[384194] = {
["source"] = "Primalist Cinderweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 190207,
},
[376829] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[401361] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elusive Deepstrider",
["npcID"] = 204833,
},
[398012] = {
["source"] = "Primalist Earthrazer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203739,
},
[373960] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 186121,
},
[419506] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[88308] = {
["encounterName"] = "Altairus",
["source"] = "Altairus",
["encounterID"] = 1041,
["event"] = "SPELL_CAST_START",
["npcID"] = 43873,
},
[188470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Noxious Seedling",
["npcID"] = 211410,
},
[241290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidescale Witch",
["npcID"] = 121011,
},
[421554] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elisande",
["npcID"] = 208668,
},
[241680] = {
["encounterName"] = "Harjatan",
["source"] = "Mistress Sassz'ine",
["npcID"] = 121184,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2036,
},
[426974] = {
["source"] = "Addled Arcanomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 84990,
},
[381721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Titan Defense Matrix",
["npcID"] = 193244,
},
[396991] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drakonid Breaker",
["npcID"] = 187240,
},
[392594] = {
["event"] = "SPELL_CAST_START",
["source"] = "Meatgrinder Sotok",
["npcID"] = 186777,
},
[388288] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Elemental",
["npcID"] = 190780,
},
[191527] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blade Dancer Illianna",
["npcID"] = 96657,
},
[386757] = {
["encounterName"] = "Khajin the Unyielding",
["source"] = "Khajin the Unyielding",
["encounterID"] = 2617,
["event"] = "SPELL_CAST_START",
["npcID"] = 189727,
},
[111722] = {
["source"] = "Scholomance Neophyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 58823,
},
[390979] = {
["event"] = "SPELL_CAST_START",
["source"] = "Titan Defense Matrix",
["npcID"] = 193244,
},
[195108] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Stormweaver",
["npcID"] = 91783,
},
[382802] = {
["source"] = "Vile Rothexer",
["event"] = "SPELL_CAST_START",
["npcID"] = 194241,
},
[387528] = {
["source"] = "Igneous Stonemauler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210043,
},
[412346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Corsair",
["npcID"] = 126928,
},
[205231] = {
["npcID"] = 103673,
},
[419511] = {
["source"] = "Chronaxie",
["event"] = "SPELL_CAST_START",
["npcID"] = 206070,
},
[204574] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[207261] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[374765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravine Vulture",
["npcID"] = 190943,
},
[392398] = {
["source"] = "Primal Thundercloud",
["event"] = "SPELL_CAST_START",
["npcID"] = 197509,
},
[183465] = {
["source"] = "Tarspitter Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 91001,
},
[400066] = {
["event"] = "SPELL_CAST_START",
["source"] = "Preying Dustmoth",
["npcID"] = 201068,
},
[381770] = {
["encounterName"] = "Treemouth",
["source"] = "Decaying Slime",
["encounterID"] = 2568,
["event"] = "SPELL_CAST_START",
["npcID"] = 192481,
},
[196515] = {
["event"] = "SPELL_CAST_START",
["source"] = "Binder Ashioi",
["npcID"] = 100250,
},
[258181] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Crusher",
["npcID"] = 130400,
},
[425392] = {
["source"] = "Flamewaker Infernoguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 210295,
},
[405433] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[378835] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blightpaw the Depraved",
["npcID"] = 193128,
},
[81530] = {
["source"] = "Stonecore Earthshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 43537,
},
[257756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilge Rat Buccaneer",
["npcID"] = 129527,
},
[75645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corla, Herald of Twilight",
["npcID"] = 39679,
},
[196516] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ritualist Lesha",
["npcID"] = 100248,
},
[422090] = {
["event"] = "SPELL_CAST_START",
["source"] = "Treant",
["npcID"] = 54983,
},
[406210] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thorak Greenscale",
["npcID"] = 205618,
},
[260741] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131825,
},
[423610] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2731,
},
[375237] = {
["source"] = "Arcane Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 190776,
},
[369365] = {
["source"] = "Earthen Warder",
["event"] = "SPELL_CAST_START",
["npcID"] = 184132,
},
[392394] = {
["source"] = "Flamegullet",
["event"] = "SPELL_CAST_START",
["npcID"] = 197697,
},
[395184] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Proto-Dragon",
["npcID"] = 185883,
},
[387277] = {
["source"] = "Primal Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 195917,
},
[421292] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[392395] = {
["source"] = "Thunderhead",
["event"] = "SPELL_CAST_START",
["npcID"] = 197698,
},
[13323] = {
["source"] = "Mage Hunter Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 26727,
},
[393419] = {
["event"] = "SPELL_CAST_START",
["source"] = "Penumbrus",
["npcID"] = 189289,
},
[406962] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Horde Axe Thrower",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203799,
},
[211477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Legion Hound",
["npcID"] = 104277,
},
[79868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alya",
["npcID"] = 82002,
},
[422078] = {
["source"] = "Emerald Wingguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 210278,
},
[135620] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadguard Cavalry",
["npcID"] = 67309,
},
[425149] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Juggernaut",
["npcID"] = 210172,
},
[427708] = {
["source"] = "Reefbreaker Moruud",
["event"] = "SPELL_CAST_START",
["npcID"] = 209898,
},
[418561] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Banehollow",
["npcID"] = 204243,
},
[257458] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["npcID"] = 126983,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2096,
},
[396492] = {
["source"] = "Piskato",
["event"] = "SPELL_CAST_START",
["npcID"] = 195973,
},
[377661] = {
["source"] = "Sparring Vorquin",
["event"] = "SPELL_CAST_START",
["npcID"] = 195048,
},
[256138] = {
["source"] = "Dazar'ai Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 127799,
},
[376257] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Tarasek Earthreaver",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191225,
},
[372151] = {
["source"] = "Gutchewer Bear",
["event"] = "SPELL_CAST_START",
["npcID"] = 186284,
},
[372441] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Umbraclaw",
["npcID"] = 211401,
},
[405415] = {
["source"] = "Lady Shaz'ra",
["event"] = "SPELL_CAST_START",
["npcID"] = 200885,
},
[377559] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["encounterID"] = 2568,
["event"] = "SPELL_CAST_START",
["npcID"] = 186120,
},
[81459] = {
["source"] = "Stonecore Earthshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 43537,
},
[421570] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[118049] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Subetai the Swift",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60710,
},
[76031] = {
["encounterName"] = "Beauty",
["source"] = "Beauty",
["npcID"] = 39700,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1037,
},
[265487] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodsworn Defiler",
["npcID"] = 133912,
},
[203685] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Mogu'shan Secret-Keeper",
["npcID"] = 99676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[61326] = {
["source"] = "Azure Scale-Binder",
["event"] = "SPELL_CAST_START",
["npcID"] = 26735,
},
[418202] = {
["source"] = "Infinite Riftmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 208698,
},
[388008] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2583,
},
[369072] = {
["event"] = "SPELL_CAST_START",
["source"] = "Plainswalker Mammoth",
["npcID"] = 187938,
},
[416152] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[111854] = {
["source"] = "Instructor Chillheart",
["event"] = "SPELL_CAST_START",
["npcID"] = 58633,
},
[111010] = {
["source"] = "Scarlet Zealot",
["event"] = "SPELL_CAST_START",
["npcID"] = 58590,
},
[413385] = {
["source"] = "Minister of Air",
["event"] = "SPELL_CAST_START",
["npcID"] = 45930,
},
[391380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormcaller Narkena",
["npcID"] = 201539,
},
[255373] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["event"] = "SPELL_CAST_START",
["npcID"] = 122963,
},
[388310] = {
["event"] = "SPELL_CAST_START",
["source"] = "Custodial Protector",
["npcID"] = 192694,
},
[377765] = {
["source"] = "Primalist Tempest",
["event"] = "SPELL_CAST_START",
["npcID"] = 190946,
},
[88186] = {
["source"] = "Empyrean Assassin",
["event"] = "SPELL_CAST_START",
["npcID"] = 45922,
},
[235927] = {
["encounterName"] = "The Desolate Host",
["source"] = "Reanimated Templar",
["npcID"] = 118715,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2054,
},
[412488] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crawling Goo",
["npcID"] = 205820,
},
[413387] = {
["source"] = "Executor of the Caliph",
["event"] = "SPELL_CAST_START",
["npcID"] = 45928,
},
[387427] = {
["source"] = "Arcane Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 190776,
},
[381659] = {
["source"] = "Augmented Flood",
["event"] = "SPELL_CAST_START",
["npcID"] = 192457,
},
[56775] = {
["source"] = "Azure Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 26722,
},
[415435] = {
["source"] = "Coalesced Moment",
["event"] = "SPELL_CAST_START",
["npcID"] = 206064,
},
[393430] = {
["isChanneled"] = true,
["source"] = "Forge-Keep Overseer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 192703,
},
[420236] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2786,
},
[265084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Blood Priest",
["npcID"] = 131492,
},
[415436] = {
["source"] = "Coalesced Moment",
["event"] = "SPELL_CAST_START",
["npcID"] = 206064,
},
[254959] = {
["source"] = "Dazar'ai Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 122984,
},
[102132] = {
["encounterName"] = "Echo of Baine",
["source"] = "Time-Twisted Breaker",
["encounterID"] = 1881,
["event"] = "SPELL_CAST_START",
["npcID"] = 54552,
},
[390361] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Stormslinger",
["npcID"] = 203746,
},
[415437] = {
["source"] = "Timestream Leech",
["event"] = "SPELL_CAST_START",
["npcID"] = 206066,
},
[393432] = {
["source"] = "Refti Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 190340,
},
[250258] = {
["encounterName"] = "Vol'kaal",
["source"] = "Vol'kaal",
["encounterID"] = 2085,
["event"] = "SPELL_CAST_START",
["npcID"] = 122965,
},
[405391] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[367521] = {
["source"] = "Bonebolt Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 185534,
},
[271174] = {
["source"] = "Pallid Gorger",
["event"] = "SPELL_CAST_START",
["npcID"] = 137830,
},
[381663] = {
["source"] = "Apex Blazewing",
["event"] = "SPELL_CAST_START",
["npcID"] = 193291,
},
[388316] = {
["source"] = "Grand Artificer Zeerak",
["event"] = "SPELL_CAST_START",
["npcID"] = 201553,
},
[386781] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2583,
},
[215204] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Vigilant Duskwatch",
["npcID"] = 104918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[128232] = {
["source"] = "Scarlet Evangelist",
["event"] = "SPELL_CAST_START",
["npcID"] = 58685,
},
[384223] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[369563] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Baelog",
["encounterID"] = 2555,
["event"] = "SPELL_CAST_START",
["npcID"] = 184581,
},
[424140] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2786,
},
[130791] = {
["source"] = "Garrosh'ar Grunt",
["event"] = "SPELL_CAST_START",
["npcID"] = 66398,
},
[423117] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["encounterID"] = 2737,
["event"] = "SPELL_CAST_START",
["npcID"] = 208478,
},
[392924] = {
["source"] = "High Channeler Ryvati",
["event"] = "SPELL_CAST_START",
["npcID"] = 197535,
},
[403671] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[422606] = {
["source"] = "Volgoth The Flamebringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 209129,
},
[406227] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[113136] = {
["encounterName"] = "Darkmaster Gandling",
["source"] = "Darkmaster Gandling",
["encounterID"] = 1430,
["event"] = "SPELL_CAST_START",
["npcID"] = 59080,
},
[167385] = {
["npcID"] = 109096,
},
[421754] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Moltenbinder",
["npcID"] = 206477,
},
[382179] = {
["event"] = "SPELL_CAST_START",
["source"] = "Senior Researcher Alydrus",
["npcID"] = 208734,
},
[196111] = {
["encounterName"] = "Serpentrix",
["source"] = "Seaspray Crab",
["npcID"] = 91793,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[387297] = {
["source"] = "Srivantor",
["event"] = "SPELL_CAST_START",
["npcID"] = 201555,
},
[391903] = {
["source"] = "Sendrax",
["event"] = "SPELL_CAST_START",
["npcID"] = 190171,
},
[423259] = {
["source"] = "Wildfire Blazekin",
["event"] = "SPELL_CAST_START",
["npcID"] = 210685,
},
[399225] = {
["isChanneled"] = true,
["source"] = "Glakis, Winter's Wrath",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 199502,
},
[411001] = {
["source"] = "Lurking Tempest",
["event"] = "SPELL_CAST_START",
["npcID"] = 45704,
},
[257426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Enforcer",
["npcID"] = 129602,
},
[241306] = {
["encounterName"] = "Harjatan",
["source"] = "Razorjaw Acolyte",
["npcID"] = 117154,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2036,
},
[88061] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Mistral",
["npcID"] = 45915,
},
[75907] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Honor Guard",
["npcID"] = 40633,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[56860] = {
["source"] = "Mage Hunter Initiate",
["event"] = "SPELL_CAST_START",
["npcID"] = 26728,
},
[200205] = {
["source"] = "Reaves",
["event"] = "SPELL_CAST_START",
["npcID"] = 101462,
},
[260551] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Soulbound Goliath",
["encounterID"] = 2114,
["event"] = "SPELL_CAST_START",
["npcID"] = 131667,
},
[372971] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Qalashi Blacksmith",
["encounterID"] = 2612,
["event"] = "SPELL_CAST_START",
["npcID"] = 189471,
},
[422611] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[369901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Feather",
["npcID"] = 186965,
},
[423734] = {
["source"] = "Doomfiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 210910,
},
[395489] = {
["event"] = "SPELL_CAST_START",
["source"] = "Karantun",
["npcID"] = 193647,
},
[185857] = {
["source"] = "Scarlet Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 210973,
},
[405361] = {
["source"] = "Lady Shaz'ra",
["event"] = "SPELL_CAST_START",
["npcID"] = 200885,
},
[382696] = {
["source"] = "Earthen Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 184131,
},
[199663] = {
["source"] = "Ghostly Councilor",
["event"] = "SPELL_CAST_START",
["npcID"] = 98370,
},
[414425] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[371584] = {
["source"] = "Bottled Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 192054,
},
[126955] = {
["source"] = "Mogu'shan Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 64061,
},
[198833] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Latosius",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[422614] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[199345] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1838,
},
[418658] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twinkle",
["npcID"] = 204964,
},
[418009] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Alliance Archer",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 206352,
},
[427252] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[259732] = {
["encounterName"] = "Sporecaller Zancha",
["source"] = "Sporecaller Zancha",
["npcID"] = 131383,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2112,
},
[434005] = {
["source"] = "Gilnean Alchemist",
["event"] = "SPELL_CAST_START",
["npcID"] = 213995,
},
[196787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel-Infused Fury",
["npcID"] = 99956,
},
[207278] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[413023] = {
["source"] = "Lerai, Timesworn Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 205152,
},
[371956] = {
["source"] = "Primal Terrasentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 188011,
},
[193717] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[423257] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Moon",
["npcID"] = 210686,
},
[427223] = {
["isChanneled"] = true,
["source"] = "Putrid Pyromancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 84957,
},
[387343] = {
["source"] = "Bouldron",
["event"] = "SPELL_CAST_START",
["npcID"] = 193644,
},
[422172] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[408811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Siegemaster",
["npcID"] = 198874,
},
[265511] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit Drain Totem",
["npcID"] = 135169,
},
[409313] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[401248] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["event"] = "SPELL_CAST_START",
["npcID"] = 198998,
},
[427858] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[88959] = {
["source"] = "Temple Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 45935,
},
[197105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Arcanist",
["npcID"] = 97171,
},
[258199] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Crusher",
["npcID"] = 130400,
},
[391915] = {
["source"] = "Cragsworn Stoneshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 195838,
},
[195254] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["encounterID"] = 1832,
["event"] = "SPELL_CAST_START",
["npcID"] = 98542,
},
[274213] = {
["encounterName"] = "Sporecaller Zancha",
["source"] = "Sporecaller Zancha",
["npcID"] = 131383,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2112,
},
[114291] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hopper",
["npcID"] = 59464,
},
[265002] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["npcID"] = 131863,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2115,
},
[427343] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[272167] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilescourge",
["npcID"] = 136404,
},
[217260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mudfin Shaman",
["npcID"] = 186679,
},
[369400] = {
["source"] = "Earthen Warder",
["event"] = "SPELL_CAST_START",
["npcID"] = 184132,
},
[408805] = {
["event"] = "SPELL_CAST_START",
["source"] = "Incorporeal Being",
["npcID"] = 204560,
},
[168666] = {
["encounterName"] = "Yalnu",
["source"] = "Lady Baihu",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 84358,
},
[393453] = {
["source"] = "Scalesmith Mita",
["event"] = "SPELL_CAST_START",
["npcID"] = 191010,
},
[381683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Warspear",
["npcID"] = 192791,
},
[401258] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199659,
},
[386801] = {
["source"] = "Zurgaz Corebreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 193680,
},
[426206] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[428765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tindral Sageswift",
["npcID"] = 209090,
},
[404713] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[382708] = {
["source"] = "Qalashi Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 193293,
},
[207815] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[224682] = {
["source"] = "Scarlet Houndsmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 211882,
},
[416996] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[200630] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mindshattered Screecher",
["npcID"] = 95769,
},
[373017] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189886,
},
[195046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Oracle",
["npcID"] = 95861,
},
[376683] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[399086] = {
["source"] = "Zaqali Firecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 200454,
},
[420671] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[372565] = {
["isChanneled"] = true,
["source"] = "Flashfrost Earthshaper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[418531] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[233426] = {
["encounterName"] = "Demonic Inquisition",
["source"] = "Atrigan",
["npcID"] = 116689,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2048,
},
[387317] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ruby Culler",
["npcID"] = 190093,
},
[375547] = {
["source"] = "Molten Eruption",
["event"] = "SPELL_CAST_START",
["npcID"] = 191286,
},
[201399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfire Imp",
["npcID"] = 100527,
},
[75272] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Rom'ogg Bonecrusher",
["npcID"] = 39665,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1040,
},
[193502] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glayvianna Soulrender",
["npcID"] = 98177,
},
[198073] = {
["encounterName"] = "Smashspite the Hateful",
["source"] = "Smashspite the Hateful",
["encounterID"] = 1834,
["event"] = "SPELL_CAST_START",
["npcID"] = 98949,
},
[387398] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crook",
["npcID"] = 194445,
},
[372557] = {
["source"] = "Scavenger Matriarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 192525,
},
[120946] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Amber-Weaver",
["npcID"] = 61929,
},
[192706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ritualist Lesha",
["npcID"] = 100248,
},
[265523] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodsworn Defiler",
["npcID"] = 133912,
},
[384761] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["npcID"] = 186615,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2636,
},
[407790] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[196027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Arcanist",
["npcID"] = 97171,
},
[369921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Firesquall",
["npcID"] = 195448,
},
[266036] = {
["source"] = "Thistle Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 135474,
},
[88194] = {
["source"] = "Young Storm Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 45919,
},
[260508] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Soulbound Goliath",
["encounterID"] = 2114,
["event"] = "SPELL_CAST_START",
["npcID"] = 131667,
},
[130414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rainiara the Kingslayer",
["npcID"] = 82260,
},
[411954] = {
["isChanneled"] = true,
["source"] = "Infinite Chronoweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205384,
},
[191678] = {
["event"] = "SPELL_CAST_START",
["source"] = "Viletongue Belcher",
["npcID"] = 96480,
},
[196028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Arcanist",
["npcID"] = 97171,
},
[394487] = {
["source"] = "Death's Shadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 190985,
},
[169929] = {
["encounterName"] = "Yalnu",
["source"] = "Flourishing Ancient",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 84400,
},
[428263] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 40586,
},
[418540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Banehollow",
["npcID"] = 204243,
},
[419052] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Future Self",
["npcID"] = 208959,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[272180] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grotesque Horror",
["npcID"] = 138187,
},
[414506] = {
["source"] = "Searing-Sun Crow",
["event"] = "SPELL_CAST_START",
["npcID"] = 210298,
},
[265016] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[414959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Runebear",
["npcID"] = 207101,
},
[425706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Astromancer's Guard",
["npcID"] = 208729,
},
[383231] = {
["source"] = "Qalashi Lavamancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 193944,
},
[264520] = {
["source"] = "Maddened Survivalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 131850,
},
[374020] = {
["source"] = "Containment Apparatus",
["event"] = "SPELL_CAST_START",
["npcID"] = 190342,
},
[405821] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[407796] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[426731] = {
["source"] = "Naz'jar Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 41096,
},
[196296] = {
["encounterName"] = "Serpentrix",
["source"] = "Stormwake Hydra",
["npcID"] = 91792,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[374533] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["event"] = "SPELL_CAST_START",
["npcID"] = 189478,
},
[17140] = {
["source"] = "Consecrator Hennas",
["event"] = "SPELL_CAST_START",
["npcID"] = 211231,
},
[265019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[374045] = {
["source"] = "Containment Apparatus",
["event"] = "SPELL_CAST_START",
["npcID"] = 190342,
},
[392957] = {
["source"] = "Mountain Herdstallion",
["event"] = "SPELL_CAST_START",
["npcID"] = 192640,
},
[264510] = {
["source"] = "Crazed Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 131849,
},
[400642] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198998,
},
[76682] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Element Warden",
["npcID"] = 40017,
},
[421616] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["encounterID"] = 2737,
["event"] = "SPELL_CAST_START",
["npcID"] = 208478,
},
[235692] = {
["source"] = "Lord Darius Crowley",
["event"] = "SPELL_CAST_START",
["npcID"] = 213057,
},
[231854] = {
["encounterName"] = "Harjatan",
["source"] = "Harjatan",
["npcID"] = 116407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2036,
},
[410870] = {
["source"] = "Wild Vortex",
["event"] = "SPELL_CAST_START",
["npcID"] = 45912,
},
[114683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodhilt Battlemage",
["npcID"] = 68639,
},
},
["performance_units"] = {
[176920] = true,
[214441] = true,
[211306] = true,
[196642] = true,
[167999] = true,
[189707] = true,
},
["InterruptableSpells"] = {
[253562] = true,
[271174] = true,
[256849] = true,
[168092] = true,
[426783] = true,
[164965] = true,
[417481] = true,
[169839] = true,
[266225] = true,
[47528] = true,
[411958] = true,
[255041] = true,
[169840] = true,
[266036] = true,
[426596] = true,
[415770] = true,
[225562] = true,
[147362] = true,
[57994] = true,
[404754] = true,
[420090] = true,
[411994] = true,
[204243] = true,
[417011] = true,
[31935] = true,
[76813] = true,
[253583] = true,
[264390] = true,
[427459] = true,
[412378] = true,
[260696] = true,
[413427] = true,
[168082] = true,
[426731] = true,
[260697] = true,
[200642] = true,
[97547] = true,
[347008] = true,
[255824] = true,
[267824] = true,
[32747] = true,
[260698] = true,
[420320] = true,
[413607] = true,
[227913] = true,
[426541] = true,
[412922] = true,
[260699] = true,
[259572] = true,
[164973] = true,
[265876] = true,
[426768] = true,
[416256] = true,
[200248] = true,
[264050] = true,
[260700] = true,
[183752] = true,
[428103] = true,
[415435] = true,
[196883] = true,
[96231] = true,
[93985] = true,
[428263] = true,
[200630] = true,
[165213] = true,
[400165] = true,
[415437] = true,
[201837] = true,
[418200] = true,
[252923] = true,
[220543] = true,
[263959] = true,
[264024] = true,
[201298] = true,
[168040] = true,
[268278] = true,
[252781] = true,
[418202] = true,
[260701] = true,
[407124] = true,
[1766] = true,
[408805] = true,
[265368] = true,
[201839] = true,
[253544] = true,
[417030] = true,
[351338] = true,
[429176] = true,
[201411] = true,
[116705] = true,
[412233] = true,
[199663] = true,
[19647] = true,
[2139] = true,
[253517] = true,
[164887] = true,
[169841] = true,
[417018] = true,
[428526] = true,
[278444] = true,
[6552] = true,
[429812] = true,
},
["profiles"] = {
["Default"] = {
["target_shady_combat_only"] = false,
["aura_breakline_space"] = 2,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 632,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Name"] = "Aura - Buff Alert [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Add the buff name in the trigger box.",
["SpellIds"] = {
398151,
377738,
378149,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 533,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["Icon"] = 2175503,
["Name"] = "Explosion Affix M+ [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
389446,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 368,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Author"] = "Tercioo-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Name"] = "Aura - Debuff Alert [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Add the debuff name in the trigger box.",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 1213,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Name"] = "Cast - Alert + Timer [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 694,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Name"] = "Cast - Ultra Important [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 662,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Name"] = "Cast - Small Alert [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["SpellIds"] = {
376851,
396044,
381517,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
200658,
266036,
265407,
164965,
429176,
428526,
418200,
407124,
415437,
264050,
267824,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 375,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Key"] = "timeleftToBlink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Timeleft to Blink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "blinkSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Key"] = "blinkMaxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Key"] = "timeLeftWarning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Key"] = "timeLeftCritical",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Name"] = "Aura - Blink by Time Left [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 878,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetNameSize",
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameWidth",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Name"] = "Frame Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Name"] = "Cast - Important Target [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Highlight the target name",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1680910379,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["NpcNames"] = {
},
["url"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["Revision"] = 829,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["Name"] = "Cast - Very Important [Plater]",
["Prio"] = 99,
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
372735,
373017,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
413044,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
259572,
255371,
427460,
429172,
426500,
413607,
412922,
417481,
201399,
411994,
415770,
260907,
260703,
260741,
265876,
263959,
266225,
253517,
377488,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 63,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Name"] = "Auto Set Skull",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Auto set skull marker",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 206,
["Options"] = {
},
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Name"] = "Countdown",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1680910366,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["Revision"] = 621,
["semver"] = "",
["Enabled"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["Name"] = "Cast - Frontal Cone [Plater]",
["Prio"] = 99,
["SpellIds"] = {
375943,
385958,
388623,
377034,
374361,
381525,
386660,
385578,
384699,
153501,
153686,
154442,
192018,
219488,
372087,
391726,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
153395,
209495,
257426,
255952,
257870,
413147,
383107,
377559,
388060,
376170,
384524,
375351,
390111,
369791,
369573,
369563,
369335,
369061,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
382708,
375251,
375439,
372311,
373742,
372201,
374533,
377204,
201226,
204667,
198379,
200768,
253239,
250258,
255567,
194956,
427510,
426645,
412505,
412129,
419351,
401482,
404916,
200345,
200261,
198641,
265372,
271174,
264694,
264923,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["version"] = -1,
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "animSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 269,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Icon"] = 1029718,
["Name"] = "Fixate [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Show above the nameplate who is the player fixated",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 1194,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Name"] = "Cast - Big Alert [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
377950,
372223,
384194,
392451,
392924,
397889,
209413,
207980,
257397,
257736,
382787,
374699,
377402,
369602,
369465,
369400,
381593,
265091,
265433,
382791,
376780,
225573,
278444,
164887,
168082,
76813,
227913,
265368,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1675433496,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["NpcNames"] = {
"174773",
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 190,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["Icon"] = 135945,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Name"] = "M+ Spiteful",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 233,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Key"] = "fontSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.803921568627451,
0.803921568627451,
0.803921568627451,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Icon"] = 136048,
["Name"] = "Unit - Show Energy [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Show the energy amount above the nameplate.",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604087921,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 266,
["Options"] = {
},
["Author"] = "Tecno-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Icon"] = 841383,
["Name"] = "Fixate On You [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1669327146,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 65,
["Options"] = {
},
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = 610472,
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 33,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Name"] = "Fixate by Unit Buff [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["SpellIds"] = {
426662,
426663,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 547,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Name"] = "Cast - Glowing [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Show a different animation for the cast bar.",
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
384353,
265376,
193941,
411002,
169445,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 37,
["Options"] = {
},
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = 134229,
["Name"] = "Cast - Effect After Cast [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["SpellIds"] = {
191284,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["NpcNames"] = {
"197697",
"59544",
"186227",
"184020",
"91005",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["npcColor"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1680910341,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
131009,
127315,
133361,
136330,
214117,
212483,
101008,
194745,
190426,
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Enabled"] = true,
["Revision"] = 573,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["Name"] = "Add - Important [P]",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["version"] = -1,
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameplateSizeOffset",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullAlpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Key"] = "skullScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["Enabled"] = false,
["Revision"] = 161,
["Options"] = {
},
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Name"] = "Add - Tag Number [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 887,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Name"] = "Cast - Quick Flash [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Play a very fast flash when the cast start",
["SpellIds"] = {
392640,
397888,
209033,
385029,
374563,
377341,
369675,
369365,
369411,
278961,
202108,
88186,
200630,
255824,
252781,
250096,
200248,
197797,
264520,
418202,
201839,
412012,
411958,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
186696,
101075,
100818,
98081,
52019,
},
["Enabled"] = true,
["Revision"] = 162,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Name"] = "Add - Warning [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Change the color of  add",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 18,
["Options"] = {
},
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = 236209,
["Name"] = "Aura While Casting [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["SpellIds"] = {
372743,
372749,
384933,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["Enabled"] = true,
["Revision"] = 111,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Scale",
},
},
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["Icon"] = "interface/addons/plater/media/duck_64",
["Name"] = "Add - Non Elite Trash [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 101,
["Options"] = {
},
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Name"] = "Cast - Shield Interrupt [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["SpellIds"] = {
373688,
391050,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 162,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "rotationDuration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animStartDuration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Start Alpha",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureScale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureAlpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Name"] = "Cast - Circle AoE [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
257784,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
256882,
172578,
412063,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 506,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Name"] = "Cast - Stop Casting [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Just stop casting",
["SpellIds"] = {
377004,
381516,
196543,
199726,
200291,
268202,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
135052,
},
["Enabled"] = true,
["Revision"] = 106,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["Icon"] = "interface/addons/plater/media/radio_64",
["Name"] = "Add - Explode on Die [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["UID"] = "0x63dd148012eb3a2",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["Time"] = 1683674519,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["NpcNames"] = {
"5913",
"53006",
"10467",
"97369",
"100943",
"78001",
"104818",
"97285",
"166523",
"55659",
"143622",
"3527",
"2630",
"6112",
"60561",
"199916",
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["Revision"] = 756,
["Options"] = {
{
["Type"] = 4,
["Key"] = "ShowTargeted",
["Value"] = true,
["Name"] = "Show if Targeted",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if you have the unit targeted",
},
{
["Type"] = 4,
["Key"] = "ShowRaidMarked",
["Value"] = true,
["Name"] = "Show if Raid Marked",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if it has a raid mark applied",
},
},
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Author"] = "Evolutious",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Hide's nameplates based on the unit's name or npcID. Add the Unit Name or npcID as a trigger.",
["Icon"] = 644389,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Enabled"] = true,
["Name"] = "Hide Nameplate by UnitID",
["Prio"] = 99,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = true,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
388886,
209676,
377912,
},
["PlaterCore"] = 1,
["Name"] = "Cast - On Going Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Show()\nend\n\n\n",
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Time"] = 1701163879,
["Temp_Initialization"] = "function (scriptTable)\nend",
["url"] = "https://wago.io/03uVqaHJI/1",
["Icon"] = 644389,
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Show()\nend\n\n\n",
["Revision"] = 106,
["semver"] = "1.0.0",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["Desc"] = "Hide Morchie nameplate during intermission.",
["Author"] = "Briarbreed-Area 52",
["Initialization"] = "function (scriptTable)\nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["SpellIds"] = {
404365,
},
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Name"] = "Hide Morchie",
["Options"] = {
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if not envTable.validUnit then return end\n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    -- restore size/alpha\n    Plater.SetNameplateSize (unitFrame, envTable.defaultWidth, envTable.defaultHeight)\n    Plater.SetCastBarSize (unitFrame, envTable.defaultWidth, envTable.defaultHeight)\n    \n    --restore color\n    if scriptTable.config.changeNameplateColor then\n        Plater.DenyColorChange(unitFrame, false)\n    end\n    \n    envTable.validUnit = nil\n    \nend",
["OptionsValues"] = {
["creatureTypes"] = {
{
"Shadowfiend",
"Abberation",
},
{
"Psyfiend",
"Abberation",
},
{
"Ebon Gargoyle",
"Undead",
},
},
["defaultWidth"] = 10,
["heightTable"] = {
},
["ignoreFriendly"] = false,
["defaultHeight"] = 10,
["npcColor"] = {
},
["nameplateColor"] = {
1,
0,
0.9647059440612793,
1,
},
["widthTable"] = {
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    -- avoid changing nameplates of units which don't exist, have the wrong creature type or whose name has been mimic'd by Hunter pets\n    if  not UnitExists(unitId) then\n        return\n    end\n    \n    if scriptTable.config.ignoreFriendly and UnitIsFriend(\"player\", unitId) then return end\n    \n    local t = scriptTable.config.creatureTypes[unitFrame.namePlateUnitName]\n    if  (t and t ~= UnitCreatureType(unitId)) then\n        return \n    end\n    \n    if IsActiveBattlefieldArena() then\n        for i=1,5 do \n            \n            if UnitExists(\"arenapet\"..i) and UnitIsUnit(\"arenapet\"..i, unitId) and select(2, UnitClass(\"arena\"..i)) == \"HUNTER\" then\n                return\n            end\n            \n            if scriptTable.config.ignoreFriendlyHunterPets then\n                if UnitExists(\"party\"..i) and UnitExists(\"partypet\"..i) and UnitIsUnit(\"partypet\"..i, unitId) and select(2, UnitClass(\"party\"..i)) == \"HUNTER\" then\n                    return\n                end\n            end\n        end\n    end\n    \n    envTable.validUnit = true\n    \n    -- get the width/height data\n    envTable.defaultWidth, envTable.defaultHeight =  scriptTable.GetDefaultSize(unitId)\n    \n    \n    local tag = scriptTable.config.widthTable[npcId] and npcId or npcName\n    local widthOffsetValue = scriptTable.config.widthTable[unitFrame.namePlateUnitName] and tonumber(scriptTable.config.widthTable[unitFrame.namePlateUnitName]) or scriptTable.config.defaultWidth\n    local heightOffsetValue = scriptTable.config.heightTable[unitFrame.namePlateUnitName] and tonumber(scriptTable.config.heightTable[unitFrame.namePlateUnitName]) or scriptTable.config.defaultHeight\n    \n    local width = envTable.defaultWidth + widthOffsetValue\n    local height = envTable.defaultHeight + heightOffsetValue\n    \n    -- set size\n    Plater.SetNameplateSize (unitFrame, width, height)\n    Plater.SetCastBarSize (unitFrame, width, height)\n    \n    local color = scriptTable.config.npcColor[unitFrame.namePlateUnitName]\n    \n    Plater.SetNameplateColor(unitFrame, Plater.GetColorByPriority(unitFrame, color,  scriptTable.config.changeNameplateColor and scriptTable.config.nameplateColor or nil))\n    Plater.DenyColorChange(unitFrame, true)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    scriptTable.GetDefaultSize = function(unitId)\n        local unitIsPlayer = UnitIsPlayer(unitId)\n        local unitIsFriendly = UnitIsFriend(\"player\", unitId)\n        if unitIsPlayer and unitIsFriendly then\n            return Plater.db.profile.plate_config.friendlyplayer.health_incombat [1], Plater.db.profile.plate_config.friendlyplayer.health_incombat [2]\n        elseif unitIsPlayer and not unitIsFriendly then\n            return Plater.db.profile.plate_config.enemyplayer.health_incombat [1], Plater.db.profile.plate_config.enemyplayer.health_incombat [2]\n        elseif not unitIsPlayer and unitIsFriendly then\n            return Plater.db.profile.plate_config.friendlynpc.health_incombat [1], Plater.db.profile.plate_config.friendlynpc.health_incombat [2]\n        else\n            return Plater.db.profile.plate_config.enemynpc.health_incombat [1], Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n        end\n    end\nend",
["Time"] = 1701955835,
["NpcNames"] = {
"Shadowfiend",
"Psyfiend",
"Ebon Gargoyle",
"Cleansing Totem",
"Venomous Snake",
"Viper",
"Tremor Totem",
"Grounding Totem",
"Water Elemental",
"Incorporeal Being",
"Afflicted Soul",
},
["url"] = "https://wago.io/1d1rWcAmP/2",
["Icon"] = 135998,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the unit name in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set to true to change the default color of special units.",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set the preferred default color for special units.",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Increase the nameplate height by this value (unless overriden by the specific table)",
["Min"] = -100,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Nameplate Height Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "defaultHeight",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Increase the nameplate width by this value (unless overriden by the specific table)",
["Min"] = -100,
["Fraction"] = false,
["Value"] = 31,
["Name"] = "Nameplate Width Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "defaultWidth",
},
{
["Type"] = 7,
["Name"] = "NPC Type by Name or ID (Optional, used to keep Hunter pets from screwing things up)",
["Value"] = {
{
"Shadowfiend",
"Abberation",
},
{
"Psyfiend",
"Abberation",
},
{
"Ebon Gargoyle",
"Undead",
},
},
["Key"] = "creatureTypes",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the unit name, value is the creature type",
},
{
["Type"] = 7,
["Name"] = "NPC Color by Name (Choose a special color for the unit)",
["Value"] = {
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID/name, value is the color",
},
{
["Type"] = 7,
["Name"] = "NPC Nameplate Width by Name (Choose a special width for the units nameplate)",
["Value"] = {
},
["Key"] = "widthTable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID/name, value is the width",
},
{
["Type"] = 7,
["Name"] = "NPC Nameplate Height by Name (Choose a special height for the units nameplate)",
["Value"] = {
},
["Key"] = "heightTable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the name, value is the height",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly Hunter Pets",
["Value"] = true,
["Key"] = "ignoreFriendlyHunterPets",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "This option prevents Hunters in your group from griefing with pet naming.",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly Units",
["Value"] = false,
["Key"] = "ignoreFriendly",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignores friendly units",
},
},
["Enabled"] = true,
["Revision"] = 54,
["semver"] = "1.0.1",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    -- avoid changing nameplates of units which don't exist, have the wrong creature type or whose name has been mimic'd by Hunter pets\n    if  not UnitExists(unitId) then\n        return\n    end\n    \n    if scriptTable.config.ignoreFriendly and UnitIsFriend(\"player\", unitId) then return end\n    \n    local t = scriptTable.config.creatureTypes[unitFrame.namePlateUnitName]\n    if  (t and t ~= UnitCreatureType(unitId)) then\n        return \n    end\n    \n    if IsActiveBattlefieldArena() then\n        for i=1,5 do \n            \n            if UnitExists(\"arenapet\"..i) and UnitIsUnit(\"arenapet\"..i, unitId) and select(2, UnitClass(\"arena\"..i)) == \"HUNTER\" then\n                return\n            end\n            \n            if scriptTable.config.ignoreFriendlyHunterPets then\n                if UnitExists(\"party\"..i) and UnitExists(\"partypet\"..i) and UnitIsUnit(\"partypet\"..i, unitId) and select(2, UnitClass(\"party\"..i)) == \"HUNTER\" then\n                    return\n                end\n            end\n        end\n    end\n    \n    envTable.validUnit = true\n    \n    -- get the width/height data\n    envTable.defaultWidth, envTable.defaultHeight =  scriptTable.GetDefaultSize(unitId)\n    \n    \n    local tag = scriptTable.config.widthTable[npcId] and npcId or npcName\n    local widthOffsetValue = scriptTable.config.widthTable[unitFrame.namePlateUnitName] and tonumber(scriptTable.config.widthTable[unitFrame.namePlateUnitName]) or scriptTable.config.defaultWidth\n    local heightOffsetValue = scriptTable.config.heightTable[unitFrame.namePlateUnitName] and tonumber(scriptTable.config.heightTable[unitFrame.namePlateUnitName]) or scriptTable.config.defaultHeight\n    \n    local width = envTable.defaultWidth + widthOffsetValue\n    local height = envTable.defaultHeight + heightOffsetValue\n    \n    -- set size\n    Plater.SetNameplateSize (unitFrame, width, height)\n    Plater.SetCastBarSize (unitFrame, width, height)\n    \n    local color = scriptTable.config.npcColor[unitFrame.namePlateUnitName]\n    \n    Plater.SetNameplateColor(unitFrame, Plater.GetColorByPriority(unitFrame, color,  scriptTable.config.changeNameplateColor and scriptTable.config.nameplateColor or nil))\n    Plater.DenyColorChange(unitFrame, true)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Nameplate Remodelling",
["Author"] = "Konjunktur-Firemaw",
["Initialization"] = "function (scriptTable)\n    scriptTable.GetDefaultSize = function(unitId)\n        local unitIsPlayer = UnitIsPlayer(unitId)\n        local unitIsFriendly = UnitIsFriend(\"player\", unitId)\n        if unitIsPlayer and unitIsFriendly then\n            return Plater.db.profile.plate_config.friendlyplayer.health_incombat [1], Plater.db.profile.plate_config.friendlyplayer.health_incombat [2]\n        elseif unitIsPlayer and not unitIsFriendly then\n            return Plater.db.profile.plate_config.enemyplayer.health_incombat [1], Plater.db.profile.plate_config.enemyplayer.health_incombat [2]\n        elseif not unitIsPlayer and unitIsFriendly then\n            return Plater.db.profile.plate_config.friendlynpc.health_incombat [1], Plater.db.profile.plate_config.friendlynpc.health_incombat [2]\n        else\n            return Plater.db.profile.plate_config.enemynpc.health_incombat [1], Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n        end\n    end\nend",
["Desc"] = "Change the color and size of a nameplate of an important unit. Add the unit name into the trigger box to add more.",
["version"] = 2,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if not envTable.validUnit then return end\n    \n    -- get the width/height data\n    envTable.defaultWidth, envTable.defaultHeight =  scriptTable.GetDefaultSize(unitId)\n    \n    \n    local tag = scriptTable.config.widthTable[npcId] and npcId or npcName\n    local widthOffsetValue = scriptTable.config.widthTable[unitFrame.namePlateUnitName] and tonumber(scriptTable.config.widthTable[unitFrame.namePlateUnitName]) or scriptTable.config.defaultWidth\n    local heightOffsetValue = scriptTable.config.heightTable[unitFrame.namePlateUnitName] and tonumber(scriptTable.config.heightTable[unitFrame.namePlateUnitName]) or scriptTable.config.defaultHeight\n    \n    local width = envTable.defaultWidth + widthOffsetValue\n    local height = envTable.defaultHeight + heightOffsetValue\n    \n    -- set size\n    Plater.SetNameplateSize (unitFrame, width, height)\n    Plater.SetCastBarSize (unitFrame, width, height)\n    \n    local color = scriptTable.config.npcColor[unitFrame.namePlateUnitName]\n    \n    Plater.SetNameplateColor(unitFrame, Plater.GetColorByPriority(unitFrame, color,  scriptTable.config.changeNameplateColor and scriptTable.config.nameplateColor or nil))\n    Plater.DenyColorChange(unitFrame, true)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if not envTable.validUnit then return end\n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    -- restore size/alpha\n    Plater.SetNameplateSize (unitFrame, envTable.defaultWidth, envTable.defaultHeight)\n    Plater.SetCastBarSize (unitFrame, envTable.defaultWidth, envTable.defaultHeight)\n    \n    --restore color\n    if scriptTable.config.changeNameplateColor then\n        Plater.DenyColorChange(unitFrame, false)\n    end\n    \n    envTable.validUnit = nil\n    \nend",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if not envTable.validUnit then return end\n    \n    -- get the width/height data\n    envTable.defaultWidth, envTable.defaultHeight =  scriptTable.GetDefaultSize(unitId)\n    \n    \n    local tag = scriptTable.config.widthTable[npcId] and npcId or npcName\n    local widthOffsetValue = scriptTable.config.widthTable[unitFrame.namePlateUnitName] and tonumber(scriptTable.config.widthTable[unitFrame.namePlateUnitName]) or scriptTable.config.defaultWidth\n    local heightOffsetValue = scriptTable.config.heightTable[unitFrame.namePlateUnitName] and tonumber(scriptTable.config.heightTable[unitFrame.namePlateUnitName]) or scriptTable.config.defaultHeight\n    \n    local width = envTable.defaultWidth + widthOffsetValue\n    local height = envTable.defaultHeight + heightOffsetValue\n    \n    -- set size\n    Plater.SetNameplateSize (unitFrame, width, height)\n    Plater.SetCastBarSize (unitFrame, width, height)\n    \n    local color = scriptTable.config.npcColor[unitFrame.namePlateUnitName]\n    \n    Plater.SetNameplateColor(unitFrame, Plater.GetColorByPriority(unitFrame, color,  scriptTable.config.changeNameplateColor and scriptTable.config.nameplateColor or nil))\n    Plater.DenyColorChange(unitFrame, true)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
},
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "Interface/AddOns/Plater/Plater.lua:2204",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateShowEnemyMinus"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:14006: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:14004>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["NamePlateClassificationScale"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateShowFriendlyPets"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:14104: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:14102>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["nameplateTargetRadialPosition"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateMinAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4823: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4821: in function <Interface/AddOns/Plater/Plater.lua:4821>\n",
["nameplateResourceOnTarget"] = "Interface/AddOns/Plater/Plater.lua:2204",
["clampTargetNameplateToScreen"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateShowAll"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateShowFriendlyMinions"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:14088: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:14086>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["nameplateTargetBehindMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/SharedXML/CvarUtil.lua\"]:13: in function <Interface/SharedXML/CvarUtil.lua:9>\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:100: in function `SetCVar'\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:129: in function `CVarReset'\n[string \"@Interface/AddOns/ElvUI/Core/General/Install.lua\"]:171: in function `SetupCVars'\n[string \"@Interface/AddOns/ElvUI_GennUI/core/chat.lua\"]:113: in function `SetupChat'\n[string \"@Interface/AddOns/ElvUI_GennUI/init.lua\"]:66: in function <Interface/AddOns/ElvUI_GennUI/init.lua:66>\n",
["nameplateShowEnemies"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/SharedXML/CvarUtil.lua\"]:72: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:187: in function `SetValueInternal'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_Settings.lua\"]:229: in function `SetValue'\n[string \"ALLNAMEPLATES\"]:4: in function <[string \"ALLNAMEPLATES\"]:1>\n",
["NamePlateVerticalScale"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateSelectedAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4825: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4821: in function <Interface/AddOns/Plater/Plater.lua:4821>\n",
["nameplateMotionSpeed"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/SharedXML/CvarUtil.lua\"]:13: in function <Interface/SharedXML/CvarUtil.lua:9>\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:100: in function `SetCVar'\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:119: in function `CVarReset'\n[string \"@Interface/AddOns/ElvUI/Core/General/Install.lua\"]:171: in function `SetupCVars'\n[string \"@Interface/AddOns/ElvUI_GennUI/core/chat.lua\"]:113: in function `SetupChat'\n[string \"@Interface/AddOns/ElvUI_GennUI/init.lua\"]:66: in function <Interface/AddOns/ElvUI_GennUI/init.lua:66>\n",
["nameplateShowEnemyMinions"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateShowEnemyPets"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:13630",
["nameplateShowFriendlyNPCs"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:14056: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:14054>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateShowFriends"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/SharedXML/CvarUtil.lua\"]:72: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:187: in function `SetValueInternal'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_Settings.lua\"]:229: in function `SetValue'\n[string \"FRIENDNAMEPLATES\"]:3: in function <[string \"FRIENDNAMEPLATES\"]:1>\n",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:6940",
["nameplateMinScale"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateMinAlphaDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4824: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4821: in function <Interface/AddOns/Plater/Plater.lua:4821>\n",
["NamePlateHorizontalScale"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateShowEnemyTotems"] = "Interface/AddOns/Plater/Plater.lua:2204",
["nameplateShowFriendlyGuardians"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:14072: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:14070>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["nameplateOccludedAlphaMult"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/SharedXML/CvarUtil.lua\"]:13: in function <Interface/SharedXML/CvarUtil.lua:9>\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:100: in function `SetCVar'\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:120: in function `CVarReset'\n[string \"@Interface/AddOns/ElvUI/Core/General/Install.lua\"]:171: in function `SetupCVars'\n[string \"@Interface/AddOns/ElvUI_GennUI/core/chat.lua\"]:113: in function `SetupChat'\n[string \"@Interface/AddOns/ElvUI_GennUI/init.lua\"]:66: in function <Interface/AddOns/ElvUI_GennUI/init.lua:66>\n",
["nameplateLargeTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/SharedXML/CvarUtil.lua\"]:13: in function <Interface/SharedXML/CvarUtil.lua:9>\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:100: in function `SetCVar'\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:112: in function `CVarReset'\n[string \"@Interface/AddOns/ElvUI/Core/General/Install.lua\"]:171: in function `SetupCVars'\n[string \"@Interface/AddOns/ElvUI_GennUI/core/chat.lua\"]:113: in function `SetupChat'\n[string \"@Interface/AddOns/ElvUI_GennUI/init.lua\"]:66: in function <Interface/AddOns/ElvUI_GennUI/init.lua:66>\n",
["nameplateShowOnlyNames"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:6975: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:6973>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/slider.lua\"]:773: in function <Interface/AddOns/Plater/libs/DF/slider.lua:724>\n",
["nameplateShowEnemyGuardians"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:13582",
["nameplateLargerScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/SharedXML/CvarUtil.lua\"]:13: in function <Interface/SharedXML/CvarUtil.lua:9>\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:100: in function `SetCVar'\n[string \"@Interface/AddOns/ElvUI/Core/Modules/Nameplates/Nameplates.lua\"]:111: in function `CVarReset'\n[string \"@Interface/AddOns/ElvUI/Core/General/Install.lua\"]:171: in function `SetupCVars'\n[string \"@Interface/AddOns/ElvUI_GennUI/core/chat.lua\"]:113: in function `SetupChat'\n[string \"@Interface/AddOns/ElvUI_GennUI/init.lua\"]:66: in function <Interface/AddOns/ElvUI_GennUI/init.lua:66>\n",
},
["blizzard_nameplate_font_override_enabled"] = true,
["target_shady_enabled"] = false,
["aura2_y_offset"] = 10,
["extra_icon_caster_size"] = 8,
["buffs_on_aura2"] = true,
["indicator_quest"] = false,
["expansion_triggerwipe"] = {
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.8392156862745098,
0.08627450980392157,
0.08627450980392157,
1,
},
["hide_blizzard_castbar"] = true,
["extra_icon_cooldown_reverse"] = false,
["npc_cache"] = {
[40788] = {
"Mindbender Ghur'sha",
"Throne of the Tides",
"enUS",
},
[169421] = {
"Felguard",
"Brackenhide Hollow",
},
[188100] = {
"Cría estridente",
"La Bóveda Azur",
},
[190403] = {
"Protodragón glacial",
"Salas de Infusión",
},
[59467] = {
"Candlestick Mage",
"Scholomance",
"enUS",
},
[168398] = {
"Bocado limoso",
"Plaga Abrumadora",
},
[195265] = {
"Clamatormentas Arynga",
"El Ataque Nokhud",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
},
[99200] = {
"Dresaron",
"Darkheart Thicket",
"enUS",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[120182] = {
"Tormented Priestess",
"Tomb of Sargeras",
"enUS",
},
[189893] = {
"Infused Whelp",
"Ruby Life Pools",
},
[98177] = {
"Glayvianna Soulrender",
"Vault of the Wardens",
},
[190405] = {
"Infusora Sariya",
"Salas de Infusión",
},
[180426] = {
"Feeding Horror",
"Sanctum of Domination",
},
[164562] = {
"Maestra de canes depravada",
"Salones de Expiación",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[56717] = {
"Hoptallus",
"Stormstout Brewery",
"enUS",
},
[164563] = {
"Gargon sañoso",
"Salones de Expiación",
},
[205759] = {
"Whirling Torrent",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[91781] = {
"Hatecoil Warrior",
"Eye of Azshara",
},
[169425] = {
"Felhound",
"Brackenhide Hollow",
},
[196548] = {
"Rama antigua",
"Academia Algeth'ar",
},
[168658] = {
"Forsworn Devastator",
"Spires of Ascension",
},
[165076] = {
"Garrapata glotona",
"Profundidades Sanguíneas",
},
[169426] = {
"Infernal",
"Brackenhide Hollow",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
"enUS",
},
[180429] = {
"Astrovidente ornamentado",
"Tazavesh, el Mercado Velado",
},
[91782] = {
"Hatecoil Crusher",
"Eye of Azshara",
"enUS",
},
[200388] = {
"Malformed Sha",
"Temple of the Jade Serpent",
"enUS",
},
[167892] = {
"Tormented Soul",
"Halls of Atonement",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[201668] = {
"Neltharion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[62795] = {
"Sik'thik Warden",
"Siege of Niuzao Temple",
"enUS",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[180431] = {
"Ritualista concentrado",
"Tazavesh, el Mercado Velado",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
},
[91783] = {
"Hatecoil Stormweaver",
"Eye of Azshara",
},
[169429] = {
"Shivarra",
"Brackenhide Hollow",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[180432] = {
"Cómplice devoto",
"Tazavesh, el Mercado Velado",
},
[190923] = {
"Zephyrling",
"Halls of Infusion",
},
[213696] = {
"Molten Scorpid",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[26800] = {
"Alliance Berserker",
"The Nexus",
"enUS",
},
[169430] = {
"Ur'zul",
"Brackenhide Hollow",
},
[78734] = {
"Zipteq",
"Auchindoun",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[180433] = {
"Entidad desconocida",
"Tazavesh, el Mercado Velado",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[102019] = {
"Stormforged Obliterator",
"Halls of Valor",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[170199] = {
"Harnessed Specter",
"Castle Nathria",
},
[98693] = {
"Shackled Servitor",
"Maw of Souls",
},
[129526] = {
"Bilge Rat Swabby",
"Freehold",
"enUS",
},
[98949] = {
"Smashspite the Hateful",
"Black Rook Hold",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
"enUS",
},
[178388] = {
"Bazaar Strongarm",
"Tazavesh, the Veiled Market",
},
[152033] = {
"Inconspicuous Plant",
"Operation: Mechagon",
},
[131819] = {
"Adivina del aquelarre",
"Mansión Tarjasenda",
"enUS",
},
[67093] = {
"Sik'thik Battle-Mender",
"Siege of Niuzao Temple",
"enUS",
},
[197835] = {
"Kaurdyth",
"Vault of the Incarnates",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
},
[184018] = {
"Bromach",
"Uldaman: Legacy of Tyr",
"enUS",
},
[102404] = {
"Amo de Larvas Garrapétrea",
"Guarida de Neltharion",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[176598] = {
"Torment Golem",
"Torghast, Tower of the Damned",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[173016] = {
"Recolector de cadáveres",
"La Destrucción Necrótica",
},
[196045] = {
"Maligno de maná corrupto",
"Academia Algeth'ar",
},
[184019] = {
"Lanzarrocas fornido",
"Uldaman: Legado de Tyr",
"enUS",
},
[59982] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[101637] = {
"Aspirante Valarjar",
"Salones del Valor",
},
[120188] = {
"Wailing Soul",
"Tomb of Sargeras",
"enUS",
},
[91786] = {
"Gritslime Snail",
"Eye of Azshara",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
},
[102277] = {
"Deadeye Decoy",
"Darkheart Thicket",
"enUS",
},
[126969] = {
"Trothak",
"Freehold",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[113536] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[196559] = {
"Volatile Sapling",
"The Azure Vault",
},
[178392] = {
"Guardián de la puerta Zo'mazz",
"Tazavesh, el Mercado Velado",
},
[133870] = {
"Azotador enfermo",
"Bardoma",
},
[91787] = {
"Cove Seagull",
"Eye of Azshara",
},
[184022] = {
"Geomante grutacanto",
"Uldaman: Legado de Tyr",
},
[26737] = {
"Crazed Mana-Surge",
"The Nexus",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[113537] = {
"Dominador Cascarascuas",
"Guarida de Neltharion",
},
[26929] = {
"Grand Magus Telestra",
"The Nexus",
"enUS",
},
[101639] = {
"Doncella escudera Valarjar",
"Salones del Valor",
},
[81297] = {
"Dreadfang",
"Iron Docks",
},
[39705] = {
"Ascendant Lord Obsidius",
"Blackrock Caverns",
"enUS",
},
[178139] = {
"Rompevalvas salsombría",
"Tazavesh, el Mercado Velado",
},
[200912] = {
"Neldris",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[164578] = {
"Creación de Suturas",
"La Destrucción Necrótica",
},
[200913] = {
"Thadrion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
},
[177117] = {
"Orb of Torment",
"Sanctum of Domination",
},
[79507] = {
"Felguard",
"Auchindoun",
},
[178141] = {
"Vinculaescamas salsombría",
"Tazavesh, el Mercado Velado",
},
[137713] = {
"Big Money Crab",
"The MOTHERLODE!!",
},
[150251] = {
"Mecánico pistonero",
"Operación: Mecalópolis",
},
[98954] = {
"Felsworn Myrmidon",
"Vault of the Wardens",
"enUS",
},
[178142] = {
"Pescamante salsombría",
"Tazavesh, el Mercado Velado",
},
[137458] = {
"Rotting Spore",
"The Underrot",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
},
[91790] = {
"Mak'rana Siltwalker",
"Eye of Azshara",
},
[126845] = {
"Captain Jolly",
"Freehold",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[150253] = {
"Reptador armado",
"Operación: Mecalópolis",
},
[168932] = {
"Doomguard",
"Brackenhide Hollow",
},
[82579] = {
"Clarividente Grom'kar",
"Depósito Riel siniestro",
},
[129788] = {
"Sierraósea mareaférrea",
"Puerto Libre",
},
[190426] = {
"Tótem de descomposición",
"Hondonada Frondacuero",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[150254] = {
"Chataperro",
"Operación: Mecalópolis",
},
[59153] = {
"Rattlegore",
"Scholomance",
"enUS",
},
[95885] = {
"Tirathon Saltheril",
"Vault of the Wardens",
"enUS",
},
[177889] = {
"Juzgaalmas fauceforjada",
"Sagrario de Dominación",
},
[200918] = {
"Rionthus",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[117123] = {
"Tidescale Legionnaire",
"Tomb of Sargeras",
"enUS",
},
[168934] = {
"Espíritu enfurecido",
"El Otro Lado",
},
[26802] = {
"Alliance Ranger",
"The Nexus",
"enUS",
},
[26930] = {
"Grand Magus Telestra",
"The Nexus",
"enUS",
},
[120194] = {
"Ghostly Acolyte",
"Tomb of Sargeras",
"enUS",
},
[45912] = {
"Vórtice salvaje",
"La Cumbre del Vórtice",
},
[177891] = {
"Entidad desconocida",
"Sagrario de Dominación",
},
[100364] = {
"Spirit of Vengeance",
"Vault of the Wardens",
"enUS",
},
[198873] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[100991] = {
"Strangling Roots",
"Darkheart Thicket",
"enUS",
},
[190174] = {
"Hypnosis Bat",
"Operation: Mechagon",
},
[58898] = {
"Vigilant Watchman",
"Pandaria",
"enUS",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
},
[77080] = {
"Sargerei Arbiter",
"Auchindoun",
},
[168681] = {
"Vándalo Rechazado",
"Torres de Ascensión",
},
[197595] = {
"Earthwrought Smasher",
"Vault of the Incarnates",
},
[79511] = {
"Blazing Trickster",
"Auchindoun",
},
[96015] = {
"Inquisitor Tormentorum",
"Vault of the Wardens",
"enUS",
},
[126848] = {
"Captain Eudora",
"Freehold",
"enUS",
},
[94224] = {
"Entidad desconocida",
"Guarida de Neltharion",
},
[3977] = {
"High Inquisitor Whitemane",
"Scarlet Monastery",
"enUS",
},
[76057] = {
"Gusano carroñero",
"Cementerios de Sombraluna",
},
[61139] = {
"Shan-xi Watershaper",
"Mogu'shan Vaults",
"enUS",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[61131] = {
"Mogu'shan Secret-Keeper",
"Mogu'shan Vaults",
"enUS",
},
[131823] = {
"Sister Malady",
"Waycrest Manor",
"enUS",
},
[173800] = {
"Sewer Rat",
"Castle Nathria",
},
[186338] = {
"Maruuk",
"The Nokhud Offensive",
},
[172265] = {
"Remanente de furia",
"Profundidades Sanguíneas",
},
[198874] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[160495] = {
"Atrapaalmas maníaco",
"Teatro del Dolor",
},
[39708] = {
"Twilight Flame Caller",
"Blackrock Caverns",
"enUS",
},
[91794] = {
"Saltscale Lurker",
"Eye of Azshara",
"enUS",
},
[60047] = {
"Amethyst Guardian",
"Mogu'shan Vaults",
"enUS",
},
[59915] = {
"Jasper Guardian",
"Mogu'shan Vaults",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[60051] = {
"Cobalt Guardian",
"Mogu'shan Vaults",
"enUS",
},
[59150] = {
"Flameweaver Koegler",
"Scarlet Halls",
"enUS",
},
[102781] = {
"Murciélago vil cachorro",
"Fuerte Torre Oscura",
"enUS",
},
[169196] = {
"Crimson Cabalist",
"Castle Nathria",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[118518] = {
"Priestess Lunaspyre",
"Tomb of Sargeras",
"enUS",
},
[192481] = {
"Entidad desconocida",
"Hondonada Frondacuero",
"enUS",
},
[190690] = {
"Thundering Ravager",
"Vault of the Incarnates",
},
[118022] = {
"Infernal Chaosbringer",
"Tomb of Sargeras",
"enUS",
},
[40021] = {
"Incendiary Spark",
"Blackrock Caverns",
"enUS",
},
[81432] = {
"Técnico Grom'kar",
"Muelles de hierro",
},
[114312] = {
"Moroes",
"Return to Karazhan",
},
[59220] = {
"Jandice Barov",
"Scholomance",
"enUS",
},
[194273] = {
"Witherling",
"Brackenhide Hollow",
"enUS",
},
[196576] = {
"Cetro encantado",
"Academia Algeth'ar",
},
[127106] = {
"Oficial mareaférrea",
"Puerto Libre",
},
[190947] = {
"Altered Wymling",
"10.0 Dragon Isles",
},
[96657] = {
"Blade Dancer Illianna",
"Vault of the Wardens",
"enUS",
},
[168942] = {
"Portavoz de la muerte",
"El Otro Lado",
},
[142587] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[95888] = {
"Cordana Felsong",
"Vault of the Wardens",
"enUS",
},
[167116] = {
"Atracador espinafauces",
"Nieblas de Tirna Scithe",
},
[165872] = {
"Modelador de carne",
"La Destrucción Necrótica",
},
[200927] = {
"Smolderon",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
"enUS",
},
[99728] = {
"Grimguard",
"Vault of the Wardens",
"enUS",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[91796] = {
"Skrog Wavecrasher",
"Eye of Azshara",
},
[168907] = {
"Tentáculo de baba",
"Plaga Abrumadora",
},
[102287] = {
"Dominador Cascarascuas",
"Guarida de Neltharion",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
"enUS",
},
[162047] = {
"Bruto insaciable",
"Profundidades Sanguíneas",
},
[205790] = {
"Time-Lost Smack-o-Tron",
"Dawn of the Infinite",
"enUS",
},
[101008] = {
"Entidad desconocida",
"Fuerte Torre Oscura",
"enUS",
},
[212673] = {
"Devastador Naz'jar",
"Trono de las Mareas",
"enUS",
},
[97170] = {
"Hatecoil Wavebinder",
"Eye of Azshara",
},
[68640] = {
"Bloodhilt Lightsworn",
"Lion's Landing",
"enUS",
},
[196835] = {
"Kroshk",
"10.0 Dragon Isles",
},
[170480] = {
"Caminamuerte Atal'ai",
"El Otro Lado",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
},
[57109] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[91797] = {
"King Deepbeard",
"Eye of Azshara",
"enUS",
},
[91785] = {
"Wandering Shellback",
"Eye of Azshara",
"enUS",
},
[40925] = {
"Avizor corrupto",
"Trono de las Mareas",
"enUS",
},
[186107] = {
"Vault Keeper",
"Uldaman: Legacy of Tyr",
},
[196043] = {
"Infusora primalista",
"Salas de Infusión",
},
[114320] = {
"Lord Robin Daris",
"Return to Karazhan",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[86552] = {
"Gorged Burster",
"The Everbloom",
},
[209090] = {
"Tindral Sageswift",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[97043] = {
"Seacursed Slaver",
"Maw of Souls",
},
[97171] = {
"Hatecoil Arcanist",
"Eye of Azshara",
},
[162049] = {
"Vestige of Doubt",
"Sanguine Depths",
},
[162038] = {
"Bailarín de la niebla regio",
"Profundidades Sanguíneas",
},
[59213] = {
"Woven Boneguard",
"Scholomance",
"enUS",
},
[186616] = {
"Granyth",
"The Nokhud Offensive",
},
[62358] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
"enUS",
},
[45915] = {
"Mistral acorazado",
"La Cumbre del Vórtice",
},
[56658] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[184300] = {
"Gólem de rocaébano",
"Uldaman: Legado de Tyr",
},
[162039] = {
"Opresora siniestra",
"Profundidades Sanguíneas",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[190187] = {
"Draconic Image",
"The Azure Vault",
},
[82594] = {
"Estibador de Riel siniestro",
"Depósito Riel siniestro",
},
[76446] = {
"Dominador de Sombraluna",
"Cementerios de Sombraluna",
},
[86809] = {
"Incineradora Grom'kar",
"Muelles de hierro",
},
[97172] = {
"Saltsea Droplet",
"Eye of Azshara",
},
[184301] = {
"Buscador de caverna",
"Uldaman: Legado de Tyr",
},
[162040] = {
"Gran sobrestante",
"Profundidades Sanguíneas",
},
[1863] = {
"Shah-sahar",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[120201] = {
"Spectral Guardian",
"Tomb of Sargeras",
"enUS",
},
[168949] = {
"Risen Bonesoldier",
"De Other Side",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[176581] = {
"Spiked Ball",
"Sanctum of Domination",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[204536] = {
"Trozo de añubio",
"El Alba del Infinito",
"enUS",
},
[189669] = {
"Binding Spear",
"Neltharus",
"enUS",
},
[98963] = {
"Blazing Imp",
"Vault of the Wardens",
"enUS",
},
[59605] = {
"Sodden Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[173044] = {
"Asistente de costuras",
"La Destrucción Necrótica",
},
[189886] = {
"Blazebound Firestorm",
"Ruby Life Pools",
},
[120720] = {
"Lunar Guard",
"Tomb of Sargeras",
"enUS",
},
[97173] = {
"Restless Tides",
"Eye of Azshara",
},
[184303] = {
"Reptador sigiloso",
"Uldaman: Legado de Tyr",
"enUS",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[131849] = {
"Crazed Marksman",
"Waycrest Manor",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[204262] = {
"Necrofrost",
"Dawn of the Infinite",
"enUS",
},
[76296] = {
"Twisted Magus",
"Auchindoun",
},
[126983] = {
"Harlan Sweete",
"Freehold",
"enUS",
},
[127111] = {
"Remero mareaférrea",
"Puerto Libre",
},
[97678] = {
"Aranasi Broodmother",
"Vault of the Wardens",
"enUS",
},
[131850] = {
"Superviviente enajenado",
"Mansión Tarjasenda",
"enUS",
},
[54552] = {
"Time-Twisted Breaker",
"End Time",
"enUS",
},
[98965] = {
"Kur'talos Ravencrest",
"Black Rook Hold",
"enUS",
},
[129548] = {
"Blacktooth Brute",
"Freehold",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
},
[198872] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[213219] = {
"Congealed Ooze",
"Throne of the Tides",
"enUS",
},
[95887] = {
"Glazer",
"Vault of the Wardens",
"enUS",
},
[75272] = {
"Bloodmaul Ogre Mage",
"Bloodmaul Slag Mines",
},
[205799] = {
"Cinderstep Melter",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[114318] = {
"Baron Rafe Dreuger",
"Return to Karazhan",
},
[59980] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[62360] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
"enUS",
},
[178165] = {
"Goliat caminacosta",
"Tazavesh, el Mercado Velado",
},
[205749] = {
"Restless Pebble",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[195579] = {
"Primal Gust",
"The Nokhud Offensive",
},
[191215] = {
"Tarasek Legionnaire",
"Vault of the Incarnates",
},
[199659] = {
"Warlord Kagni",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[82590] = {
"Exploradora de Riel siniestro",
"Depósito Riel siniestro",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
},
[139269] = {
"Entidad desconocida",
"Mansión Tarjasenda",
"enUS",
},
[210147] = {
"Harbinger of Incineration",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[170490] = {
"Sumo sacerdote Atal'ai",
"El Otro Lado",
},
[150276] = {
"Robot chatarra pesado",
"Operación: Mecalópolis",
},
[164861] = {
"Zurcecorteza spriggan",
"El Otro Lado",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[200936] = {
"Fiamma Vivente",
"Segrete delle Incarnazioni",
},
[185534] = {
"Cazador saetaósea",
"Hondonada Frondacuero",
"enUS",
},
[115486] = {
"Asesino erudito",
"Regreso a Karazhan",
},
[151812] = {
"Detect-o-Bot",
"Operation: Mechagon",
},
[212981] = {
"Hapless Assistant",
"The Everbloom",
"enUS",
},
[96664] = {
"Gravacuevas Valarjar",
"Salones del Valor",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[210173] = {
"Zaqali Steelshaper",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[114804] = {
"Destrero espectral",
"Regreso a Karazhan",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
},
[74787] = {
"Slave Watcher Crushto",
"Bloodmaul Slag Mines",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[195821] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
},
[174842] = {
"Belligerent Waiter",
"Castle Nathria",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[59223] = {
"Brother Korloff",
"Scarlet Monastery",
"enUS",
},
[61334] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
"enUS",
},
[171772] = {
"Defensora de Veloniebla",
"Nieblas de Tirna Scithe",
},
[86684] = {
"Azotador feroz",
"El Sempibrote",
},
[59479] = {
"Yan-Zhu the Uncasked",
"Stormstout Brewery",
"enUS",
},
[210150] = {
"Flametouched Enforcer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
},
[205804] = {
"Dragón resucitado",
"El Alba del Infinito",
"enUS",
},
[26805] = {
"Alliance Cleric",
"The Nexus",
"enUS",
},
[208363] = {
"Urctos",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[61910] = {
"Resin Flake",
"Siege of Niuzao Temple",
"enUS",
},
[91808] = {
"Serpentrix",
"Eye of Azshara",
"enUS",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
},
[184582] = {
"Eric \"The Swift\"",
"Uldaman: Legacy of Tyr",
"enUS",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[210170] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[114321] = {
"Lord Crispin Ference",
"Return to Karazhan",
},
[187894] = {
"Infused Whelp",
"Ruby Life Pools",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[178171] = {
"Guardián tronaforjado",
"Tazavesh, el Mercado Velado",
},
[200944] = {
"Nokhud Fighter",
"The Nokhud Offensive",
},
[207341] = {
"Blistering Spear",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[183033] = {
"Grim Reflection",
"Sepulcher of the First Ones",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[208365] = {
"Aerwynn",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[179963] = {
"Terror Orb",
"Sanctum of Domination",
},
[145185] = {
"Gnomercy 4.U.",
"Operation: Mechagon",
},
[200945] = {
"Nokhud Warmonger",
"The Nokhud Offensive",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
},
[191222] = {
"Juvenile Frost Proto-Dragon",
"Vault of the Incarnates",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[104215] = {
"Patrol Captain Gerdo",
"Court of Stars",
},
[100249] = {
"Channeler Varisz",
"Eye of Azshara",
"enUS",
},
[80937] = {
"Artillero Grom'kar",
"Depósito Riel siniestro",
},
[59480] = {
"Brittle Skeleton",
"Scholomance",
"enUS",
},
[59544] = {
"El Tigre Asertivo",
"Templo del Dragón de Jade",
},
[198326] = {
"Stormwrought Despoiler",
"Vault of the Incarnates",
},
[168962] = {
"Reborn Phoenix",
"Castle Nathria",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[208367] = {
"Pip",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[96677] = {
"Oso pardo Quijacero",
"Salones del Valor",
},
[187638] = {
"Flamescale Tarasek",
"Vault of the Incarnates",
},
[210172] = {
"Zaqali Juggernaut",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[125828] = {
"Hoobgoob",
"Atal'Dazar",
"enUS",
},
[192519] = {
"Monstrous Mud",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[118289] = {
"Maiden of Vigilance",
"Tomb of Sargeras",
"enUS",
},
[45919] = {
"Dragón de tormenta joven",
"La Cumbre del Vórtice",
},
[96028] = {
"Wrath of Azshara",
"Eye of Azshara",
"enUS",
},
[100250] = {
"Binder Ashioi",
"Eye of Azshara",
"enUS",
},
[186644] = {
"Leymor",
"The Azure Vault",
},
[194487] = {
"Vil Maleputre",
"Hondonada Frondacuero",
"enUS",
},
[194315] = {
"Clamatormentas Solongo",
"El Ataque Nokhud",
},
[191225] = {
"Tarasek Earthreaver",
"Vault of the Incarnates",
},
[203763] = {
"Alliance Footman",
"Dawn of the Infinite",
"enUS",
},
[206066] = {
"Parásito del flujo temporal",
"El Alba del Infinito",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
"enUS",
},
[212483] = {
"Gnarled Roots",
"The Everbloom",
"enUS",
},
[56863] = {
"Sleepy Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[196855] = {
"Braekkas",
"Vault of the Incarnates",
},
[163862] = {
"Defensora de muchos ojos",
"Plaga Abrumadora",
},
[172803] = {
"Afterimage of Baroness Frieda",
"Castle Nathria",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
},
[60040] = {
"Commander Durand",
"Scarlet Monastery",
"enUS",
},
[104217] = {
"Talixae Flamewreath",
"Court of Stars",
},
[77734] = {
"Teron'gor",
"Auchindoun",
},
[42333] = {
"High Priestess Azil",
"The Stonecore",
"enUS",
},
[162057] = {
"Centinela de la cámara",
"Profundidades Sanguíneas",
},
[59545] = {
"El Alfazaque Dorado",
"Templo del Dragón de Jade",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
},
[59801] = {
"Krik'thik Wind Shaper",
"Gate of the Setting Sun",
},
[80805] = {
"Makogg Hoja de brasal",
"Muelles de hierro",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[131847] = {
"Waycrest Reveler",
"Waycrest Manor",
"enUS",
},
[95772] = {
"Garranocturna enloquecida",
"Matorral Corazón Oscuro",
"enUS",
},
[133912] = {
"Profanador jurasangre",
"Bardoma",
},
[164873] = {
"Vetecuerno venado rúnico",
"El Otro Lado",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
"enUS",
},
[104218] = {
"Advisor Melandrus",
"Court of Stars",
"enUS",
},
[190205] = {
"Scorchling",
"Ruby Life Pools",
"enUS",
},
[165111] = {
"Garra maliciosa drust",
"Nieblas de Tirna Scithe",
},
[192764] = {
"Guardiano della Fiamma",
"Segrete delle Incarnazioni",
},
[164362] = {
"Bocado limoso",
"Plaga Abrumadora",
},
[201464] = {
"Cinderstep Weaver",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[129550] = {
"Bilge Rat Padfoot",
"Freehold",
"enUS",
},
[82597] = {
"Capitana Grom'kar",
"Depósito Riel siniestro",
},
[56731] = {
"Habanero Brew",
"Stormstout Brewery",
"enUS",
},
[97182] = {
"Night Watch Mariner",
"Maw of Souls",
},
[101414] = {
"Saltscale Skulker",
"Eye of Azshara",
"enUS",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
"enUS",
},
[201468] = {
"Stonebreath Landslider",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[201465] = {
"Cinderstep Melter",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[195580] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
},
[169428] = {
"Wrathguard",
"Brackenhide Hollow",
},
[114802] = {
"Oficial espectral",
"Regreso a Karazhan",
},
[190207] = {
"Tejecenizas primalista",
"Estanques de Vida Rubí",
},
[102566] = {
"Grimhorn the Enslaver",
"Vault of the Wardens",
"enUS",
},
[77700] = {
"Exhumadora Sombraluna",
"Cementerios de Sombraluna",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[201466] = {
"Cinderstep Igniter",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[185346] = {
"Dominated Eradicator",
"Sepulcher of the First Ones",
},
[54688] = {
"Time-Twisted Nightsaber",
"End Time",
"enUS",
},
[185529] = {
"Plaga bélica frondacuero",
"Hondonada Frondacuero",
"enUS",
},
[167691] = {
"Stasis Trap",
"Castle Nathria",
},
[80935] = {
"Explotador Grom'kar",
"Depósito Riel siniestro",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
},
[56927] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
},
[61341] = {
"Mounted Mogu",
"Mogu'shan Vaults",
"enUS",
},
[163086] = {
"Bolsa de gas rancio",
"Teatro del Dolor",
},
[210423] = {
"Keeper of the Dream",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[152009] = {
"Robot chatarra descompuesto",
"Operación: Mecalópolis",
},
[54543] = {
"Time-Twisted Drake",
"End Time",
"enUS",
},
[184580] = {
"Olaf",
"Uldaman: Legado de Tyr",
},
[187159] = {
"Cría estridente",
"La Bóveda Azur",
},
[187139] = {
"Crystal Thrasher",
"La Bóveda Azur",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
"enUS",
},
[206074] = {
"Péndulo",
"El Alba del Infinito",
"enUS",
},
[56732] = {
"Liu Flameheart",
"Temple of the Jade Serpent",
"enUS",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[56924] = {
"Inflamed Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[45477] = {
"Soldado de ráfaga",
"La Cumbre del Vórtice",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[168973] = {
"High Torturer Darithos",
"Castle Nathria",
},
[201467] = {
"Stonebreath Summoner",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
},
[114584] = {
"Equipo fantasma",
"Regreso a Karazhan",
},
[102430] = {
"Tarspitter Slug",
"Neltharion's Lair",
},
[176394] = {
"Trabajador de C.A.R.T.A.",
"Tazavesh, el Mercado Velado",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
},
[201470] = {
"Flickering Flame",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[205820] = {
"Crawling Goo",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[163089] = {
"Desechos asquerosos",
"Teatro del Dolor",
},
[118523] = {
"Huntress Kasparian",
"Tomb of Sargeras",
"enUS",
},
[98681] = {
"Hilador Grajo",
"Fuerte Torre Oscura",
"enUS",
},
[99360] = {
"Vilethorn Blossom",
"Darkheart Thicket",
"enUS",
},
[176395] = {
"Elemental postal sobrecargado",
"Tazavesh, el Mercado Velado",
},
[131821] = {
"Doncella ignota",
"Mansión Tarjasenda",
"enUS",
},
[201471] = {
"Earthborne Charger",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[94331] = {
"Petrifying Crystal",
"Neltharion's Lair",
},
[195842] = {
"Corruptor ukhel",
"El Ataque Nokhud",
},
[98081] = {
"Bellowing Idol",
"Neltharion's Lair",
},
[67504] = {
"Baxel Brassbombs",
"Lion's Landing",
"enUS",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
},
[176396] = {
"Defective Sorter",
"Tazavesh, the Veiled Market",
},
[75652] = {
"Engendro del vacío",
"Cementerios de Sombraluna",
},
[201472] = {
"Torch Revenant",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[84520] = {
"Pitwarden Gwarnok",
"Iron Docks",
},
[165138] = {
"Bolsa de añublo",
"La Destrucción Necrótica",
},
[105636] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[80938] = {
"Mole Grom'kar",
"Depósito Riel siniestro",
},
[179386] = {
"Oficial corsario",
"Tazavesh, el Mercado Velado",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
"enUS",
},
[59100] = {
"Expired Test Subject",
"Scholomance",
"enUS",
},
[185353] = {
"Huntmaster",
"10.0 Dragon Isles",
},
[114330] = {
"Babblet",
"Return to Karazhan",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
"enUS",
},
[127124] = {
"Freehold Barhand",
"Freehold",
"enUS",
},
[86547] = {
"Venom Sprayer",
"The Everbloom",
},
[165824] = {
"Nar'zudah",
"La Destrucción Necrótica",
},
[91004] = {
"Ularogg Cragshaper",
"Neltharion's Lair",
"enUS",
},
[133361] = {
"Entidad desconocida",
"Mansión Tarjasenda",
"enUS",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
"enUS",
},
[186122] = {
"Rira Hachagarra",
"Hondonada Frondacuero",
"enUS",
},
[151579] = {
"Shield Generator",
"Operation: Mechagon",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[163520] = {
"Líder de escuadrón Rechazada",
"Torres de Ascensión",
},
[45672] = {
"Naz'jar Soldier",
"Throne of the Tides",
"enUS",
},
[65362] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
},
[193799] = {
"Entidad desconocida",
"Hondonada Frondacuero",
"enUS",
},
[196102] = {
"Azotador conjurado",
"La Bóveda Azur",
},
[131825] = {
"Sister Briar",
"Waycrest Manor",
"enUS",
},
[167956] = {
"Acólita oscura",
"Profundidades Sanguíneas",
},
[204030] = {
"Entidad desconocida",
"El Alba del Infinito",
},
[62619] = {
"Jade Destroyer",
"Greenstone Village",
"enUS",
},
[114544] = {
"Ujier esquelético",
"Regreso a Karazhan",
},
[193544] = {
"Nokhudon Houndsman",
"The Nokhud Offensive",
},
[189706] = {
"Chaotic Essence",
"Castle Nathria",
},
[205843] = {
"Cinderstep Melter",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
},
[56862] = {
"Drunken Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
},
[189470] = {
"Bengala de lava",
"Neltharus",
"enUS",
},
[114338] = {
"Confluencia de maná",
"Regreso a Karazhan",
},
[185357] = {
"Sentry",
"10.0 Dragon Isles",
},
[189707] = {
"Chaotic Mote",
"Castle Nathria",
},
[59293] = {
"Scarlet Cannoneer",
"Scarlet Halls",
"enUS",
},
[186125] = {
"Trucatótem",
"Hondonada Frondacuero",
},
[165911] = {
"Creación leal",
"La Destrucción Necrótica",
},
[207638] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[201222] = {
"Valow, Vigilante vetusto",
"El Alba del Infinito",
"enUS",
},
[59613] = {
"Professor Slate",
"Scholomance",
"enUS",
},
[102962] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[178628] = {
"Mawsworn Darkcaster",
"Sanctum of Domination",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[58823] = {
"Scholomance Neophyte",
"Scholomance",
"enUS",
},
[184335] = {
"Agente infinito",
"Uldaman: Legado de Tyr",
"enUS",
},
[126847] = {
"Captain Raoul",
"Freehold",
"enUS",
},
[201223] = {
"Magus Crepuscular infinito",
"El Alba del Infinito",
"enUS",
},
[193291] = {
"Alardiente alfa",
"Neltharus",
"enUS",
},
[131812] = {
"Encantaalmas de Hiel de corazón",
"Mansión Tarjasenda",
"enUS",
},
[45924] = {
"Borrasca turbulenta",
"La Cumbre del Vórtice",
},
[187315] = {
"Disease Slasher",
"Brackenhide Hollow",
"enUS",
},
[60381] = {
"Zandalari Infiltrator",
"Mogu'shan Vaults",
"enUS",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
},
[176404] = {
"Dark Sentinel",
"Sanctum of Domination",
},
[106785] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[58590] = {
"Scarlet Zealot",
"Scarlet Monastery",
"enUS",
},
[60701] = {
"Zian of the Endless Shadow",
"Mogu'shan Vaults",
"enUS",
},
[195851] = {
"Portavoz de la muerte ukhel",
"El Ataque Nokhud",
},
[210436] = {
"Flowering Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[194316] = {
"Clamatormentas Zarii",
"El Ataque Nokhud",
},
[99365] = {
"Taintheart Stalker",
"Darkheart Thicket",
"enUS",
},
[192781] = {
"Ore Elemental",
"Neltharus",
"enUS",
},
[92538] = {
"Entidad desconocida",
"Guarida de Neltharion",
},
[193293] = {
"Celador qalashi",
"Neltharus",
"enUS",
},
[61213] = {
"Krik'thik Conscript",
"Gate of the Setting Sun",
},
[114334] = {
"Damaged Golem",
"Return to Karazhan",
},
[210437] = {
"Verdant Boughwalker",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[194317] = {
"Clamatormentas Boroo",
"El Ataque Nokhud",
},
[167962] = {
"Taladro dental destrozado",
"El Otro Lado",
},
[172312] = {
"Atiborrador espinafauces",
"Nieblas de Tirna Scithe",
},
[106786] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[59614] = {
"Bored Student",
"Scholomance",
"enUS",
},
[138281] = {
"Corruptor ignoto",
"Bardoma",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
"enUS",
},
[43430] = {
"Stonecore Berserker",
"The Stonecore",
"enUS",
},
[204560] = {
"Incorporeal Being",
"Freehold",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[119072] = {
"The Desolate Host",
"Tomb of Sargeras",
"enUS",
},
[65310] = {
"Naba de boxeo",
"Torres de Ascensión",
},
[187154] = {
"Arcane Curator",
"The Azure Vault",
},
[185363] = {
"Manifestor Krugan",
"Sepulcher of the First Ones",
},
[43878] = {
"Grand Vizier Ertan",
"The Vortex Pinnacle",
"enUS",
},
[197149] = {
"Lavamante Qalashi",
"Segrete delle Incarnazioni",
},
[206352] = {
"Alliance Archer",
"Dawn of the Infinite",
"enUS",
},
[167964] = {
"4.RF-4.RF",
"El Otro Lado",
},
[205737] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[106787] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
},
[168988] = {
"Overgrowth",
"Mists of Tirna Scithe",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
},
[58783] = {
"Scarlet Initiate",
"Scarlet Monastery",
"enUS",
},
[80816] = {
"Ahri'ok Dugru",
"Muelles de hierro",
},
[167965] = {
"Lubricante",
"El Otro Lado",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
},
[199182] = {
"Jumping Spiderling",
"Vault of the Incarnates",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[193553] = {
"Nokhudon Warhound",
"The Nokhud Offensive",
},
[120477] = {
"Deep Stalker",
"Tomb of Sargeras",
"enUS",
},
[105715] = {
"Inquisidor vigilante",
"Corte de Estrellas",
},
[59359] = {
"Flesh Horror",
"Scholomance",
"enUS",
},
[165919] = {
"Merodeador esqueletal",
"La Destrucción Necrótica",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
},
[205265] = {
"Time-Displaced Trooper",
"Dawn of the Infinite",
"enUS",
},
[199595] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[167611] = {
"Evisceradora petronato",
"Salones de Expiación",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[76595] = {
"Sargerei Soulpriest",
"Auchindoun",
},
[171805] = {
"Escriba investigadora",
"Profundidades Sanguíneas",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
},
[192787] = {
"Rompespaldas qalashi",
"Neltharus",
"enUS",
},
[190245] = {
"Broodkeeper Diurna",
"Vault of the Incarnates",
},
[205736] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[43214] = {
"Slabhide",
"The Stonecore",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[83894] = {
"Dulhu",
"The Everbloom",
"enUS",
},
[163618] = {
"Nigromante de Zolramus",
"La Destrucción Necrótica",
},
[190485] = {
"Erkhart Stormvein",
"Ruby Life Pools",
},
[192788] = {
"Taumaturga qalashi",
"Neltharus",
"enUS",
},
[205326] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[213770] = {
"Ink of Ozumat",
"Throne of the Tides",
"enUS",
},
[168992] = {
"Cultista resucitado",
"El Otro Lado",
},
[98696] = {
"Illysanna Ravencrest",
"Black Rook Hold",
"enUS",
},
[196115] = {
"Cuidador arcano",
"La Bóveda Azur",
},
[163619] = {
"Zolramus Bonecarver",
"The Necrotic Wake",
},
[56865] = {
"Aqua Dancer",
"Stormstout Brewery",
"enUS",
},
[192789] = {
"Arco largo nokhud",
"El Ataque Nokhud",
},
[95920] = {
"Animated Storm",
"Eye of Azshara",
"enUS",
},
[187160] = {
"Furia de cristal",
"La Bóveda Azur",
},
[191510] = {
"Smoldering Hellion",
"Vault of the Incarnates",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[59360] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[75829] = {
"Nhallish",
"Shadowmoon Burial Grounds",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
},
[59552] = {
"El Hozen Llorica",
"Templo del Dragón de Jade",
},
[40817] = {
"Shadow of Obsidius",
"Blackrock Caverns",
"enUS",
},
[193558] = {
"Primalist Flamecaller",
"Vault of the Incarnates",
},
[195847] = {
"Ukhel Willcrusher",
"The Nokhud Offensive",
},
[196117] = {
"Crystal Thrasher",
"La Bóveda Azur",
},
[163621] = {
"Muelecarne",
"La Destrucción Necrótica",
},
[26928] = {
"Grand Magus Telestra",
"The Nexus",
"enUS",
},
[192791] = {
"Nokhud Warspear",
"The Nokhud Offensive",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[133663] = {
"Fanatical Headhunter",
"The Underrot",
"enUS",
},
[177407] = {
"Formless Mass",
"Sanctum of Domination",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[206068] = {
"Fusión temporal",
"El Alba del Infinito",
"enUS",
},
[60384] = {
"Zandalari Pterror Wing",
"Mogu'shan Vaults",
"enUS",
},
[39978] = {
"Twilight Torturer",
"Blackrock Caverns",
"enUS",
},
[198933] = {
"Iridikron",
"Dawn of the Infinite",
"enUS",
},
[60576] = {
"Stone Quilen",
"Mogu'shan Vaults",
"enUS",
},
[197398] = {
"Hungry Lasher",
"Algeth'ar Academy",
},
[189466] = {
"Comandante de antorcha de hierro",
"Neltharus",
"enUS",
},
[189722] = {
"Gulping Goliath",
"Halls of Infusion",
},
[165414] = {
"Desintegrador depravado",
"Salones de Expiación",
},
[58822] = {
"Risen Guard",
"Scholomance",
"enUS",
},
[32665] = {
"Crystalline Tangler",
"The Nexus",
"enUS",
},
[131383] = {
"Sporecaller Zancha",
"The Underrot",
},
[44841] = {
"Blight Beast",
"Throne of the Tides",
"enUS",
},
[176929] = {
"Remnant of Kel'Thuzad",
"Sanctum of Domination",
},
[189467] = {
"Partehuesos qalashi",
"Neltharus",
"enUS",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
},
[83763] = {
"Técnico Grom'kar",
"Muelles de hierro",
},
[205478] = {
"Conduit Guardian",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[115844] = {
"Goroth",
"Tomb of Sargeras",
"enUS",
},
[192794] = {
"Nokhud Beastmaster",
"The Nokhud Offensive",
},
[59553] = {
"La Reina Cantora",
"Templo del Dragón de Jade",
},
[26746] = {
"Crazed Mana-Wraith",
"The Nexus",
"enUS",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[168891] = {
"Apestado manipulado",
"Plaga Abrumadora",
},
[173604] = {
"Sinister Antiquarian",
"Castle Nathria",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
"enUS",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
},
[45922] = {
"Asesino empíreo",
"La Cumbre del Vórtice",
},
[167615] = {
"Filoscura depravada",
"Salones de Expiación",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
},
[45928] = {
"Ejecutor del califa",
"La Cumbre del Vórtice",
},
[83764] = {
"Grom'kar Deadeye",
"Iron Docks",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[163882] = {
"Gigante de carne descompuesto",
"Plaga Abrumadora",
},
[192796] = {
"Soplacuernos nokhud",
"El Ataque Nokhud",
},
[199715] = {
"Nokhud Battleguard",
"The Nokhud Offensive",
},
[131402] = {
"Underrot Tick",
"The Underrot",
},
[203799] = {
"Horde Axe Thrower",
"Dawn of the Infinite",
},
[58722] = {
"Lilian Voss",
"Scholomance",
"enUS",
},
[56930] = {
"Krik'thik Swarm Bringer",
"Gate of the Setting Sun",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
},
[68668] = {
"S.H.A.R.K. Medic",
"Lion's Landing",
"enUS",
},
[188703] = {
"Protoform Barrier",
"Castle Nathria",
},
[197147] = {
"Qalashi Honor Guard",
"Vault of the Incarnates",
},
[75193] = {
"Bloodmaul Overseer",
"Bloodmaul Slag Mines",
},
[193565] = {
"Nokhudon Defender",
"The Nokhud Offensive",
},
[189727] = {
"Khajin the Unyielding",
"Halls of Infusion",
},
[61345] = {
"Mogu Archer",
"Mogu'shan Vaults",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[59426] = {
"Bopper",
"Stormstout Brewery",
"enUS",
},
[181549] = {
"Prototype of War",
"Sepulcher of the First Ones",
},
[99188] = {
"Waterlogged Soul Guard",
"Maw of Souls",
},
[207639] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[201754] = {
"Sarkareth",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[59746] = {
"Scarlet Centurion",
"Scarlet Monastery",
"enUS",
},
[189464] = {
"Antorcha de hierro qalashi",
"Neltharus",
"enUS",
},
[89011] = {
"Rylak Skyterror",
"Iron Docks",
},
[68669] = {
"S.H.A.R.K. Rocketeer",
"Lion's Landing",
"enUS",
},
[101549] = {
"Arcane Minion",
"Black Rook Hold",
"enUS",
},
[205337] = {
"Manipuladora del tiempo infinito",
"El Alba del Infinito",
"enUS",
},
[75194] = {
"Gnasher",
"Bloodmaul Slag Mines",
},
[163894] = {
"Rompeespinas contagioso",
"Plaga Abrumadora",
},
[189729] = {
"Primal Tsunami",
"Halls of Infusion",
},
[44566] = {
"Ozumat",
"Throne of the Tides",
"enUS",
},
[60386] = {
"Zandalari Terror Rider",
"Mogu'shan Vaults",
"enUS",
},
[39980] = {
"Twilight Sadist",
"Blackrock Caverns",
"enUS",
},
[192800] = {
"Maestra de lanzas nokhud",
"El Ataque Nokhud",
},
[131824] = {
"Sister Solena",
"Waycrest Manor",
"enUS",
},
[197406] = {
"Libélula escurridiza exasperada",
"Academia Algeth'ar",
},
[201756] = {
"Whiiskeyz",
"Dawn of the Infinite",
"enUS",
},
[61157] = {
"Sassy Seedling",
"Greenstone Village",
"enUS",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
"enUS",
},
[62945] = {
"Bloodthirsty Prowler",
"Greenstone Village",
"enUS",
},
[164926] = {
"Romperramas drust",
"Nieblas de Tirna Scithe",
},
[113197] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[104822] = {
"Flame of Woe",
"Halls of Valor",
},
[114284] = {
"Elfyra",
"Return to Karazhan",
},
[162744] = {
"Nekthara el machacador",
"Teatro del Dolor",
},
[79545] = {
"Nitrogg Thundertower",
"Grimrail Depot",
},
[59299] = {
"Scarlet Guardian",
"Scarlet Halls",
"enUS",
},
[178631] = {
"Mawsworn Commander",
"Sanctum of Domination",
},
[133436] = {
"Venture Co. Skyscorcher",
"The MOTHERLODE!!",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
"enUS",
},
[40023] = {
"Defiled Earth Rager",
"Blackrock Caverns",
"enUS",
},
[197801] = {
"Awakened Terrasentry",
"Vault of the Incarnates",
},
[163121] = {
"Vanguardia cosida",
"La Destrucción Necrótica",
},
[164921] = {
"Cosechador drust",
"Nieblas de Tirna Scithe",
},
[186150] = {
"Soul Fragment",
"Sepulcher of the First Ones",
},
[127019] = {
"Training Dummy",
"Freehold",
"enUS",
},
[192803] = {
"Ohuna de guerra",
"El Ataque Nokhud",
},
[101679] = {
"Dreadsoul Poisoner",
"Darkheart Thicket",
"enUS",
},
[83392] = {
"Uñagrieta furioso",
"Muelles de hierro",
},
[203806] = {
"Whisper in the Dark",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[45930] = {
"Ministro del Aire",
"La Cumbre del Vórtice",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
},
[208668] = {
"Elisande",
"10.2. Nighthold",
"enUS",
},
[198424] = {
"Scultrice di Ghiaccio Primalista",
"Segrete delle Incarnazioni",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[178731] = {
"Bonesteel",
"Sanctum of Domination",
},
[76220] = {
"Blazing Trickster",
"Auchindoun",
},
[193572] = {
"Nokhud Warsmith",
"The Nokhud Offensive",
},
[195875] = {
"Desecrated Bakar",
"The Nokhud Offensive",
},
[102583] = {
"Fel Scorcher",
"Vault of the Wardens",
"enUS",
},
[97202] = {
"Olmyr el Iluminado",
"Salones del Valor",
},
[194745] = {
"Hiena colmipútrea",
"Hondonada Frondacuero",
"enUS",
},
[186664] = {
"Stonevault Ambusher",
"Uldaman: Legacy of Tyr",
"enUS",
},
[44715] = {
"Vicious Mindlasher",
"Throne of the Tides",
"enUS",
},
[61155] = {
"Wily Woodling",
"Pandaria",
"enUS",
},
[40943] = {
"Mago acuático Gilgoblin",
"Trono de las Mareas",
"enUS",
},
[195876] = {
"Ohuna profanada",
"El Ataque Nokhud",
},
[61347] = {
"Kingsguard",
"Mogu'shan Vaults",
"enUS",
},
[127119] = {
"Freehold Deckhand",
"Freehold",
"enUS",
},
[135234] = {
"Mastín enfermo",
"Mansión Tarjasenda",
"enUS",
},
[100529] = {
"Hatespawn Slime",
"Darkheart Thicket",
"enUS",
},
[176957] = {
"Shadowsteel Colossus",
"Sanctum of Domination",
},
[83613] = {
"Koramar",
"Muelles de hierro",
},
[59684] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[173360] = {
"Escupeplagas",
"Plaga Abrumadora",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
"enUS",
},
[184107] = {
"Protector rúnico",
"Uldaman: Legado de Tyr",
},
[196645] = {
"Desecrated Bakar",
"The Nokhud Offensive",
},
[174773] = {
"Entidad desconocida",
"Teatro del Dolor",
},
[39960] = {
"Bracero múrloc profundo",
"Trono de las Mareas",
"enUS",
},
[75198] = {
"Bloodmaul Geomancer",
"Bloodmaul Slag Mines",
},
[199716] = {
"Nokhud Brute",
"The Nokhud Offensive",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
},
[45935] = {
"Adepto del templo",
"La Cumbre del Vórtice",
},
[213806] = {
"Entidad desconocida",
"Trono de las Mareas",
"enUS",
},
[39982] = {
"Crazed Mage",
"Blackrock Caverns",
"enUS",
},
[75966] = {
"Defiled Spirit",
"Shadowmoon Burial Grounds",
},
[180782] = {
"Consumed Soul",
"Sanctum of Domination",
},
[115115] = {
"Coldmist Stalker",
"Return to Karazhan",
},
[60708] = {
"Meng the Demented",
"Mogu'shan Vaults",
"enUS",
},
[90998] = {
"Modelador trozo de añublo",
"Guarida de Neltharion",
},
[165430] = {
"Engendro del mal",
"Plaga Abrumadora",
},
[180015] = {
"Marinero de cubierta fornido",
"Tazavesh, el Mercado Velado",
},
[151613] = {
"Anti-Personnel Squirrel",
"Operation: Mechagon",
},
[186124] = {
"Tajolmillo",
"Hondonada Frondacuero",
"enUS",
},
[81212] = {
"Vigía Supremo Riel siniestro",
"Depósito Riel siniestro",
},
[61156] = {
"Vengeful Hui",
"Greenstone Village",
"enUS",
},
[197671] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[163128] = {
"Hechicero de Zolramus",
"La Destrucción Necrótica",
},
[97084] = {
"Rey Tor",
"Salones del Valor",
},
[118698] = {
"Entidad desconocida",
"Falla Cicatriz Aterradora - Plataforma de gesta de brujo",
},
[202789] = {
"Morchie",
"Dawn of the Infinite",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[26716] = {
"Azure Warder",
"The Nexus",
"enUS",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[164920] = {
"Rajaalmas drust",
"Nieblas de Tirna Scithe",
},
[117154] = {
"Razorjaw Acolyte",
"Tomb of Sargeras",
"enUS",
},
[198871] = {
"Sundered Scaleguard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[114794] = {
"Sabueso esquelético",
"Regreso a Karazhan",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[194469] = {
"Wither Slasher",
"Brackenhide Hollow",
"enUS",
},
[40923] = {
"Unstable Corruption",
"Throne of the Tides",
"enUS",
},
[205366] = {
"Time-Lost Wakethrasher",
"Dawn of the Infinite",
"enUS",
},
[60197] = {
"Training Dummy",
"Scarlet Monastery",
"enUS",
},
[45932] = {
"Estrella de Hundecielos",
"La Cumbre del Vórtice",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[131669] = {
"Sabueso dentado",
"Mansión Tarjasenda",
"enUS",
},
[135240] = {
"Esencia de alma",
"Mansión Tarjasenda",
"enUS",
},
[100532] = {
"Entidad desconocida",
"Matorral Corazón Oscuro",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[60709] = {
"Qiang the Merciless",
"Mogu'shan Vaults",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
},
[58605] = {
"Scarlet Judicator",
"Scarlet Monastery",
"enUS",
},
[190510] = {
"Vault Guard",
"The Azure Vault",
},
[205623] = {
"Drazos Blackwing",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[190779] = {
"Arcane Golem",
"10.0 Dragon Isles",
},
[176949] = {
"Mawsworn Embermage",
"Sanctum of Domination",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
},
[114350] = {
"Shade of Medivh",
"Return to Karazhan",
},
[59302] = {
"Sergeant Verdone",
"Scarlet Halls",
"enUS",
},
[75713] = {
"Arreglahuesos de Sombraluna",
"Cementerios de Sombraluna",
},
[60009] = {
"Feng the Accursed",
"Mogu'shan Vaults",
"enUS",
},
[121003] = {
"Rez the Tombwatcher",
"Tomb of Sargeras",
"enUS",
},
[164414] = {
"Mago reanimado",
"La Destrucción Necrótica",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[11859] = {
"Doomguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[43438] = {
"Corborus",
"The Stonecore",
"enUS",
},
[170927] = {
"Moco eruptivo",
"Plaga Abrumadora",
},
[61989] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
"enUS",
},
[42188] = {
"Ozruk",
"The Stonecore",
"enUS",
},
[129699] = {
"Ludwig Von Tortollan",
"Freehold",
},
[83390] = {
"Retador Señor del Trueno",
"Muelles de hierro",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[194467] = {
"Disease Slasher",
"Brackenhide Hollow",
"enUS",
},
[187192] = {
"Garrafuria",
"Hondonada Frondacuero",
"enUS",
},
[136541] = {
"Bile Oozeling",
"Waycrest Manor",
"enUS",
},
[77889] = {
"Grom'tash the Destructor",
"Auchindoun",
},
[121004] = {
"Razorjaw Myrmidon",
"Tomb of Sargeras",
"enUS",
},
[195119] = {
"Lanzarrayosayos primalista",
"Estanques de Vida Rubí",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
},
[60710] = {
"Subetai the Swift",
"Mogu'shan Vaults",
"enUS",
},
[68294] = {
"S.H.A.R.K. Sapper",
"Lion's Landing",
"enUS",
},
[150712] = {
"Trixie Tazer",
"Operation: Mechagon",
},
[212775] = {
"Vidente ignoto",
"Trono de las Mareas",
"enUS",
},
[186420] = {
"Tejedor terráneo",
"Uldaman: Legado de Tyr",
},
[96574] = {
"Centinela Tronaforjado",
"Salones del Valor",
},
[201261] = {
"Kazzara, the Hellforged",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189235] = {
"Sobrestante Lahar",
"Neltharus",
"enUS",
},
[59175] = {
"Master Archer",
"Pandaria",
"enUS",
},
[75459] = {
"Murciélago apestado",
"Cementerios de Sombraluna",
},
[59303] = {
"Houndmaster Braun",
"Scarlet Halls",
"enUS",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[167998] = {
"Guardián de portal",
"Teatro del Dolor",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[155215] = {
"Faeleaf Lasher",
"Torghast, Tower of the Damned",
},
[61670] = {
"Sik'thik Demolisher",
"Siege of Niuzao Temple",
"enUS",
},
[189492] = {
"Raszageth",
"Vault of the Incarnates",
},
[129527] = {
"Bucanero rata de sentina",
"Puerto Libre",
},
[97081] = {
"Rey Bjorn",
"Salones del Valor",
},
[155219] = {
"Gormling Spitter",
"Torghast, Tower of the Damned",
},
[91002] = {
"Rotdrool Grabber",
"UNKNOWN",
},
[201792] = {
"Ahnzon",
"Dawn of the Infinite",
"enUS",
},
[197169] = {
"Urglan",
"10.0 Dragon Isles",
},
[39665] = {
"Rom'ogg Bonecrusher",
"Blackrock Caverns",
"enUS",
},
[164929] = {
"Aldeana de Tirnenn",
"Nieblas de Tirna Scithe",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
},
[104246] = {
"Guardia de la Guardia Umbría",
"Corte de Estrellas",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[39985] = {
"Mad Prisoner",
"Blackrock Caverns",
"enUS",
},
[50284] = {
"Twilight Zealot",
"Blackrock Caverns",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
"enUS",
},
[168878] = {
"Apestado manipulado",
"Plaga Abrumadora",
},
[58664] = {
"Instructor Chillheart's Phylactery",
"Scholomance",
"enUS",
},
[185656] = {
"Clamaescorias",
"Hondonada Frondacuero",
"enUS",
},
[26731] = {
"Grand Magus Telestra",
"The Nexus",
"enUS",
},
[212779] = {
"Umbraclaw",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[112668] = {
"Infernal Imp",
"Court of Stars",
},
[180392] = {
"Gorgoan Souldrinker",
"Sanctum of Domination",
},
[131667] = {
"Soulbound Goliath",
"Waycrest Manor",
"enUS",
},
[61159] = {
"Greenstone Terror",
"Greenstone Village",
"enUS",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[104247] = {
"Arcanista de la Guardia Umbría",
"Corte de Estrellas",
},
[59368] = {
"Krastinovian Carver",
"Scholomance",
"enUS",
},
[98362] = {
"Troubled Soul",
"Black Rook Hold",
"enUS",
},
[102584] = {
"Malignant Defiler",
"Vault of the Wardens",
"enUS",
},
[84554] = {
"Venom-Crazed Pale One",
"The Everbloom",
},
[201522] = {
"Summitshaper Lorac",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[203825] = {
"Voracious Magma Worm",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[204337] = {
"Entidad desconocida",
"La Cumbre del Vórtice",
"enUS",
},
[97083] = {
"Rey Ranulf",
"Salones del Valor",
},
[212781] = {
"Dreamtalon",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[84550] = {
"Xeri'tac",
"The Everbloom",
},
[190776] = {
"Arcane Commander",
"10.0 Dragon Isles",
},
[176703] = {
"Frostbound Devoted",
"Sanctum of Domination",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
},
[61250] = {
"Sorcerer Mogu",
"Mogu'shan Vaults",
"enUS",
},
[165189] = {
"Чук",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[173633] = {
"Nathrian Archivist",
"Castle Nathria",
},
[184124] = {
"Sentinel Talondras",
"Uldaman: Legacy of Tyr",
"enUS",
},
[198709] = {
"Unstable Earth",
"Vault of the Incarnates",
},
[92350] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[205618] = {
"Thorak Greenscale",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[54701] = {
"Time-Twisted Huntress",
"End Time",
"enUS",
},
[54699] = {
"Time-Twisted Nightsaber",
"End Time",
"enUS",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[208945] = {
"Dwarven Bomber",
"Dawn of the Infinite",
"enUS",
},
[50417] = {
"Bound Flames",
"Blackrock Caverns",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[205619] = {
"Sarek Cinderbreath",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[196671] = {
"Devastador arcano",
"Academia Algeth'ar",
},
[59241] = {
"Scarlet Treasurer",
"Scarlet Halls",
"enUS",
},
[97264] = {
"Hatecoil Shellbreaker",
"Eye of Azshara",
},
[163503] = {
"Éter del abismo",
"Torres de Ascensión",
},
[54512] = {
"Time-Twisted Sentinel",
"End Time",
"enUS",
},
[100539] = {
"Taintheart Deadeye",
"Darkheart Thicket",
"enUS",
},
[81864] = {
"Dreadpetal",
"The Everbloom",
"enUS",
},
[205620] = {
"Malgosa Spellbinder",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[26782] = {
"Crystalline Keeper",
"The Nexus",
"enUS",
},
[171333] = {
"Devota Atal'ai",
"El Otro Lado",
},
[97200] = {
"Seacursed Soulkeeper",
"Maw of Souls",
},
[61928] = {
"Sik'thik Guardian",
"Siege of Niuzao Temple",
"enUS",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[190780] = {
"Arcane Elemental",
"10.0 Dragon Isles",
},
[206140] = {
"Tiempo fusionado",
"El Alba del Infinito",
"enUS",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
},
[208438] = {
"Saboteador Infinito",
"El Alba del Infinito",
"enUS",
},
[195138] = {
"Detonating Crystal",
"The Azure Vault",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
},
[39987] = {
"Evolved Twilight Zealot",
"Blackrock Caverns",
"enUS",
},
[102253] = {
"Understone Demolisher",
"Neltharion's Lair",
"enUS",
},
[62632] = {
"Sik'thik Engineer",
"Siege of Niuzao Temple",
"enUS",
},
[205622] = {
"Krono Sandtongue",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189471] = {
"Herrero qalashi",
"Neltharus",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[54700] = {
"Time-Twisted Nightsaber",
"End Time",
"enUS",
},
[186191] = {
"Portavoz de descomposición",
"Hondonada Frondacuero",
"enUS",
},
[200761] = {
"Wild Ohuna",
"The Nokhud Offensive",
},
[184020] = {
"Rabioso descomunal",
"Uldaman: Legado de Tyr",
"enUS",
},
[176973] = {
"Unstoppable Abomination",
"Sanctum of Domination",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[75899] = {
"Entidad desconocida",
"Cementerios de Sombraluna",
},
[59242] = {
"Woven Boneguard",
"Scholomance",
"enUS",
},
[104251] = {
"Centinela de la Guardia Umbría",
"Corte de Estrellas",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
},
[98366] = {
"Ghostly Retainer",
"Black Rook Hold",
"enUS",
},
[121011] = {
"Tidescale Witch",
"Tomb of Sargeras",
"enUS",
},
[41139] = {
"Naz'jar Spiritmender",
"Throne of the Tides",
"enUS",
},
[203811] = {
"Incarnation of Entropy",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[179269] = {
"Seguridad del oasis",
"Tazavesh, el Mercado Velado",
},
[115767] = {
"Mistress Sassz'ine",
"Tomb of Sargeras",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
},
[61929] = {
"Sik'thik Amber-Weaver",
"Siege of Niuzao Temple",
"enUS",
},
[101437] = {
"Burning Geode",
"UNKNOWN",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
"enUS",
},
[75210] = {
"Bloodmaul Warder",
"Bloodmaul Slag Mines",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[210231] = {
"Tainted Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[208440] = {
"Destripador Infinito",
"El Alba del Infinito",
"enUS",
},
[184132] = {
"Depositario terráneo",
"Uldaman: Legado de Tyr",
},
[168153] = {
"Roc de plaga",
"Plaga Abrumadora",
},
[23682] = {
"El Jinete decapitado",
"Monasterio Escarlata",
},
[62633] = {
"Sik'thik Builder",
"Siege of Niuzao Temple",
"enUS",
},
[92610] = {
"Tamborilero Infrapiedra",
"Guarida de Neltharion",
},
[201788] = {
"Dazhak",
"El Alba del Infinito",
"enUS",
},
[98542] = {
"Amalgam of Souls",
"Black Rook Hold",
"enUS",
},
[208441] = {
"Water Elemental",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[114790] = {
"Viz'aduum the Watcher",
"Return to Karazhan",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
},
[44658] = {
"Deep Murloc Invader",
"Throne of the Tides",
"enUS",
},
[170572] = {
"Aojadora hudú Atal'ai",
"El Otro Lado",
},
[75211] = {
"Magma Lord",
"Bloodmaul Slag Mines",
},
[122850] = {
"Umbral Guard",
"Tomb of Sargeras",
"enUS",
},
[116407] = {
"Harjatan",
"Tomb of Sargeras",
"enUS",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[208698] = {
"Mago de fallas infinitas",
"El Alba del Infinito",
"enUS",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[67919] = {
"Bilgewater Field Medic",
"Lion's Landing",
"enUS",
},
[184911] = {
"Entidad desconocida",
"Plaga Abrumadora",
},
[201790] = {
"Loszkeleth",
"Dawn of the Infinite",
"enUS",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[115640] = {
"Fuming Imp",
"Faronaar",
},
[202814] = {
"Twisted Aberration",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[91332] = {
"Stoneclaw Hunter",
"Neltharion's Lair",
"enUS",
},
[156245] = {
"Grand Automaton",
"Torghast, Tower of the Damned",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
"enUS",
},
[197697] = {
"Pirogarganta",
"Estanques de Vida Rubí",
},
[207177] = {
"Guardián vigía infinito",
"El Alba del Infinito",
"enUS",
},
[81737] = {
"Crecimiento desenfrenado",
"El Sempibrote",
"enUS",
},
[191313] = {
"Volatile Sapling",
"The Azure Vault",
},
[96584] = {
"Immoliant Fury",
"Vault of the Wardens",
},
[79510] = {
"Cackling Pyromaniac",
"Auchindoun",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
},
[92612] = {
"Destructor de Petrofuerza",
"Guarida de Neltharion",
},
[197698] = {
"Tronatesta",
"Estanques de Vida Rubí",
},
[171343] = {
"Matriarca picofiloso",
"El Otro Lado",
},
[208445] = {
"Larodar, Keeper of the Flame",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[170838] = {
"Contrincante implacable",
"Teatro del Dolor",
},
[186696] = {
"Entidad desconocida",
"Uldaman: Legado de Tyr",
},
[99649] = {
"Dreadlord Mendacius",
"Vault of the Wardens",
"enUS",
},
[128435] = {
"Sáurido tóxico",
"Atal'Dazar",
"enUS",
},
[214075] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[95939] = {
"Skrog Tidestomper",
"Eye of Azshara",
},
[97097] = {
"Helarjar Champion",
"Maw of Souls",
},
[59372] = {
"Scarlet Scholar",
"Scarlet Halls",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[129758] = {
"Irontide Grenadier",
"Freehold",
"enUS",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
},
[121399] = {
"Inquisitor Sebilus",
"Tomb of Sargeras",
"enUS",
},
[60397] = {
"Emperor's Strength",
"Mogu'shan Vaults",
"enUS",
},
[155225] = {
"Faeleaf Grovesinger",
"Torghast, Tower of the Damned",
},
[59884] = {
"Fallen Crusader",
"Scarlet Monastery",
"enUS",
},
[120721] = {
"Lunar Archer",
"Tomb of Sargeras",
"enUS",
},
[205638] = {
"Sundered Flame Banner",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
"enUS",
},
[121473] = {
"Coercitor Nixa",
"Tomb of Sargeras",
"enUS",
},
[199748] = {
"Merodeador de la línea temporal",
"El Alba del Infinito",
"enUS",
},
[116410] = {
"Karam Lanzarcana",
"Falla Cicatriz Aterradora - Plataforma de gesta de brujo",
},
[155226] = {
"Verdant Keeper",
"Torghast, Tower of the Damned",
},
[60396] = {
"Emperor's Rage",
"Mogu'shan Vaults",
"enUS",
},
[39990] = {
"Twilight Zealot",
"Blackrock Caverns",
"enUS",
},
[42789] = {
"Stonecore Magmalord",
"The Stonecore",
"enUS",
},
[184908] = {
"Entidad desconocida",
"Plaga Abrumadora",
},
[195399] = {
"Croacito curioso",
"Salas de Infusión",
},
[121400] = {
"Accusator Gnazh",
"Tomb of Sargeras",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
},
[196679] = {
"Frozen Shroud",
"Vault of the Incarnates",
},
[192334] = {
"Graath",
"10.0 Dragon Isles",
},
[77134] = {
"Sargerei Cleric",
"Auchindoun",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
},
[190407] = {
"Furibundo de agua",
"Salas de Infusión",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
},
[59309] = {
"Obedient Hound",
"Scarlet Halls",
"enUS",
},
[59373] = {
"Scarlet Pupil",
"Scarlet Halls",
"enUS",
},
[168022] = {
"Tentáculo de baba",
"Plaga Abrumadora",
},
[59501] = {
"Reanimated Corpse",
"Scholomance",
"enUS",
},
[184910] = {
"Entidad desconocida",
"Plaga Abrumadora",
},
[40633] = {
"Guardia de honor Naz'jar",
"Trono de las Mareas",
"enUS",
},
[187224] = {
"Vil Maleputre",
"Hondonada Frondacuero",
"enUS",
},
[115388] = {
"Rey",
"Regreso a Karazhan",
},
[60033] = {
"Frenzied Spirit",
"Scarlet Monastery",
"enUS",
},
[181546] = {
"Prototype of Renewal",
"Sepulcher of the First Ones",
},
[45620] = {
"Naz'jar Soldier",
"Throne of the Tides",
"enUS",
},
[114626] = {
"Espíritu melancólico",
"Regreso a Karazhan",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
"enUS",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[91792] = {
"Stormwake Hydra",
"Eye of Azshara",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[118715] = {
"Reanimated Templar",
"Tomb of Sargeras",
"enUS",
},
[76407] = {
"Ner'zhul",
"Shadowmoon Burial Grounds",
},
[162729] = {
"Soldado de remendejo",
"La Destrucción Necrótica",
},
[200131] = {
"Sha-Touched Guardian",
"Temple of the Jade Serpent",
"enUS",
},
[185168] = {
"Brute",
"10.0 Dragon Isles",
},
[107073] = {
"Entidad desconocida",
"Corte de Estrellas",
},
[185680] = {
"Reliquia Vy",
"Plaga Abrumadora",
},
[127799] = {
"Dazar'ai Honor Guard",
"Atal'Dazar",
"enUS",
},
[192333] = {
"Águila alfa",
"Academia Algeth'ar",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
},
[115757] = {
"Wrathguard Flamebringer",
"Return to Karazhan",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[177237] = {
"Chains of Damnation",
"Tazavesh, the Veiled Market",
},
[208198] = {
"Whiiskeyz",
"Scarlet Monastery",
},
[173655] = {
"Matriarca de Veloniebla",
"Nieblas de Tirna Scithe",
},
[98246] = {
"Risen Warrior",
"Maw of Souls",
},
[61485] = {
"General Pa'valak",
"Siege of Niuzao Temple",
"enUS",
},
[131436] = {
"Matrona de sangre electa",
"Bardoma",
},
[205384] = {
"Tejetiempo infinita",
"El Alba del Infinito",
"enUS",
},
[191311] = {
"Infinite Whelp",
"Uldaman: Legacy of Tyr",
"enUS",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[60143] = {
"Gara'jal the Spiritbinder",
"Mogu'shan Vaults",
"enUS",
},
[165222] = {
"Curahuesos de Zolramus",
"La Destrucción Necrótica",
},
[77890] = {
"Durag the Dominator",
"Auchindoun",
},
[40634] = {
"Bruja de la tempestad Naz'jar",
"Trono de las Mareas",
"enUS",
},
[194894] = {
"Hablatormentas primalista",
"El Ataque Nokhud",
},
[114628] = {
"Camarero esquelético",
"Regreso a Karazhan",
},
[203594] = {
"Lumbering Boulder",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[115765] = {
"Anulador abstracto",
"Regreso a Karazhan",
},
[185683] = {
"Reliquia Wo",
"Plaga Abrumadora",
},
[40586] = {
"Lady Naz'jar",
"Throne of the Tides",
"enUS",
},
[60398] = {
"Emperor's Courage",
"Mogu'shan Vaults",
"enUS",
},
[77905] = {
"Felborne Abyssal",
"Auchindoun",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
},
[62637] = {
"Cursed Brew",
"Greenstone Village",
"enUS",
},
[189266] = {
"Novato qalashi",
"Neltharus",
"enUS",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[130012] = {
"Devastadora mareaférrea",
"Puerto Libre",
},
[165470] = {
"Nathrian Executor",
"Castle Nathria",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
},
[97068] = {
"Draco de la tormenta",
"Salones del Valor",
},
[194896] = {
"Escudo de tormenta primigenio",
"El Ataque Nokhud",
},
[190034] = {
"Destructor lazollama",
"Estanques de Vida Rubí",
},
[130488] = {
"Mech Jockey",
"The MOTHERLODE!!",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
"enUS",
},
[185685] = {
"Reliquia Urh",
"Plaga Abrumadora",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
},
[114624] = {
"Celador arcano",
"Regreso a Karazhan",
},
[186208] = {
"Acechador putrefaarco",
"Hondonada Frondacuero",
"enUS",
},
[59503] = {
"Brittle Skeleton",
"Scholomance",
"enUS",
},
[213576] = {
"Verdant Boughwalker",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[113971] = {
"Maiden of Virtue",
"Return to Karazhan",
},
[80936] = {
"Granadero Grom'kar",
"Depósito Riel siniestro",
},
[185691] = {
"Hiena sañosa",
"Hondonada Frondacuero",
"enUS",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[119742] = {
"Felguard Invader",
"Tomb of Sargeras",
"enUS",
},
[75452] = {
"Bonemaw",
"Shadowmoon Burial Grounds",
},
[194898] = {
"Primalist Arcblade",
"The Nokhud Offensive",
},
[64446] = {
"Training Dummy",
"Scarlet Monastery",
"enUS",
},
[164705] = {
"Babosa pestilente",
"Plaga Abrumadora",
},
[52019] = {
"Skyfall Star",
"The Vortex Pinnacle",
},
[97219] = {
"Solsten",
"Salones del Valor",
},
[210507] = {
"Stalwart Bristlebruin",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[192340] = {
"Apprentice",
"10.0 Dragon Isles",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
},
[98761] = {
"Goodoption",
"Maw of Souls",
},
[192919] = {
"Gigantic Thresher",
"10.0 Dragon Isles",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[208461] = {
"Scorching Roots",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
},
[83025] = {
"Maestro de batalla Grom'kar",
"Muelles de hierro",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[207438] = {
"Headless Horseman",
"Scarlet Monastery",
"enUS",
},
[164707] = {
"Babosa coagulada",
"Plaga Abrumadora",
},
[42808] = {
"Stonecore Flayer",
"The Stonecore",
"enUS",
},
[95947] = {
"Mak'rana Hardshell",
"Eye of Azshara",
"enUS",
},
[76177] = {
"Soulbinder Nyami",
"Auchindoun",
},
[194389] = {
"Lava Spawn",
"Neltharus",
"enUS",
},
[174175] = {
"Petronato leal",
"Salones de Expiación",
},
[198995] = {
"Chronikar",
"Dawn of the Infinite",
"enUS",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
},
[183707] = {
"Entidad desconocida",
"Sepulcro de los Primeros",
},
[203857] = {
"Bruja de la Horda",
"El Alba del Infinito",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
},
[198868] = {
"Tessitore Elettrico Primalista",
"Segrete delle Incarnazioni",
},
[100713] = {
"Rockbait Fisher",
"Neltharion's Lair",
"enUS",
},
[151659] = {
"Rocket Tonk",
"Operation: Mechagon",
},
[198996] = {
"Manifested Timeways",
"Dawn of the Infinite",
"enUS",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
},
[170850] = {
"Cuernosangre enfurecido",
"Teatro del Dolor",
},
[201560] = {
"Primalist Flamecaller",
"Vault of the Incarnates",
},
[208208] = {
"Alliance Destroyer",
"Dawn of the Infinite",
"enUS",
},
[190359] = {
"Skulking Zealot",
"Halls of Infusion",
},
[60400] = {
"Jan-xi",
"Mogu'shan Vaults",
"enUS",
},
[196694] = {
"Hurgador arcano",
"Academia Algeth'ar",
},
[198997] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
"enUS",
},
[131009] = {
"Entidad desconocida",
"Atal'Dazar",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[195927] = {
"Cosechadora de almas Galtmaa",
"El Ataque Nokhud",
},
[210512] = {
"Ashen Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[61183] = {
"Belligerent Blossom",
"Greenstone Village",
"enUS",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[198998] = {
"Tyr, the Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[81236] = {
"Técnico de Riel siniestro",
"Depósito Riel siniestro",
},
[185181] = {
"Automated Eliminator",
"Sepulcher of the First Ones",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
},
[195928] = {
"Cosechador de almas Duuren",
"El Ataque Nokhud",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
},
[188252] = {
"Melidrussa Chillworn",
"Ruby Life Pools",
},
[59191] = {
"Commander Lindon",
"Pandaria",
"enUS",
},
[198999] = {
"Morchie",
"Dawn of the Infinite",
"enUS",
},
[26722] = {
"Azure Magus",
"The Nexus",
"enUS",
},
[154744] = {
"Monstruosidad tóxica",
"Operación: Mecalópolis",
},
[203861] = {
"Destructor de la Horda",
"El Alba del Infinito",
},
[195929] = {
"Cosechadora de almas Tumen",
"El Ataque Nokhud",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186206] = {
"Bonecrusher",
"Brackenhide Hollow",
"enUS",
},
[83028] = {
"Grom'kar Deadeye",
"Iron Docks",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
},
[190206] = {
"Danzallamas primalista",
"Estanques de Vida Rubí",
},
[199718] = {
"Nokhud Huntmaster",
"The Nokhud Offensive",
},
[195930] = {
"Cosechador de almas Mandakh",
"El Ataque Nokhud",
},
[98384] = {
"Razormouth",
"Neltharion's Lair",
"enUS",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[165137] = {
"Guardián de Zolramus",
"La Destrucción Necrótica",
},
[102095] = {
"Lancero resucitado",
"Fuerte Torre Oscura",
"enUS",
},
[129602] = {
"Agente mareaférrea",
"Puerto Libre",
},
[187231] = {
"Wither Biter",
"Brackenhide Hollow",
"enUS",
},
[58674] = {
"Angry Hound",
"Pandaria",
"enUS",
},
[171887] = {
"Bufé limoso",
"Plaga Abrumadora",
},
[187999] = {
"Shrieking Whelp",
"The Azure Vault",
},
[60913] = {
"Energy Charge",
"Mogu'shan Vaults",
"enUS",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
},
[163746] = {
"Walkie Shockie X1",
"Operation: Mechagon",
},
[45704] = {
"Lurking Tempest",
"The Vortex Pinnacle",
},
[193373] = {
"Puñotrueno nokhud",
"El Ataque Nokhud",
},
[42810] = {
"Crystalspawn Giant",
"The Stonecore",
"enUS",
},
[166396] = {
"Hostigador noble",
"Profundidades Sanguíneas",
},
[116549] = {
"Cantante de soporte",
"Regreso a Karazhan",
},
[184954] = {
"Ancient Shaper",
"Sepulcher of the First Ones",
},
[100526] = {
"Tormented Bloodseeker",
"Darkheart Thicket",
"enUS",
},
[120158] = {
"Volatile Corruption",
"Tomb of Sargeras",
"enUS",
},
[200035] = {
"Carrion Worm",
"Shadowmoon Burial Grounds",
},
[187242] = {
"Tarasek Looter",
"The Azure Vault",
},
[129599] = {
"Cutwater Knife Juggler",
"Freehold",
"enUS",
},
[196712] = {
"Nullification Device",
"Halls of Infusion",
},
[210518] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[208727] = {
"Guardian Ordan",
"10.2. Nighthold",
"enUS",
},
[115020] = {
"Arcánido",
"Regreso a Karazhan",
},
[87252] = {
"Ogron rebelde",
"Muelles de hierro",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
},
[118728] = {
"Ghastly Bonewarden",
"Tomb of Sargeras",
"enUS",
},
[120516] = {
"Razorjaw Swiftfin",
"Tomb of Sargeras",
"enUS",
},
[167532] = {
"Heavin el destructor",
"Teatro del Dolor",
},
[60402] = {
"Zandalari Fire-Dancer",
"Mogu'shan Vaults",
"enUS",
},
[26793] = {
"Crystalline Frayer",
"The Nexus",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[26729] = {
"Steward",
"The Nexus",
"enUS",
},
[83616] = {
"Zoggosh",
"Iron Docks",
},
[129600] = {
"Rata de sentina escamasalada",
"Puerto Libre",
},
[197982] = {
"Storm Warrior",
"Ruby Life Pools",
"enUS",
},
[167533] = {
"Adventa Nuncamás",
"Teatro del Dolor",
},
[208729] = {
"Astromancer's Guard",
"10.2. Nighthold",
"enUS",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
"enUS",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
},
[104273] = {
"Jazshariu",
"Corte de Estrellas",
},
[65522] = {
"Bubble Shield",
"Stormstout Brewery",
"enUS",
},
[102094] = {
"Espadachín resucitado",
"Fuerte Torre Oscura",
"enUS",
},
[167534] = {
"Rek la curtida",
"Teatro del Dolor",
},
[114632] = {
"Auxiliar espectral",
"Regreso a Karazhan",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
},
[26723] = {
"Keristrasza",
"The Nexus",
"enUS",
},
[196971] = {
"Rendvith",
"10.0 Dragon Isles",
},
[129601] = {
"Cutwater Harpooner",
"Freehold",
"enUS",
},
[206172] = {
"Nymue",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[168425] = {
"Forsworn Annihilator",
"Spires of Ascension",
},
[205158] = {
"Spurlok, Centinela vetusta",
"El Alba del Infinito",
"enUS",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[99664] = {
"Restless Soul",
"Black Rook Hold",
"enUS",
},
[101839] = {
"Risen Companion",
"Black Rook Hold",
"enUS",
},
[114249] = {
"Volatile Energy",
"Return to Karazhan",
},
[197985] = {
"Canalizador de llamas",
"Estanques de Vida Rubí",
},
[104270] = {
"Ensamblaje de los Guardianes",
"Corte de Estrellas",
},
[114633] = {
"Valet espectral",
"Regreso a Karazhan",
},
[194816] = {
"Monstruosidad de la forja",
"Neltharus",
"enUS",
},
[135552] = {
"Entidad desconocida",
"Mansión Tarjasenda",
"enUS",
},
[208521] = {
"Pumpkin Soldier",
"Scarlet Monastery",
"enUS",
},
[167607] = {
"Mutilador petronato",
"Salones de Expiación",
},
[58676] = {
"Scarlet Defender",
"Scarlet Halls",
"enUS",
},
[115401] = {
"Alfil",
"Regreso a Karazhan",
},
[42428] = {
"Devout Follower",
"The Stonecore",
"enUS",
},
[111563] = {
"Guardia de la Guardia Umbría",
"Corte de Estrellas",
},
[150146] = {
"Chamán huesudo",
"Operación: Mecalópolis",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[197219] = {
"Azotador vil",
"Academia Algeth'ar",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
},
[40765] = {
"Commander Ulthok",
"Throne of the Tides",
"enUS",
},
[171376] = {
"Custodio en jefe Javlin",
"Profundidades Sanguíneas",
},
[208478] = {
"Volcoross",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[114634] = {
"Sirviente inmortal",
"Regreso a Karazhan",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
},
[205152] = {
"Lerai, Doncella vetusta",
"El Alba del Infinito",
"enUS",
},
[205408] = {
"Cercenador del Tiempo Infinito",
"El Alba del Infinito",
"enUS",
},
[104275] = {
"Imacu'tya",
"Corte de Estrellas",
},
[166301] = {
"Acechador de Veloniebla",
"Nieblas de Tirna Scithe",
},
[115402] = {
"Alfil",
"Regreso a Karazhan",
},
[179821] = {
"Comandante Zo'far",
"Tazavesh, el Mercado Velado",
},
[198500] = {
"Invocatrice della Terra del Concilio",
"Segrete delle Incarnazioni",
},
[40008] = {
"Lucky",
"Blackrock Caverns",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
},
[171799] = {
"Celador de las profundidades",
"Profundidades Sanguíneas",
},
[150396] = {
"Aerial Unit R-21/X",
"Operation: Mechagon",
},
[183404] = {
"Eternal Assembler",
"Sepulcher of the First Ones",
},
[167536] = {
"Harugia la sanguinaria",
"Teatro del Dolor",
},
[196198] = {
"Algeth'ar Security",
"Algeth'ar Academy",
},
[198501] = {
"Invocatrice del Ghiaccio del Concilio",
"Segrete delle Incarnazioni",
},
[43391] = {
"Millhouse Manastorm",
"The Stonecore",
"enUS",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
},
[115019] = {
"Viuda Bruma Fría",
"Regreso a Karazhan",
},
[100818] = {
"Bellowing Idol",
"Neltharion's Lair",
},
[207969] = {
"Asaltante de la Horda",
"El Alba del Infinito",
},
[101074] = {
"Vástago de engendro de odio ",
"Matorral Corazón Oscuro",
"enUS",
},
[188011] = {
"Primal Terrasentry",
"Ruby Life Pools",
"enUS",
},
[198502] = {
"Invocatempeste del Concilio",
"Segrete delle Incarnazioni",
},
[180335] = {
"Contrabandista del cártel",
"Tazavesh, el Mercado Velado",
},
[134024] = {
"Cresa devoradora",
"Mansión Tarjasenda",
"enUS",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
},
[176535] = {
"Infused Goliath",
"Sanctum of Domination",
},
[59789] = {
"Thalnos the Soulrender",
"Scarlet Monastery",
"enUS",
},
[196970] = {
"Taranthiza",
"10.0 Dragon Isles",
},
[196200] = {
"Agente de Algeth'ar",
"Academia Algeth'ar",
},
[114636] = {
"Aparición de custodio",
"Regreso a Karazhan",
},
[180336] = {
"Mafioso del cártel",
"Tazavesh, el Mercado Velado",
},
[168310] = {
"Roc de plaga",
"Plaga Abrumadora",
},
[150143] = {
"Picador huesudo",
"Operación: Mecalópolis",
},
[81638] = {
"Aqueous Globule",
"The Everbloom",
"enUS",
},
[98900] = {
"Wyrmtongue Trickster",
"Black Rook Hold",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
},
[187767] = {
"Embar Firepath",
"Vault of the Incarnates",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
},
[97365] = {
"Seacursed Mistmender",
"Maw of Souls",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[39679] = {
"Corla, Herald of Twilight",
"Blackrock Caverns",
"enUS",
},
[166299] = {
"Cuidadora de Veloniebla",
"Nieblas de Tirna Scithe",
},
[98406] = {
"Escorpión Cascarascuas",
"Guarida de Neltharion",
},
[104274] = {
"Baalgar el Atento",
"Corte de Estrellas",
},
[126919] = {
"Clamatormentas mareaférrea",
"Puerto Libre",
},
[174197] = {
"Ritualista del campo de batalla",
"Teatro del Dolor",
},
[56439] = {
"Sha of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[201320] = {
"Rashok",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
},
[56631] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[154018] = {
"Prisonbreak Mauler",
"Torghast, Tower of the Damned",
},
[196203] = {
"Algeth'ar Nurse",
"Algeth'ar Academy",
},
[135049] = {
"Cuervo alatemible",
"Mansión Tarjasenda",
"enUS",
},
[122851] = {
"Umbral Archer",
"Tomb of Sargeras",
"enUS",
},
[58998] = {
"Scarlet Defender",
"Scarlet Halls",
"enUS",
},
[113998] = {
"Destructor de Petrofuerza",
"Guarida de Neltharion",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[120651] = {
"Entidad desconocida",
"Plaga Abrumadora",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
},
[168058] = {
"Pluma imbuida",
"Profundidades Sanguíneas",
},
[196972] = {
"Korvelnor",
"10.0 Dragon Isles",
},
[171384] = {
"Escriba investigadora",
"Profundidades Sanguíneas",
},
[154663] = {
"Gnome-Eating Droplet",
"Operation: Mechagon",
},
[136330] = {
"Entidad desconocida",
"Mansión Tarjasenda",
"enUS",
},
[115406] = {
"Caballo",
"Regreso a Karazhan",
},
[189555] = {
"Arcane Attendant",
"The Azure Vault",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[157824] = {
"Protector de la llama",
"Castillo de Colmillo Oscuro",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
},
[39616] = {
"Naz'jar Invader",
"Throne of the Tides",
"enUS",
},
[201579] = {
"Magmorax",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[134284] = {
"Portavoz de la muerte caído",
"Bardoma",
},
[107435] = {
"Noble sospechoso",
"Corte de Estrellas",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
},
[104918] = {
"Vigilant Duskwatch",
"Court of Stars",
},
[67814] = {
"Bloodhilt Grunt",
"Lion's Landing",
"enUS",
},
[168572] = {
"Hongos de asalto",
"Plaga Abrumadora",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[173178] = {
"Stone Legion Goliath",
"Castle Nathria",
},
[212327] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[180840] = {
"Frostbound Devoted",
"Sanctum of Domination",
},
[75715] = {
"Reanimated Ritual Bones",
"Shadowmoon Burial Grounds",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[186740] = {
"Ensamblaje arcano",
"La Bóveda Azur",
},
[213607] = {
"Múrloc de las profundidades",
"Trono de las Mareas",
"enUS",
},
[61174] = {
"Cursed Jade",
"Greenstone Village",
"enUS",
},
[95833] = {
"Hyrja",
"Halls of Valor",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
},
[104277] = {
"Can de la Legión",
"Corte de Estrellas",
},
[186229] = {
"Roble marchito",
"Hondonada Frondacuero",
},
[154015] = {
"Escaped Ritualist",
"Torghast, Tower of the Damned",
},
[168318] = {
"Goliat Rechazado",
"Torres de Ascensión",
},
[200840] = {
"Flamebound Huntsman",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[76259] = {
"Felguard",
"Auchindoun",
},
[195697] = {
"Thunderbeast Rider",
"The Nokhud Offensive",
},
[183671] = {
"Monstrous Soul",
"Sepulcher of the First Ones",
},
[163457] = {
"Vanguardia Rechazada",
"Torres de Ascensión",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[211306] = {
"Fiery Vines",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[165529] = {
"Coleccionista depravada",
"Salones de Expiación",
},
[164737] = {
"Emboscador de la colonia",
"Plaga Abrumadora",
},
[183416] = {
"Bound Realmbreaker",
"Sepulcher of the First Ones",
},
[185147] = {
"Stormcaller",
"10.0 Dragon Isles",
},
[104278] = {
"Sicario vínculo vil",
"Corte de Estrellas",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[59705] = {
"Scarlet Flamethrower",
"Scarlet Monastery",
"enUS",
},
[76260] = {
"Cackling Pyromaniac",
"Auchindoun",
},
[190362] = {
"Libélula deslumbrante",
"Salas de Infusión",
},
[99033] = {
"Helarjar Mistcaller",
"Maw of Souls",
},
[163459] = {
"Ensalmador Rechazado",
"Torres de Ascensión",
},
[180091] = {
"Can del Núcleo anciano",
"Tazavesh, el Mercado Velado",
},
[61623] = {
"Sap Globule",
"Siege of Niuzao Temple",
"enUS",
},
[40577] = {
"Centinela Naz'jar",
"Trono de las Mareas",
"enUS",
},
[150154] = {
"Saurolisco mascahuesos",
"Operación: Mecalópolis",
},
[58555] = {
"Scarlet Fanatic",
"Scarlet Monastery",
"enUS",
},
[185465] = {
"Wardog",
"10.0 Dragon Isles",
},
[102104] = {
"Enslaved Shieldmaiden",
"Maw of Souls",
},
[102232] = {
"Trampero rocoso",
"Guarida de Neltharion",
},
[116689] = {
"Atrigan",
"Tomb of Sargeras",
"enUS",
},
[180348] = {
"Fortachón del cártel",
"Tazavesh, el Mercado Velado",
},
[166275] = {
"Modelador de Veloniebla",
"Nieblas de Tirna Scithe",
},
[168578] = {
"Fungimántico",
"Plaga Abrumadora",
},
[45572] = {
"Howling Gale",
"The Vortex Pinnacle",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[165010] = {
"Babosa coagulada",
"Plaga Abrumadora",
},
[165764] = {
"Rockbound Vanquisher",
"Castle Nathria",
},
[196202] = {
"Educador de Algeth'ar",
"Academia Algeth'ar",
},
[166276] = {
"Guardián de Veloniebla",
"Nieblas de Tirna Scithe",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
},
[170882] = {
"Mago de huesos",
"Teatro del Dolor",
},
[195820] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
},
[183173] = {
"Guardanegra jurafauces",
"Las Tierras de las Sombras",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
},
[95834] = {
"Místico Valarjar",
"Salones del Valor",
},
[184444] = {
"Oppressive Artificer",
"10.0 Dragon Isles",
},
[199029] = {
"Cyclas",
"Vault of the Incarnates",
},
[150160] = {
"Matón huesudo",
"Operación: Mecalópolis",
},
[42691] = {
"Stonecore Rift Conjurer",
"The Stonecore",
"enUS",
},
[78437] = {
"Gul'kosh",
"Auchindoun",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
},
[56762] = {
"Yu'lon",
"Temple of the Jade Serpent",
"enUS",
},
[202612] = {
"Cliffkeeper Bouldani",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[174210] = {
"Escupidor de lodo contagiado",
"Teatro del Dolor",
},
[114783] = {
"Doncella reformada",
"Regreso a Karazhan",
},
[201333] = {
"Awakened Avalanche",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[168837] = {
"Sigilaria",
"Plaga Abrumadora",
},
[59193] = {
"Boneweaver",
"Scholomance",
"enUS",
},
[167566] = {
"Asesina alatétrica",
"Castillo Nathria",
},
[116563] = {
"Ancient Core Hound",
"Return to Karazhan",
},
[116691] = {
"Belac",
"Tomb of Sargeras",
"enUS",
},
[76104] = {
"Araña cadáver monstruosa",
"Cementerios de Sombraluna",
},
[183412] = {
"Dominated Saboteur",
"Sepulcher of the First Ones",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
},
[76263] = {
"Sargerei Magus",
"Auchindoun",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[210290] = {
"Firelands Flameguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[179841] = {
"Veterano lanzachispa",
"Tazavesh, el Mercado Velado",
},
[26918] = {
"Chaotic Rift",
"The Nexus",
"enUS",
},
[190588] = {
"Tectonic Crusher",
"Vault of the Incarnates",
},
[74571] = {
"Calamity",
"Bloodmaul Slag Mines",
},
[99676] = {
"Mogu'shan Secret-Keeper",
"Vault of the Wardens",
"enUS",
},
[186246] = {
"Buitre desgarrador",
"Hondonada Frondacuero",
"enUS",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
},
[173714] = {
"Noctiflor de Veloniebla",
"Nieblas de Tirna Scithe",
},
[179842] = {
"Agente comercial",
"Tazavesh, el Mercado Velado",
},
[74349] = {
"Bloodmaul Magma Binder",
"Bloodmaul Slag Mines",
},
[67692] = {
"Thaumaturge Saresse",
"Lion's Landing",
"enUS",
},
[210293] = {
"Firelands Destroyer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[122965] = {
"Vol'kaal",
"Atal'Dazar",
"enUS",
},
[134041] = {
"Infected Peasant",
"Waycrest Manor",
"enUS",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
},
[150169] = {
"Acechador tóxico",
"Operación: Mecalópolis",
},
[66413] = {
"Yeasty Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[28231] = {
"Crystalline Tender",
"The Nexus",
"enUS",
},
[122967] = {
"Priestess Alun'za",
"Atal'Dazar",
"enUS",
},
[40579] = {
"Deep Murloc Hunter",
"Throne of the Tides",
"enUS",
},
[190345] = {
"Geomante primalista",
"Salas de Infusión",
},
[95843] = {
"Rey Haldor",
"Salones del Valor",
},
[114262] = {
"Attumen the Huntsman",
"Return to Karazhan",
},
[67309] = {
"Dreadguard Cavalry",
"Lion's Landing",
"enUS",
},
[165515] = {
"Filoscuro depravado",
"Salones de Expiación",
},
[126928] = {
"Corsario mareaférrea",
"Puerto Libre",
},
[88163] = {
"Vidente cinéreo Grom'kar",
"Depósito Riel siniestro",
},
[133345] = {
"Feckless Assistant",
"The MOTHERLODE!!",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
"enUS",
},
[150165] = {
"Elemental de baba",
"Operación: Mecalópolis",
},
[45917] = {
"Príncipe de las Nubes",
"La Cumbre del Vórtice",
},
[210294] = {
"Flamespreader",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[95832] = {
"Doncella escudera Valarjar",
"Salones del Valor",
},
[186242] = {
"Skulking Gutstabber",
"Brackenhide Hollow",
"enUS",
},
[96611] = {
"Toro Uñainquina",
"Salones del Valor",
},
[165251] = {
"Entidad desconocida",
"Nieblas de Tirna Scithe",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[186615] = {
"The Raging Tempest",
"The Nokhud Offensive",
},
[179334] = {
"Portalmancer Zo'dahh",
"Tazavesh, the Veiled Market",
},
[210295] = {
"Flamewaker Infernoguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[79720] = {
"Explotador Grom'kar",
"Depósito Riel siniestro",
},
[60410] = {
"Elegon",
"Mogu'shan Vaults",
"enUS",
},
[122963] = {
"Rezan",
"Atal'Dazar",
"enUS",
},
[96480] = {
"Viletongue Belcher",
"Vault of the Wardens",
"enUS",
},
[96608] = {
"Huargo Garra de ébano",
"Salones del Valor",
},
[199549] = {
"Flamesworn Herald",
"Vault of the Incarnates",
},
[58683] = {
"Scarlet Myrmidon",
"Scarlet Halls",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
"enUS",
},
[184453] = {
"Brutal Motivator",
"10.0 Dragon Isles",
},
[176521] = {
"Stygian Abductor",
"Sanctum of Domination",
},
[205435] = {
"Destripador de época",
"El Alba del Infinito",
"enUS",
},
[205691] = {
"Creación de Iridikron",
"El Alba del Infinito",
"enUS",
},
[114264] = {
"Midnight",
"Return to Karazhan",
},
[114261] = {
"Toe Knee",
"Return to Karazhan",
},
[130896] = {
"Blackout Barrel",
"Freehold",
"enUS",
},
[61434] = {
"Sik'thik Vanguard",
"Siege of Niuzao Temple",
"enUS",
},
[77133] = {
"Sargerei Hoplite",
"Auchindoun",
},
[92387] = {
"Drums of War",
"Neltharion's Lair",
},
[26727] = {
"Mage Hunter Ascendant",
"The Nexus",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[197799] = {
"Instillatore della Cava",
"Segrete delle Incarnazioni",
},
[59771] = {
"Zombified Corpse",
"Pandaria",
"enUS",
},
[79852] = {
"Oshir",
"Iron Docks",
},
[190340] = {
"Defensora refti",
"Salas de Infusión",
},
[114522] = {
"Mrs. Cauldrons",
"Return to Karazhan",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
},
[150168] = {
"Monstruosidad tóxica",
"Operación: Mecalópolis",
},
[81983] = {
"Verdant Mandragora",
"The Everbloom",
},
[95842] = {
"Clamatruenos Valarjar",
"Salones del Valor",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
},
[77803] = {
"Railmaster Rocketspark",
"Grimrail Depot",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[60731] = {
"Undying Shadows",
"Mogu'shan Vaults",
"enUS",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[189318] = {
"Oso infectado",
"Hondonada Frondacuero",
"enUS",
},
[58684] = {
"Scarlet Scourge Hewer",
"Scarlet Halls",
"enUS",
},
[115417] = {
"Rata",
"Regreso a Karazhan",
},
[183945] = {
"Unstable Matter",
"Sepulcher of the First Ones",
},
[190342] = {
"Aparato de contención",
"Salas de Infusión",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
"enUS",
},
[58876] = {
"Starving Hound",
"Pandaria",
"enUS",
},
[42692] = {
"Stonecore Bruiser",
"The Stonecore",
"enUS",
},
[58319] = {
"Lesser Sha",
"Temple of the Jade Serpent",
"enUS",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
},
[116569] = {
"Razorjaw Wavemender",
"Tomb of Sargeras",
"enUS",
},
[200836] = {
"Obsidian Guard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[56637] = {
"Ook-Ook",
"Stormstout Brewery",
"enUS",
},
[131492] = {
"Sacerdote de sangre devoto",
"Bardoma",
},
[168594] = {
"Centinela de la cámara",
"Profundidades Sanguíneas",
},
[111068] = {
"Archmage Galeorn",
"Black Rook Hold",
},
[77130] = {
"Sargerei Ritualist",
"Auchindoun",
},
[196992] = {
"Arcane Elemental",
"10.0 Dragon Isles",
},
[76466] = {
"Psyfiend",
"Auchindoun",
},
[80875] = {
"Bombsquad",
"Iron Docks",
},
[163458] = {
"Castigadora Rechazada",
"Torres de Ascensión",
},
[178824] = {
"Borr-Gahn",
"Sanctum of Domination",
},
[130522] = {
"Freehold Shipmate",
"Freehold",
"enUS",
},
[197509] = {
"Primal Thundercloud",
"Ruby Life Pools",
},
[199812] = {
"Zaqali Wallclimber",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
},
[115407] = {
"Torre",
"Regreso a Karazhan",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[153755] = {
"Naeno Megacrash",
"Operation: Mechagon",
},
[154011] = {
"Armed Prisoner",
"Torghast, Tower of the Damned",
},
[179852] = {
"Soulless Vengeance",
"The Shadowlands",
},
[154758] = {
"Monstruosidad tóxica",
"Operación: Mecalópolis",
},
[58685] = {
"Scarlet Evangelist",
"Scarlet Halls",
"enUS",
},
[115419] = {
"Ancient Tome",
"Return to Karazhan",
},
[177808] = {
"Sobrestante acorazado",
"Tazavesh, el Mercado Velado",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[204931] = {
"Fyrakk",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[164506] = {
"Capitán antiguo",
"Teatro del Dolor",
},
[120153] = {
"Eonic Defender",
"Tomb of Sargeras",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[97197] = {
"Purificador Valarjar",
"Salones del Valor",
},
[202613] = {
"Portalkeeper Cimbra",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[183424] = {
"Caballero virtuoso",
"Regreso a Karazhan",
},
[61436] = {
"Sik'thik Bladedancer",
"Siege of Niuzao Temple",
"enUS",
},
[122968] = {
"Yazma",
"Atal'Dazar",
"enUS",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[26728] = {
"Mage Hunter Initiate",
"The Nexus",
"enUS",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
},
[26792] = {
"Crystalline Protector",
"The Nexus",
"enUS",
},
[114260] = {
"Mrrgria",
"Return to Karazhan",
},
[99675] = {
"Enormous Stone Quilen",
"Vault of the Wardens",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
},
[210288] = {
"Ancient Core Hound",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[186658] = {
"Geomante grutacanto",
"Uldaman: Legado de Tyr",
},
[116562] = {
"Flamewaker Centurion",
"Return to Karazhan",
},
[150292] = {
"Caballería de Mecalópolis",
"Operación: Mecalópolis",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[202375] = {
"Zskarn",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[188302] = {
"Reconfiguration Emitter",
"Castle Nathria",
},
[77935] = {
"Sargerei Warden",
"Auchindoun",
},
[98533] = {
"Foul Mother",
"Vault of the Wardens",
"enUS",
},
[56511] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
"enUS",
},
[81279] = {
"Grom'kar Flameslinger",
"Iron Docks",
},
[109908] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[206214] = {
"Infiltrado Infinito",
"El Alba del Infinito",
"enUS",
},
[117596] = {
"Razorjaw Gladiator",
"Tomb of Sargeras",
"enUS",
},
[40584] = {
"Naz'jar Invader",
"Throne of the Tides",
"enUS",
},
[101476] = {
"Molten Charskin",
"Neltharion's Lair",
},
[154016] = {
"Prisonbreak Soulmender",
"Torghast, Tower of the Damned",
},
[195696] = {
"Truenobestia primalista",
"El Ataque Nokhud",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
},
[186741] = {
"Elemental arcano",
"La Bóveda Azur",
},
[114526] = {
"Suplente fantasmal",
"Regreso a Karazhan",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[122970] = {
"Acechador de hoja de las sombras",
"Atal'Dazar",
"enUS",
},
[59518] = {
"Bloated Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
},
[83389] = {
"Escupefuego Alahierro",
"Muelles de hierro",
},
[186739] = {
"Azureblade",
"The Azure Vault",
},
[173720] = {
"Garganta sangrienta de Veloniebla",
"Nieblas de Tirna Scithe",
},
[135052] = {
"Sapo de añublo",
"Mansión Tarjasenda",
"enUS",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
},
[105699] = {
"Sable de maná",
"Corte de Estrellas",
},
[214117] = {
"Entidad desconocida",
"Trono de las Mareas",
"enUS",
},
[62205] = {
"Wing Leader Ner'onok",
"Siege of Niuzao Temple",
"enUS",
},
[186226] = {
"Cantoputre fétida",
"Hondonada Frondacuero",
"enUS",
},
[75506] = {
"Partidaria de Sombraluna",
"Cementerios de Sombraluna",
},
[116574] = {
"Silver Forks",
"Return to Karazhan",
},
[186737] = {
"Telash Greywing",
"The Azure Vault",
},
[122971] = {
"Gigante Dazar'ai",
"Atal'Dazar",
"enUS",
},
[56448] = {
"Wise Mari",
"Temple of the Jade Serpent",
"enUS",
},
[164510] = {
"Ballestero desgarbado",
"Teatro del Dolor",
},
[209800] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[74355] = {
"Captured Miner",
"Bloodmaul Slag Mines",
},
[40447] = {
"Chains of Woe",
"Blackrock Caverns",
"enUS",
},
[177816] = {
"Especialista en interrogatorios",
"Tazavesh, el Mercado Velado",
},
[64947] = {
"Mogu'shan Warden",
"Mogu'shan Vaults",
"enUS",
},
[84978] = {
"Bloodmaul Enforcer",
"Bloodmaul Slag Mines",
},
[166302] = {
"Cosechador de cadáveres",
"La Destrucción Necrótica",
},
[42695] = {
"Stonecore Sentry",
"The Stonecore",
"enUS",
},
[135048] = {
"Gorestained Piglet",
"Waycrest Manor",
"enUS",
},
[187246] = {
"Nullmagic Hornswog",
"The Azure Vault",
},
[114329] = {
"Luminore",
"Return to Karazhan",
},
[177817] = {
"Oficial de apoyo",
"Tazavesh, el Mercado Velado",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[41096] = {
"Oráculo Naz'jar",
"Trono de las Mareas",
"enUS",
},
[129369] = {
"Irontide Raider",
"Siege of Boralus",
},
[144298] = {
"Robot de defensa Mk III",
"Operación: Mecalópolis",
},
[74356] = {
"Captured Miner",
"Bloodmaul Slag Mines",
},
[186220] = {
"Moldeadora frondacuero",
"Hondonada Frondacuero",
"enUS",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[99922] = {
"Ebonclaw Packmate",
"Halls of Valor",
},
[64061] = {
"Mogu'shan Warden",
"Mogu'shan Vaults",
"enUS",
},
[166304] = {
"Aguijonero de Veloniebla",
"Nieblas de Tirna Scithe",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[130521] = {
"Freehold Deckhand",
"Freehold",
"enUS",
},
[101991] = {
"Criatura de Pesadilla",
"Matorral Corazón Oscuro",
"enUS",
},
[208734] = {
"Senior Researcher Alydrus",
"10.2. Nighthold",
"enUS",
},
[167538] = {
"Dokigg el demoledor",
"Teatro del Dolor",
},
[102375] = {
"Runecarver Slave",
"Maw of Souls",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
"enUS",
},
[211339] = {
"Dream Seedling",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[114251] = {
"Galindre",
"Return to Karazhan",
},
[74357] = {
"Captured Miner",
"Bloodmaul Slag Mines",
},
[175517] = {
"Symbiotic Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[190128] = {
"Zul'gamux",
"Regreso a Karazhan",
},
[191847] = {
"Pisallanuras nokhud",
"El Ataque Nokhud",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
},
[85232] = {
"Entidad desconocida",
"El Sempibrote",
},
[42696] = {
"Stonecore Warbringer",
"The Stonecore",
"enUS",
},
[144301] = {
"Living Waste",
"Operation: Mechagon",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[77812] = {
"Sargerei Soulbinder",
"Auchindoun",
},
[47238] = {
"Whipping Wind",
"The Vortex Pinnacle",
},
[61567] = {
"Vizier Jin'bak",
"Siege of Niuzao Temple",
"enUS",
},
[187033] = {
"Putrealiento",
"Hondonada Frondacuero",
"enUS",
},
[129598] = {
"Freehold Pack Mule",
"Freehold",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[76284] = {
"Spiteful Arbiter",
"Auchindoun",
},
[97259] = {
"Blazing Hydra Spawn",
"Eye of Azshara",
"enUS",
},
[184140] = {
"Acólito de Xy",
"Sepulcro de los Primeros",
},
[105703] = {
"Mana Wyrm",
"Court of Stars",
},
[39994] = {
"Conflagration",
"Blackrock Caverns",
"enUS",
},
[128551] = {
"Mastín mareaférrea",
"Puerto Libre",
},
[115395] = {
"Reina",
"Regreso a Karazhan",
},
[129547] = {
"Manopla dientenegro",
"Puerto Libre",
},
[173729] = {
"Manifestation of Pride",
"Halls of Atonement",
},
[122847] = {
"Umbral Priestess",
"Tomb of Sargeras",
"enUS",
},
[170147] = {
"Recuerdo volátil",
"El Otro Lado",
},
[175205] = {
"Baleful Shadow",
"Castle Nathria",
},
[83026] = {
"Maestro de asedio Olugar",
"Muelles de hierro",
},
[59184] = {
"Jandice Barov",
"Scholomance",
"enUS",
},
[114792] = {
"Virtuous Lady",
"Return to Karazhan",
},
[193944] = {
"Lavamante qalashi",
"Neltharus",
"enUS",
},
[40825] = {
"Erunak Stonespeaker",
"Throne of the Tides",
"enUS",
},
[97260] = {
"Arcane Hydra Spawn",
"Eye of Azshara",
"enUS",
},
[189233] = {
"Caustic Spiderling",
"Vault of the Incarnates",
},
[105704] = {
"Manifestación Arcana",
"Corte de Estrellas",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
},
[184539] = {
"Automated Eliminator",
"Sepulcher of the First Ones",
},
[79508] = {
"Felborne Abyssal",
"Auchindoun",
},
[60399] = {
"Qin-xi",
"Mogu'shan Vaults",
"enUS",
},
[167963] = {
"Cliente sin cabeza",
"El Otro Lado",
},
[169893] = {
"Hablaoscuro nefario",
"Teatro del Dolor",
},
[77131] = {
"Sargerei Spirit-Tender",
"Auchindoun",
},
[59521] = {
"Bubbling Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[26730] = {
"Mage Slayer",
"The Nexus",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[26794] = {
"Ormorok the Tree-Shaper",
"The Nexus",
"enUS",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
},
[171557] = {
"Shade of Bargast",
"Castle Nathria",
},
[74579] = {
"Molten Elemental",
"Bloodmaul Slag Mines",
},
[64063] = {
"Mogu'shan Arcanist",
"Mogu'shan Vaults",
"enUS",
},
[105705] = {
"Energía vinculada",
"Corte de Estrellas",
},
[115488] = {
"Piromante imbuido",
"Regreso a Karazhan",
},
[164702] = {
"Gusano carroñero",
"La Destrucción Necrótica",
},
[45926] = {
"Sirviente de Asaad",
"La Cumbre del Vórtice",
},
[194241] = {
"Vil Maleputre",
"Hondonada Frondacuero",
"enUS",
},
[130909] = {
"Gusano fétido",
"UNKNOWN",
},
[118460] = {
"Engine of Souls",
"Tomb of Sargeras",
"enUS",
},
[173798] = {
"Rat of Unusual Size",
"Castle Nathria",
},
[197857] = {
"Hendetripas",
"Hondonada Frondacuero",
"enUS",
},
[178851] = {
"Burning Stygia",
"Sanctum of Domination",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[203927] = {
"Failed Prototype",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[206230] = {
"Distractor Infinito",
"El Alba del Infinito",
"enUS",
},
[194647] = {
"Invocatore di Tuoni",
"Segrete delle Incarnazioni",
},
[190366] = {
"Croacito curioso",
"Salas de Infusión",
},
[180387] = {
"Mawsworn Paindrinker",
"Sanctum of Domination",
},
[107114] = {
"Tormenting Orb",
"Vault of the Wardens",
"enUS",
},
[44404] = {
"Bruja de escarcha Naz'jar",
"Trono de las Mareas",
"enUS",
},
[173138] = {
"Escolta jurafauces",
"Las Tierras de las Sombras",
},
[193352] = {
"Entidad desconocida",
"Hondonada Frondacuero",
},
[53134] = {
"Ancient Core Hound",
"Firelands",
},
[187897] = {
"Retador Draghar",
"Estanques de Vida Rubí",
},
[77816] = {
"Borka the Brute",
"Grimrail Depot",
},
[59458] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[59522] = {
"Sudsy Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[98926] = {
"Shadow Hunter",
"Vault of the Wardens",
"enUS",
},
[115642] = {
"Umbral Imp",
"Faronaar",
},
[163501] = {
"Hostigador Rechazado",
"Torres de Ascensión",
},
[190368] = {
"Clamallamas Aymi",
"Salas de Infusión",
},
[194373] = {
"Brackenhide Gnoll",
"Brackenhide Hollow",
"enUS",
},
[176551] = {
"Purificador de la bóveda",
"Tazavesh, el Mercado Velado",
},
[75451] = {
"Defiled Spirit",
"Shadowmoon Burial Grounds",
},
[26735] = {
"Azure Scale-Binder",
"The Nexus",
"enUS",
},
[203809] = {
"Entropic Hatred",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[163058] = {
"Defensora de Veloniebla",
"Nieblas de Tirna Scithe",
},
[104300] = {
"Señora de la Sombra",
"Corte de Estrellas",
},
[165805] = {
"Shade of Kael'thas",
"Castle Nathria",
},
[82039] = {
"Rockspine Stinger",
"The Everbloom",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[156244] = {
"Winged Automaton",
"Torghast, Tower of the Damned",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[192761] = {
"Iskakx",
"Vault of the Incarnates",
},
[188067] = {
"Tejescarcha rayogélido",
"Estanques de Vida Rubí",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[130400] = {
"Triturador mareaférrea",
"Puerto Libre",
},
[197535] = {
"Suma canalizadora Ryvati",
"Estanques de Vida Rubí",
},
[118374] = {
"Captain Yathae Moonstrike",
"Tomb of Sargeras",
"enUS",
},
[198047] = {
"Canalizadora de tempestades",
"Estanques de Vida Rubí",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[190371] = {
"Sacudetierra primalista",
"Salas de Infusión",
},
[59459] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[205212] = {
"Entidad desconocida",
"El Alba del Infinito",
"enUS",
},
[61634] = {
"Commander Vo'jak",
"Siege of Niuzao Temple",
"enUS",
},
[26763] = {
"Anomalus",
"The Nexus",
"enUS",
},
[171181] = {
"Picofiloso territorial",
"El Otro Lado",
},
[194622] = {
"Scorchling",
"Ruby Life Pools",
"enUS",
},
[184131] = {
"Guardián terráneo",
"Uldaman: Legado de Tyr",
"enUS",
},
[155216] = {
"Faeleaf Warden",
"Torghast, Tower of the Damned",
},
[168418] = {
"Inquisidora Rechazada",
"Torres de Ascensión",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
},
[168156] = {
"Remornia",
"Castle Nathria",
},
[203678] = {
"Grommash Hellscream",
"Dawn of the Infinite",
},
[197793] = {
"Awakened Juggernaut",
"Vault of the Incarnates",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[190373] = {
"Cantavientos primalista",
"Salas de Infusión",
},
[40013] = {
"Buster",
"Blackrock Caverns",
"enUS",
},
[167967] = {
"Aceite consciente",
"El Otro Lado",
},
[50376] = {
"Angered Earth",
"Blackrock Caverns",
"enUS",
},
[203679] = {
"Anduin Lothar",
"Dawn of the Infinite",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[58756] = {
"Scarlet Evoker",
"Scarlet Halls",
"enUS",
},
[90997] = {
"Destructor de Petrofuerza",
"Guarida de Neltharion",
},
[199749] = {
"Anomalía del flujo temporal",
"El Alba del Infinito",
"enUS",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[63106] = {
"Sik'thik Swarmer",
"Siege of Niuzao Temple",
"enUS",
},
[81603] = {
"Campeona Druna",
"Muelles de hierro",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[171184] = {
"Mythresh, garfas del cielo",
"El Otro Lado",
},
[59240] = {
"Scarlet Hall Guardian",
"Scarlet Halls",
"enUS",
},
[79739] = {
"Granadero Grom'kar",
"Depósito Riel siniestro",
},
[169905] = {
"Señor de la guerra resucitado",
"El Otro Lado",
},
[59460] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[99891] = {
"Draco de la tormenta",
"Salones del Valor",
},
[61699] = {
"Sik'thik Amberwing",
"Siege of Niuzao Temple",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[82682] = {
"Archmage Sol",
"The Everbloom",
"enUS",
},
[198308] = {
"Frostwrought Dominator",
"Vault of the Incarnates",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[59930] = {
"Empowered Zombie",
"Scarlet Monastery",
},
[172858] = {
"Stone Legion Goliath",
"Castle Nathria",
},
[168627] = {
"Ligaplagas",
"Plaga Abrumadora",
},
[184134] = {
"Scavenging Leaper",
"Uldaman: Legacy of Tyr",
"enUS",
},
[83578] = {
"Trabajador ogron",
"Muelles de hierro",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
},
[23487] = {
"Wolpertinger salvaje",
"Reinos del Este",
},
[190377] = {
"Invocahielo primalista",
"Salas de Infusión",
},
[192680] = {
"Centinela guardián",
"Academia Algeth'ar",
},
[206070] = {
"Cronaxi",
"El Alba del Infinito",
"enUS",
},
[199333] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
},
[43286] = {
"Crystal Shard",
"The Stonecore",
"enUS",
},
[84028] = {
"Maestro de asedio Rokra",
"Muelles de hierro",
},
[58757] = {
"Scholomance Acolyte",
"Scholomance",
"enUS",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
},
[186284] = {
"Oso muerdetripas",
"Hondonada Frondacuero",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
"enUS",
},
[131527] = {
"Lord Waycrest",
"Waycrest Manor",
"enUS",
},
[130404] = {
"Trampa para alimañas",
"Puerto Libre",
},
[172979] = {
"Esporeadora Almíbar",
"Nieblas de Tirna Scithe",
},
[95861] = {
"Hatecoil Oracle",
"Eye of Azshara",
},
[114796] = {
"Anfitriona íntegra",
"Regreso a Karazhan",
},
[198311] = {
"Flamewrought Eradicator",
"Vault of the Incarnates",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
"enUS",
},
[59461] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[168886] = {
"Virulax Hilañublo",
"Plaga Abrumadora",
},
[26796] = {
"Commander Stoutbeard",
"The Nexus",
"enUS",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[91000] = {
"Mole Piezavil",
"Guarida de Neltharion",
},
[97269] = {
"Hatecoil Crestrider",
"Eye of Azshara",
},
[103344] = {
"Oakheart",
"Darkheart Thicket",
"enUS",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
},
[195877] = {
"Mística resucitada",
"El Ataque Nokhud",
},
[172981] = {
"Cosido kyriano",
"La Destrucción Necrótica",
},
[99956] = {
"Fel-Infused Fury",
"Vault of the Wardens",
"enUS",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[67460] = {
"Bilgewater Grenadier",
"Lion's Landing",
"enUS",
},
[190381] = {
"Entidad desconocida",
"Hondonada Frondacuero",
"enUS",
},
[40015] = {
"Runty",
"Blackrock Caverns",
"enUS",
},
[42845] = {
"Rock Borer",
"The Stonecore",
"enUS",
},
[98677] = {
"Rook Spiderling",
"Black Rook Hold",
"enUS",
},
[205734] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[40084] = {
"Bellows Slave",
"Blackrock Caverns",
"enUS",
},
[120482] = {
"Tidescale Seacaller",
"Tomb of Sargeras",
"enUS",
},
[91001] = {
"Rondador Escupebrea",
"Guarida de Neltharion",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
"enUS",
},
[115244] = {
"Archimago Xylem",
"El Ojo de la Eternidad - Gesta",
},
[176565] = {
"Entidad desconocida",
"Tazavesh, el Mercado Velado",
},
[89012] = {
"Ravenous Wolf",
"Iron Docks",
},
[203688] = {
"Bruto de la Horda",
"El Alba del Infinito",
},
[130024] = {
"Soggy Shiprat",
"Freehold",
},
[120191] = {
"Eternal Soulguard",
"Tomb of Sargeras",
"enUS",
},
[114542] = {
"Filántropo fantasmal",
"Regreso a Karazhan",
},
[96247] = {
"Vileshard Crawler",
"Neltharion's Lair",
},
[187593] = {
"Primal Flame",
"Vault of the Incarnates",
},
[189472] = {
"Ser de lava qalashi",
"Neltharus",
"enUS",
},
[133835] = {
"Enjambrista de sangre feral",
"Bardoma",
},
[61701] = {
"Sik'thik Warrior",
"Siege of Niuzao Temple",
"enUS",
},
[201413] = {
"Inflammable Wall",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[56867] = {
"Fiery Trickster",
"Stormstout Brewery",
"enUS",
},
[179893] = {
"Vagador del cártel",
"Tazavesh, el Mercado Velado",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[64068] = {
"Mogu'shan Engine Keeper",
"Mogu'shan Vaults",
"enUS",
},
[43662] = {
"Unbound Earth Rager",
"The Stonecore",
"enUS",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[81407] = {
"Bombardero Riel siniestro",
"Depósito Riel siniestro",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[192786] = {
"Qalashi Plunderer",
"Neltharus",
"enUS",
},
[167612] = {
"Atracador petronato",
"Salones de Expiación",
},
[135989] = {
"Shieldbearer of Zul",
"Atal'Dazar",
"enUS",
},
[44648] = {
"Unyielding Behemoth",
"Throne of the Tides",
"enUS",
},
[194991] = {
"Oathsworn Vanguard",
"Vault of the Incarnates",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[138187] = {
"Horror grotesco",
"Bardoma",
},
[133685] = {
"Espíritu turbio",
"Bardoma",
},
[129553] = {
"Dinomántica Kish'o",
"Atal'Dazar",
"enUS",
},
[91003] = {
"Rokmora",
"Neltharion's Lair",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[180407] = {
"Gorgoan Sentinel",
"Sanctum of Domination",
},
[163620] = {
"Gangrenoso",
"La Destrucción Necrótica",
},
[83761] = {
"Trabajador ogron",
"Muelles de hierro",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[99358] = {
"Dríade Corazón podrido",
"Matorral Corazón Oscuro",
"enUS",
},
[67463] = {
"Baxel Brassbombs",
"Lion's Landing",
"enUS",
},
[163126] = {
"Mago de huesos frágiles",
"La Destrucción Necrótica",
},
[107288] = {
"Vilethorn Sapling",
"Darkheart Thicket",
"enUS",
},
[180664] = {
"Mawsworn Infuser",
"Sanctum of Domination",
},
[201469] = {
"Restless Pebble",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[86526] = {
"Maestro de cadenas Grom'kar",
"Muelles de hierro",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[121498] = {
"Twilight Soul",
"Tomb of Sargeras",
"enUS",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
"enUS",
},
[174012] = {
"Executrix Ophelia",
"Castle Nathria",
},
[59487] = {
"Bubble Shield",
"Stormstout Brewery",
"enUS",
},
[40936] = {
"Vigía ignoto",
"Trono de las Mareas",
"enUS",
},
[200926] = {
"Igira the Cruel",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[114289] = {
"Skeletal Sorcerer",
"Maw of Souls",
},
[204206] = {
"Clarividente de la Horda",
"El Alba del Infinito",
},
[100216] = {
"Hatecoil Wrangler",
"Eye of Azshara",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[40017] = {
"Twilight Element Warden",
"Blackrock Caverns",
"enUS",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[197298] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
},
[58632] = {
"Armsmaster Harlan",
"Scarlet Halls",
"enUS",
},
[185528] = {
"Mística zarpatruco",
"Hondonada Frondacuero",
"enUS",
},
[189878] = {
"Entidad desconocida",
"Regreso a Karazhan",
},
[91005] = {
"Naraxas",
"Neltharion's Lair",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[176573] = {
"Mawsworn Woebringer",
"Torghast, Tower of the Damned",
},
[59080] = {
"Darkmaster Gandling",
"Scholomance",
"enUS",
},
[132051] = {
"Blood Tick",
"The Underrot",
},
[179388] = {
"Maresabia de reloj de arena",
"Tazavesh, el Mercado Velado",
},
[175550] = {
"Volatile Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[199916] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[59464] = {
"Hopper",
"Stormstout Brewery",
"enUS",
},
[43875] = {
"Asaad",
"The Vortex Pinnacle",
"enUS",
},
[120473] = {
"Tidescale Combatant",
"Tomb of Sargeras",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
},
[196116] = {
"Furia de cristal",
"La Bóveda Azur",
},
[91006] = {
"Rechinador Espaldapétrea",
"Guarida de Neltharion",
},
[192464] = {
"Raging Ember",
"Neltharus",
"enUS",
},
[54431] = {
"Echo of Baine",
"End Time",
"enUS",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[170690] = {
"Horror enfermo",
"Teatro del Dolor",
},
[39698] = {
"Karsh Steelbender",
"Blackrock Caverns",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
},
[165597] = {
"Soldado de remendejo",
"La Destrucción Necrótica",
},
[184331] = {
"Atracadora del Tiempo Infinito",
"Uldaman: Legado de Tyr",
},
[167876] = {
"Inquisidor Sigar",
"Salones de Expiación",
},
[114803] = {
"Mano de establo espectral",
"Regreso a Karazhan",
},
[194999] = {
"Volatile Spark",
"Vault of the Incarnates",
},
[58569] = {
"Scarlet Purifier",
"Scarlet Monastery",
"enUS",
},
[58633] = {
"Instructor Chillheart",
"Scholomance",
"enUS",
},
[150297] = {
"Renormalizadora de Mecalópolis",
"Operación: Mecalópolis",
},
[77483] = {
"Artillero Grom'kar",
"Depósito Riel siniestro",
},
[91007] = {
"Dargrul",
"Neltharion's Lair",
},
[169924] = {
"Veteran Stoneguard",
"Castle Nathria",
},
[100248] = {
"Ritualist Lesha",
"Eye of Azshara",
"enUS",
},
[105720] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[44752] = {
"Faceless Sapper",
"Throne of the Tides",
"enUS",
},
[97788] = {
"Draco de la tormenta",
"Salones del Valor",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[150293] = {
"Merodeador de Mecalópolis",
"Operación: Mecalópolis",
},
[120463] = {
"Undersea Custodian",
"Tomb of Sargeras",
"enUS",
},
[169925] = {
"Begrudging Waiter",
"Castle Nathria",
},
[80005] = {
"Skylord Tovra",
"Grimrail Depot",
},
[84499] = {
"Entanglement",
"The Everbloom",
"enUS",
},
[26734] = {
"Azure Enforcer",
"The Nexus",
"enUS",
},
[129517] = {
"Raptor reanimado",
"Atal'Dazar",
"enUS",
},
[167111] = {
"Corvenado espinafauces",
"Nieblas de Tirna Scithe",
},
[178133] = {
"Saltaolas salsombría",
"Tazavesh, el Mercado Velado",
},
[91008] = {
"Rockbound Pelter",
"Neltharion's Lair",
},
[43537] = {
"Stonecore Earthshaper",
"The Stonecore",
"enUS",
},
[180417] = {
"Loom Artificer",
"Sanctum of Domination",
},
[192955] = {
"Draconic Illusion",
"The Azure Vault",
},
[191164] = {
"Cuidador arcano",
"La Bóveda Azur",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[169159] = {
"Lata inestable",
"Plaga Abrumadora",
},
[98970] = {
"Latosius",
"Black Rook Hold",
"enUS",
},
[98173] = {
"Mystic Ssa'veh",
"Eye of Azshara",
"enUS",
},
[169927] = {
"Carnicero pútrido",
"Teatro del Dolor",
},
[40019] = {
"Twilight Obsidian Borer",
"Blackrock Caverns",
"enUS",
},
[133593] = {
"Expert Technician",
"The MOTHERLODE!!",
},
[199353] = {
"Frost Tomb",
"Vault of the Incarnates",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[167113] = {
"Gargantácida espinafauces",
"Nieblas de Tirna Scithe",
},
[113398] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[58826] = {
"Zao Sunseeker",
"Temple of the Jade Serpent",
},
[95886] = {
"Ash'Golm",
"Vault of the Wardens",
"enUS",
},
[59800] = {
"Krik'thik Rager",
"Gate of the Setting Sun",
},
[209333] = {
"Gnarlroot",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[120719] = {
"Lunar Priestess",
"Tomb of Sargeras",
"enUS",
},
[206063] = {
"Desviación temporal",
"El Alba del Infinito",
"enUS",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[60375] = {
"Zandalari Skullcharger",
"Mogu'shan Vaults",
"enUS",
},
[174071] = {
"Gargon sañoso",
"Castillo Nathria",
},
[54553] = {
"Time-Twisted Seer",
"End Time",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[168394] = {
"Bocado limoso",
"Plaga Abrumadora",
},
[97677] = {
"Barbed Spiderling",
"Vault of the Wardens",
"enUS",
},
[177094] = {
"Signe",
"Sanctum of Domination",
},
[59722] = {
"Pile of Corpses",
"Pandaria",
"enUS",
},
[75426] = {
"Bloodmaul Overseer",
"Bloodmaul Slag Mines",
},
[78728] = {
"Shaadum",
"Auchindoun",
},
[91784] = {
"Warlord Parjesh",
"Eye of Azshara",
"enUS",
},
[59598] = {
"Lesser Sha",
"Temple of the Jade Serpent",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
},
[164557] = {
"Esquirla de Halkias",
"Salones de Expiación",
},
[39700] = {
"Beauty",
"Blackrock Caverns",
"enUS",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[155090] = {
"Espiralero anodizado",
"Operación: Mecalópolis",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[196798] = {
"Maligno de maná corrupto",
"Academia Algeth'ar",
},
[96512] = {
"Archdruid Glaidalis",
"Darkheart Thicket",
"enUS",
},
[96640] = {
"Valarjar Marksman",
"Halls of Valor",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[179399] = {
"Drunk Pirate",
"Tazavesh, the Veiled Market",
},
[212681] = {
"Tarasca sañosa",
"Trono de las Mareas",
"enUS",
},
[91789] = {
"Lady Hatecoil",
"Eye of Azshara",
"enUS",
},
[56718] = {
"Hopper",
"Stormstout Brewery",
"enUS",
},
[68508] = {
"Bloodhilt Earth-Singer",
"Lion's Landing",
"enUS",
},
[135169] = {
"Entidad desconocida",
"Bardoma",
},
[68639] = {
"Bloodhilt Battlemage",
"Lion's Landing",
"enUS",
},
[91793] = {
"Seaspray Crab",
"Eye of Azshara",
"enUS",
},
},
["aura_cooldown_reverse"] = false,
["aggro_modifies"] = {
["health_bar_color"] = false,
},
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["aura_width2"] = 28,
["aura_height2"] = 28,
["health_cutoff"] = false,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["extra_icon_anchor"] = {
["x"] = -16,
},
["extra_icon_wide_icon"] = false,
["aura_frame2_anchor"] = {
["y"] = 14,
["side"] = 1,
},
["aura_alpha"] = 1,
["castbar_icon_x_offset"] = -4,
["debuff_show_cc"] = false,
["aura_consolidate"] = true,
["extra_icon_width"] = 32,
["health_statusbar_texture"] = "GennUI B",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Aura Reorder"] = 3,
["Combo Points"] = 6,
["Execute Range"] = 1,
["Target Color"] = 3,
["Attacking Specific Unit"] = 2,
["Hide Neutral Units"] = 1,
},
["castbar_target_text_size"] = 8,
["aura_frame1_anchor"] = {
["y"] = 14,
["side"] = 7,
},
["aura_timer_text_font"] = "GennUI",
["cast_statusbar_color_finished"] = {
0.1372549019607843,
0.1372549019607843,
0.1294117647058823,
0.9600000008940697,
},
["extra_icon_stack_font"] = "GennUI",
["aura_height"] = 28,
["cast_statusbar_bgtexture"] = "GennUI B",
["aura2_x_offset"] = 0,
["target_indicator"] = "Arrow",
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "0",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["clampTargetNameplateToScreen"] = "1",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateTargetBehindMaxDistance"] = "40",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateMotionSpeed"] = "0.025",
["nameplateShowEnemyMinions"] = "0",
["nameplateShowEnemyPets"] = "1",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateMinScale"] = "1",
["nameplateOtherTopInset"] = "0.085",
["nameplateShowEnemyGuardians"] = "0",
["nameplateOccludedAlphaMult"] = "0.4",
["nameplateShowEnemyTotems"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1",
["nameplateLargeTopInset"] = "0.1",
["ShowClassColorInNameplate"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateLargerScale"] = "1",
},
["login_counter"] = 973,
["aura_cooldown_show_swipe"] = false,
["bossmod_aura_height"] = 36,
["aura_stack_font"] = "GennUI",
["blizzard_nameplate_font"] = "GennUI",
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 4,
["blizzard_nameplate_large_font"] = "GennUI",
["aura_stack_anchor"] = {
["y"] = -8,
["x"] = 2,
["side"] = 11,
},
["plate_config"] = {
["global_health_height"] = 14,
["friendlyplayer"] = {
["castbar_offset"] = -4,
["spellpercent_text_font"] = "GennUI",
["level_text_size"] = 11,
["actorname_use_class_color"] = true,
["cast"] = {
200,
14,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["fixed_class_color"] = {
1,
0.4,
0.1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["click_through"] = false,
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["level_text_font"] = "GennUI",
["actorname_text_font"] = "GennUI",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["mana_incombat"] = {
nil,
4,
},
["actorname_use_guild_color"] = false,
["all_names"] = true,
["big_actortitle_text_color"] = {
1,
0.8,
0,
},
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["only_damaged"] = false,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["big_actortitle_text_font"] = "GennUI",
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_color"] = {
0.5,
1,
0.5,
},
["actorname_use_friends_color"] = false,
["level_text_anchor"] = {
["y"] = 0,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
200,
14,
},
["big_actortitle_text_size"] = 10,
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_size"] = 12,
["spellname_text_anchor"] = {
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_outline"] = "OUTLINE",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "GennUI",
["use_playerclass_color"] = true,
["actorname_text_anchor"] = {
["y"] = 1,
},
["level_text_alpha"] = 1,
["percent_text_size"] = 12,
["spellname_text_font"] = "GennUI",
["percent_text_font"] = "GennUI",
["buff_frame_y_offset"] = 0,
["quest_enabled"] = true,
["percent_show_percent"] = false,
["spellpercent_text_enabled"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
60,
4,
},
["health"] = {
60,
4,
},
["quest_color_enabled"] = true,
["spellname_text_size"] = 11,
["percent_show_health"] = true,
["mana"] = {
nil,
4,
},
},
["global_health_width"] = 200,
["enemynpc"] = {
["spellpercent_text_font"] = "GennUI",
["level_text_size"] = 11,
["cast"] = {
200,
14,
},
["percent_text_show_decimals"] = false,
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "GennUI",
["actorname_text_font"] = "GennUI",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["big_actortitle_text_font"] = "GennUI",
["spellpercent_text_size"] = 10,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_anchor"] = {
["y"] = 0,
},
["cast_incombat"] = {
200,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_font"] = "GennUI",
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "GennUI",
["big_actorname_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_alpha"] = 1,
["percent_text_size"] = 12,
["percent_text_font"] = "GennUI",
["percent_show_percent"] = false,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
200,
14,
},
["health"] = {
200,
14,
},
["actorname_text_anchor"] = {
["side"] = 1,
},
["spellname_text_size"] = 11,
["quest_color_enabled"] = false,
},
["enemyplayer"] = {
["spellpercent_text_font"] = "GennUI",
["level_text_size"] = 11,
["actorname_use_class_color"] = true,
["cast"] = {
200,
14,
},
["big_actortitle_text_size"] = 10,
["spellname_text_outline"] = "OUTLINE",
["level_text_font"] = "GennUI",
["actorname_text_font"] = "GennUI",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["big_actortitle_text_font"] = "GennUI",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_anchor"] = {
["y"] = 0,
},
["cast_incombat"] = {
200,
14,
},
["spellname_text_size"] = 11,
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "GennUI",
["level_text_outline"] = "OUTLINE",
["big_actorname_text_size"] = 12,
["actorname_text_anchor"] = {
["side"] = 1,
},
["percent_text_size"] = 12,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_font"] = "GennUI",
["percent_text_show_decimals"] = false,
["quest_enabled"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
200,
14,
},
["health"] = {
200,
14,
},
["level_text_alpha"] = 1,
["percent_show_percent"] = false,
["spellname_text_font"] = "GennUI",
["quest_color_enabled"] = true,
},
["friendlynpc"] = {
["actorname_use_friends_color"] = false,
["spellpercent_text_font"] = "GennUI",
["actorname_friend_color"] = {
0.71,
1,
1,
1,
},
["level_text_size"] = 11,
["actorname_use_class_color"] = true,
["cast"] = {
200,
14,
},
["big_actortitle_text_size"] = 12,
["fixed_class_color"] = {
1,
0.4,
0.1,
1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["click_through"] = false,
["level_text_font"] = "GennUI",
["actorname_text_font"] = "GennUI",
["actorname_use_guild_color"] = false,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["only_thename"] = false,
["big_actortitle_text_font"] = "GennUI",
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_anchor"] = {
["y"] = 0,
},
["cast_incombat"] = {
200,
14,
},
["big_actorname_text_size"] = 12,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["big_actorname_text_font"] = "GennUI",
["use_playerclass_color"] = true,
["castbar_offset"] = -4,
["show_guild_name"] = false,
["percent_show_health"] = true,
["spellpercent_text_enabled"] = true,
["percent_text_font"] = "GennUI",
["actorname_guild_color"] = {
0.498039,
1,
0.2,
1,
},
["percent_show_percent"] = false,
["level_text_alpha"] = 1,
["spellname_text_font"] = "GennUI",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 11,
["health"] = {
200,
14,
},
["actorname_text_anchor"] = {
["side"] = 1,
},
["percent_text_enabled"] = true,
["health_incombat"] = {
200,
14,
},
["percent_text_size"] = 12,
["level_text_enabled"] = true,
},
},
["aura_y_offset"] = 10,
["use_ui_parent"] = true,
["cast_statusbar_bgcolor"] = {
0.1137254901960784,
0.1137254901960784,
0.1137254901960784,
0.8900000005960464,
},
["bossmod_aura_width"] = 36,
["resources_settings"] = {
["chr"] = {
["Player-2073-06F50D44"] = "Chi",
["Player-2073-06A170FA"] = "ComboPoints",
["Player-2073-0655867C"] = "Runes",
["Player-2073-06EBF709"] = "HolyPower",
["Player-1329-0A43CA4E"] = "SoulShards",
["Player-2073-0701C3AE"] = "SoulShards",
["Player-1329-09271213"] = "ComboPoints",
["Player-2073-09E87897"] = "Essence",
},
},
["spell_animation_list"] = {
[49998] = {
{
["fade_out"] = 0.01999999955296516,
["scaleX"] = 0.09999847412109375,
["amplitude"] = 1.029999971389771,
["fade_in"] = 0.009999999776482582,
},
},
},
["castbar_icon_size"] = "same as castbar plus healthbar",
["npc_colors"] = {
[40788] = {
true,
false,
"mediumpurple",
},
[169421] = {
true,
false,
"gold",
},
[188100] = {
true,
true,
"magenta",
},
[190403] = {
true,
false,
"indigo",
},
[168398] = {
true,
true,
"magenta",
},
[195265] = {
true,
true,
"blue",
},
[183495] = {
true,
false,
"mediumpurple",
},
[190404] = {
true,
false,
"mediumpurple",
},
[190405] = {
true,
false,
"cyan",
},
[133345] = {
true,
false,
"goldenrod",
},
[164562] = {
true,
true,
"magenta",
},
[183497] = {
true,
false,
"blue",
},
[164563] = {
true,
true,
"blue",
},
[169425] = {
true,
false,
"gold",
},
[190407] = {
true,
false,
"cyan",
},
[168658] = {
true,
false,
"fuchsia",
},
[138465] = {
true,
false,
"lightcoral",
},
[169426] = {
true,
false,
"gold",
},
[200387] = {
true,
true,
"indigo",
},
[180429] = {
true,
true,
"indigo",
},
[98691] = {
true,
false,
"blue",
},
[169428] = {
true,
false,
"gold",
},
[151773] = {
true,
false,
"blue",
},
[164567] = {
true,
false,
"deepskyblue",
},
[169429] = {
true,
false,
"gold",
},
[141283] = {
true,
false,
"navajowhite",
},
[180432] = {
true,
true,
"magenta",
},
[169430] = {
true,
false,
"gold",
},
[136934] = {
true,
false,
"navajowhite",
},
[141284] = {
true,
false,
"gold",
},
[180433] = {
true,
true,
"magenta",
},
[199368] = {
true,
false,
"fuchsia",
},
[102019] = {
true,
false,
"fuchsia",
},
[189901] = {
true,
false,
"mediumpurple",
},
[141285] = {
true,
false,
"lightgreen",
},
[98949] = {
true,
false,
"mediumpurple",
},
[200137] = {
true,
true,
"cyan",
},
[168153] = {
true,
true,
"indigo",
},
[131819] = {
true,
false,
"cyan",
},
[196044] = {
true,
false,
"fuchsia",
},
[178133] = {
true,
true,
"darkorange",
},
[100485] = {
true,
false,
"deepskyblue",
},
[176598] = {
true,
false,
"blue",
},
[102788] = {
true,
false,
"magenta",
},
[129527] = {
true,
false,
"blue",
},
[196045] = {
true,
true,
"cyan",
},
[184019] = {
true,
false,
"blue",
},
[101637] = {
true,
true,
"indigo",
},
[131821] = {
true,
false,
"magenta",
},
[175576] = {
true,
false,
"fuchsia",
},
[165597] = {
true,
true,
"darkorange",
},
[39960] = {
true,
false,
"darkorange",
},
[168156] = {
true,
false,
"fuchsia",
},
[44566] = {
true,
false,
"mediumpurple",
},
[178392] = {
true,
true,
"blue",
},
[131823] = {
true,
false,
"mediumpurple",
},
[184022] = {
true,
false,
"cyan",
},
[131824] = {
true,
false,
"mediumpurple",
},
[129529] = {
true,
false,
"fuchsia",
},
[212681] = {
true,
false,
"darkorange",
},
[101639] = {
true,
true,
"indigo",
},
[131825] = {
true,
false,
"mediumpurple",
},
[178139] = {
true,
true,
"blue",
},
[133361] = {
true,
false,
"magenta",
},
[164578] = {
true,
true,
"indigo",
},
[150250] = {
true,
false,
"deepskyblue",
},
[178141] = {
true,
true,
"magenta",
},
[137713] = {
true,
false,
"paleturquoise",
},
[150251] = {
true,
true,
"cyan",
},
[178142] = {
true,
true,
"cyan",
},
[137458] = {
true,
false,
"deepskyblue",
},
[205265] = {
true,
false,
"WARRIOR",
},
[126845] = {
true,
false,
"fuchsia",
},
[168420] = {
true,
false,
"blue",
},
[150253] = {
true,
true,
"indigo",
},
[168932] = {
true,
false,
"gold",
},
[82579] = {
true,
true,
"cyan",
},
[129788] = {
true,
false,
"cyan",
},
[190426] = {
true,
false,
"magenta",
},
[150254] = {
true,
true,
"indigo",
},
[177889] = {
true,
true,
"magenta",
},
[168934] = {
true,
true,
"blue",
},
[45912] = {
true,
false,
"cyan",
},
[177891] = {
true,
true,
"cyan",
},
[134137] = {
true,
false,
"deepskyblue",
},
[190174] = {
true,
false,
"fuchsia",
},
[168425] = {
true,
false,
"fuchsia",
},
[168681] = {
true,
true,
"cyan",
},
[197595] = {
true,
false,
"mediumpurple",
},
[126848] = {
true,
false,
"deepskyblue",
},
[94224] = {
true,
false,
"magenta",
},
[76057] = {
true,
true,
"blue",
},
[136186] = {
true,
false,
"honeydew",
},
[172265] = {
true,
true,
"cyan",
},
[160495] = {
true,
true,
"cyan",
},
[192481] = {
true,
false,
"cyan",
},
[81432] = {
true,
true,
"magenta",
},
[196576] = {
true,
true,
"magenta",
},
[127106] = {
true,
false,
"blue",
},
[168942] = {
true,
true,
"indigo",
},
[165872] = {
true,
true,
"indigo",
},
[131585] = {
true,
false,
"blue",
},
[134144] = {
true,
false,
"lightgreen",
},
[197857] = {
true,
false,
"darkorange",
},
[102287] = {
true,
false,
"blue",
},
[131586] = {
true,
false,
"blue",
},
[205790] = {
true,
false,
"WARRIOR",
},
[101008] = {
true,
false,
"magenta",
},
[135169] = {
true,
false,
"magenta",
},
[170480] = {
true,
true,
"blue",
},
[191206] = {
true,
false,
"deepskyblue",
},
[57109] = {
true,
false,
"WARRIOR",
},
[40925] = {
true,
false,
"blue",
},
[98706] = {
true,
false,
"indigo",
},
[86552] = {
true,
false,
"deepskyblue",
},
[162038] = {
true,
true,
"indigo",
},
[45915] = {
true,
false,
"blue",
},
[81819] = {
true,
false,
"cyan",
},
[184300] = {
true,
false,
"blue",
},
[162039] = {
true,
true,
"cyan",
},
[170483] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
true,
"cyan",
},
[86809] = {
true,
true,
"indigo",
},
[184301] = {
true,
false,
"cyan",
},
[162040] = {
true,
true,
"magenta",
},
[131847] = {
true,
false,
"WARRIOR",
},
[134150] = {
true,
false,
"navajowhite",
},
[65362] = {
true,
false,
"WARRIOR",
},
[81820] = {
true,
false,
"magenta",
},
[173044] = {
true,
true,
"indigo",
},
[184303] = {
true,
false,
"darkorange",
},
[137478] = {
true,
false,
"gold",
},
[156157] = {
true,
false,
"blue",
},
[131849] = {
true,
false,
"blue",
},
[95766] = {
true,
false,
"indigo",
},
[114317] = {
true,
false,
"deepskyblue",
},
[204262] = {
true,
false,
"fuchsia",
},
[127111] = {
true,
false,
"blue",
},
[131850] = {
true,
false,
"cyan",
},
[98965] = {
true,
false,
"mediumpurple",
},
[175861] = {
true,
false,
"fuchsia",
},
[83613] = {
true,
true,
"magenta",
},
[178165] = {
true,
true,
"blue",
},
[86684] = {
true,
false,
"cyan",
},
[170490] = {
true,
true,
"cyan",
},
[150276] = {
true,
true,
"blue",
},
[164861] = {
true,
true,
"cyan",
},
[114319] = {
true,
false,
"blue",
},
[162047] = {
true,
true,
"blue",
},
[96664] = {
true,
true,
"cyan",
},
[134157] = {
true,
false,
"peru",
},
[56792] = {
true,
false,
"fuchsia",
},
[137484] = {
true,
false,
"gold",
},
[95769] = {
true,
false,
"cyan",
},
[171772] = {
true,
true,
"blue",
},
[155908] = {
true,
false,
"fuchsia",
},
[174843] = {
true,
false,
"mediumpurple",
},
[205804] = {
true,
false,
"magenta",
},
[84767] = {
true,
false,
"blue",
},
[137486] = {
true,
false,
"gold",
},
[102295] = {
true,
false,
"cyan",
},
[178171] = {
true,
true,
"blue",
},
[180474] = {
true,
false,
"fuchsia",
},
[183033] = {
true,
false,
"mediumpurple",
},
[138255] = {
true,
false,
"maroon",
},
[134417] = {
true,
false,
"gold",
},
[182778] = {
true,
false,
"fuchsia",
},
[95771] = {
true,
false,
"cyan",
},
[134418] = {
true,
false,
"deepskyblue",
},
[59544] = {
true,
true,
"magenta",
},
[129547] = {
true,
false,
"blue",
},
[206064] = {
true,
false,
"deepskyblue",
},
[187897] = {
true,
true,
"indigo",
},
[95772] = {
true,
false,
"darkorange",
},
[45919] = {
true,
false,
"indigo",
},
[186107] = {
true,
false,
"fuchsia",
},
[129548] = {
true,
false,
"WARRIOR",
},
[206066] = {
true,
false,
"cyan",
},
[127757] = {
true,
false,
"blue",
},
[131863] = {
true,
false,
"mediumpurple",
},
[162057] = {
true,
true,
"blue",
},
[59545] = {
true,
true,
"darkorange",
},
[131864] = {
true,
false,
"mediumpurple",
},
[136214] = {
true,
false,
"plum",
},
[206068] = {
true,
false,
"magenta",
},
[107288] = {
true,
false,
"deepskyblue",
},
[80805] = {
true,
true,
"indigo",
},
[184319] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"cyan",
},
[164873] = {
true,
true,
"blue",
},
[164362] = {
true,
true,
"magenta",
},
[82597] = {
true,
true,
"blue",
},
[190206] = {
true,
true,
"magenta",
},
[191230] = {
true,
false,
"fuchsia",
},
[204536] = {
true,
false,
"darkorange",
},
[59546] = {
true,
false,
"deepskyblue",
},
[80935] = {
true,
true,
"indigo",
},
[192767] = {
true,
false,
"mediumpurple",
},
[191232] = {
true,
false,
"blue",
},
[163086] = {
true,
true,
"indigo",
},
[184580] = {
true,
false,
"cyan",
},
[187139] = {
true,
true,
"blue",
},
[129552] = {
true,
false,
"blue",
},
[206074] = {
true,
false,
"cyan",
},
[80936] = {
true,
true,
"blue",
},
[194816] = {
true,
false,
"magenta",
},
[168717] = {
true,
false,
"deepskyblue",
},
[134174] = {
true,
false,
"honeydew",
},
[114584] = {
true,
true,
"blue",
},
[176394] = {
true,
true,
"blue",
},
[59547] = {
true,
false,
"mediumpurple",
},
[168718] = {
true,
false,
"blue",
},
[129553] = {
true,
false,
"cyan",
},
[163089] = {
true,
true,
"darkorange",
},
[80937] = {
true,
true,
"indigo",
},
[176395] = {
true,
true,
"cyan",
},
[204030] = {
true,
false,
"magenta",
},
[150297] = {
true,
true,
"magenta",
},
[84520] = {
true,
false,
"mediumpurple",
},
[165138] = {
true,
true,
"darkorange",
},
[80938] = {
true,
true,
"blue",
},
[95779] = {
true,
false,
"blue",
},
[186122] = {
true,
false,
"blue",
},
[184331] = {
true,
false,
"magenta",
},
[153882] = {
true,
false,
"deepskyblue",
},
[193799] = {
true,
false,
"magenta",
},
[196102] = {
true,
true,
"cyan",
},
[167956] = {
true,
true,
"cyan",
},
[189706] = {
true,
false,
"yellow",
},
[186124] = {
true,
false,
"darkorange",
},
[180495] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"cyan",
},
[165911] = {
true,
true,
"blue",
},
[201222] = {
true,
false,
"blue",
},
[96677] = {
true,
true,
"blue",
},
[184335] = {
true,
false,
"cyan",
},
[201223] = {
true,
false,
"cyan",
},
[193291] = {
true,
false,
"magenta",
},
[45924] = {
true,
false,
"cyan",
},
[194315] = {
true,
true,
"blue",
},
[165913] = {
true,
false,
"fuchsia",
},
[137511] = {
true,
false,
"navajowhite",
},
[195851] = {
true,
true,
"cyan",
},
[194316] = {
true,
true,
"blue",
},
[193293] = {
true,
false,
"purple",
},
[114334] = {
true,
false,
"mediumpurple",
},
[194317] = {
true,
true,
"blue",
},
[167962] = {
true,
true,
"blue",
},
[172312] = {
true,
true,
"blue",
},
[138281] = {
true,
false,
"indigo",
},
[45477] = {
true,
false,
"indigo",
},
[125977] = {
true,
false,
"magenta",
},
[187154] = {
true,
false,
"deepskyblue",
},
[167964] = {
true,
true,
"indigo",
},
[187155] = {
true,
false,
"deepskyblue",
},
[195855] = {
true,
false,
"WARRIOR",
},
[134701] = {
true,
false,
"fuchsia",
},
[80816] = {
true,
true,
"magenta",
},
[167965] = {
true,
true,
"cyan",
},
[137516] = {
true,
false,
"lightsalmon",
},
[40936] = {
true,
false,
"blue",
},
[165919] = {
true,
true,
"blue",
},
[192786] = {
true,
false,
"blue",
},
[115488] = {
true,
true,
"cyan",
},
[171805] = {
true,
true,
"blue",
},
[167967] = {
true,
true,
"cyan",
},
[192787] = {
true,
false,
"blue",
},
[197905] = {
true,
false,
"deepskyblue",
},
[163618] = {
true,
true,
"magenta",
},
[192788] = {
true,
false,
"cyan",
},
[205326] = {
true,
false,
"lime",
},
[213770] = {
true,
false,
"mediumpurple",
},
[168992] = {
true,
true,
"cyan",
},
[196115] = {
true,
true,
"blue",
},
[192789] = {
true,
true,
"indigo",
},
[187160] = {
true,
true,
"indigo",
},
[114338] = {
true,
true,
"blue",
},
[196116] = {
true,
true,
"indigo",
},
[204560] = {
true,
false,
"fuchsia",
},
[137521] = {
true,
false,
"cornflowerblue",
},
[59552] = {
true,
true,
"cyan",
},
[189464] = {
true,
false,
"indigo",
},
[196117] = {
true,
true,
"blue",
},
[163621] = {
true,
true,
"blue",
},
[182045] = {
true,
false,
"fuchsia",
},
[198933] = {
true,
false,
"mediumpurple",
},
[133685] = {
true,
false,
"magenta",
},
[189466] = {
true,
false,
"blue",
},
[97068] = {
true,
true,
"indigo",
},
[133430] = {
true,
false,
"cornflowerblue",
},
[189467] = {
true,
false,
"darkorange",
},
[83763] = {
true,
true,
"magenta",
},
[59553] = {
true,
true,
"blue",
},
[59873] = {
true,
true,
"magenta",
},
[133432] = {
true,
false,
"gold",
},
[45928] = {
true,
false,
"indigo",
},
[83892] = {
true,
false,
"cyan",
},
[163882] = {
true,
true,
"indigo",
},
[192796] = {
true,
true,
"magenta",
},
[203799] = {
true,
false,
"deepskyblue",
},
[188703] = {
true,
false,
"yellow",
},
[189471] = {
true,
false,
"blue",
},
[83893] = {
true,
false,
"cyan",
},
[189472] = {
true,
false,
"blue",
},
[186658] = {
true,
false,
"cyan",
},
[205337] = {
true,
false,
"cyan",
},
[168747] = {
true,
false,
"fuchsia",
},
[83894] = {
true,
false,
"blue",
},
[192800] = {
true,
true,
"blue",
},
[197406] = {
true,
true,
"darkorange",
},
[201756] = {
true,
false,
"fuchsia",
},
[107435] = {
true,
true,
"indigo",
},
[75451] = {
true,
false,
"fuchsia",
},
[100527] = {
true,
false,
"cyan",
},
[59555] = {
true,
true,
"cyan",
},
[163121] = {
true,
true,
"blue",
},
[192803] = {
true,
true,
"darkorange",
},
[45930] = {
true,
false,
"blue",
},
[162099] = {
true,
false,
"fuchsia",
},
[189478] = {
true,
false,
"mediumpurple",
},
[97202] = {
true,
true,
"blue",
},
[186664] = {
true,
false,
"deepskyblue",
},
[195876] = {
true,
true,
"indigo",
},
[135234] = {
true,
false,
"darkorange",
},
[195877] = {
true,
true,
"cyan",
},
[184107] = {
true,
false,
"blue",
},
[135235] = {
true,
false,
"goldenrod",
},
[195878] = {
true,
false,
"magenta",
},
[163894] = {
true,
true,
"indigo",
},
[75966] = {
true,
false,
"fuchsia",
},
[199717] = {
true,
false,
"mediumpurple",
},
[165430] = {
true,
true,
"blue",
},
[180015] = {
true,
true,
"blue",
},
[81212] = {
true,
true,
"indigo",
},
[189227] = {
true,
false,
"lime",
},
[197671] = {
true,
false,
"blue",
},
[163128] = {
true,
true,
"cyan",
},
[118698] = {
true,
false,
"magenta",
},
[100531] = {
true,
false,
"indigo",
},
[102962] = {
true,
false,
"fuchsia",
},
[135239] = {
true,
false,
"paleturquoise",
},
[164921] = {
true,
true,
"cyan",
},
[45932] = {
true,
false,
"magenta",
},
[135240] = {
true,
false,
"cyan",
},
[100532] = {
true,
false,
"cyan",
},
[166969] = {
true,
false,
"deepskyblue",
},
[177716] = {
true,
false,
"deepskyblue",
},
[135241] = {
true,
false,
"peru",
},
[83389] = {
true,
true,
"indigo",
},
[166970] = {
true,
false,
"blue",
},
[40943] = {
true,
false,
"magenta",
},
[166971] = {
true,
false,
"fuchsia",
},
[152898] = {
true,
false,
"fuchsia",
},
[83390] = {
true,
true,
"magenta",
},
[164414] = {
true,
true,
"cyan",
},
[189234] = {
true,
false,
"mediumpurple",
},
[164926] = {
true,
true,
"blue",
},
[212775] = {
true,
false,
"cyan",
},
[186420] = {
true,
false,
"cyan",
},
[189235] = {
true,
false,
"cyan",
},
[75459] = {
true,
true,
"cyan",
},
[134990] = {
true,
false,
"honeydew",
},
[81984] = {
true,
false,
"blue",
},
[97081] = {
true,
true,
"blue",
},
[83392] = {
true,
true,
"blue",
},
[164929] = {
true,
true,
"indigo",
},
[104246] = {
true,
true,
"indigo",
},
[212778] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"cyan",
},
[131666] = {
true,
false,
"cyan",
},
[185656] = {
true,
false,
"cyan",
},
[131667] = {
true,
false,
"mediumpurple",
},
[187192] = {
true,
false,
"indigo",
},
[65317] = {
true,
false,
"mediumpurple",
},
[152905] = {
true,
false,
"fuchsia",
},
[104247] = {
true,
true,
"cyan",
},
[97083] = {
true,
true,
"blue",
},
[131669] = {
true,
false,
"darkorange",
},
[176959] = {
true,
false,
"deepskyblue",
},
[45935] = {
true,
false,
"cyan",
},
[131670] = {
true,
false,
"palegreen",
},
[213806] = {
true,
false,
"cyan",
},
[97084] = {
true,
true,
"blue",
},
[205363] = {
true,
false,
"deepskyblue",
},
[100539] = {
true,
false,
"blue",
},
[171333] = {
true,
true,
"magenta",
},
[168007] = {
true,
false,
"blue",
},
[179010] = {
true,
false,
"deepskyblue",
},
[134232] = {
true,
false,
"goldenrod",
},
[96574] = {
true,
true,
"blue",
},
[115765] = {
true,
true,
"blue",
},
[104251] = {
true,
true,
"magenta",
},
[184130] = {
true,
false,
"WARRIOR",
},
[179269] = {
true,
true,
"blue",
},
[187969] = {
true,
false,
"deepskyblue",
},
[184131] = {
true,
false,
"blue",
},
[101437] = {
true,
false,
"fuchsia",
},
[131677] = {
true,
false,
"magenta",
},
[208440] = {
true,
false,
"indigo",
},
[184132] = {
true,
false,
"magenta",
},
[195135] = {
true,
false,
"fuchsia",
},
[92610] = {
true,
false,
"magenta",
},
[201788] = {
true,
false,
"indigo",
},
[101438] = {
true,
false,
"blue",
},
[170572] = {
true,
true,
"cyan",
},
[136541] = {
true,
false,
"deepskyblue",
},
[81864] = {
true,
false,
"blue",
},
[98368] = {
true,
false,
"magenta",
},
[75979] = {
true,
false,
"fuchsia",
},
[156244] = {
true,
false,
"mediumpurple",
},
[201790] = {
true,
false,
"deepskyblue",
},
[171341] = {
true,
false,
"deepskyblue",
},
[155221] = {
true,
false,
"deepskyblue",
},
[135007] = {
true,
false,
"gold",
},
[135263] = {
true,
false,
"maroon",
},
[156245] = {
true,
false,
"mediumpurple",
},
[128434] = {
true,
false,
"magenta",
},
[197697] = {
true,
true,
"indigo",
},
[81737] = {
true,
false,
"magenta",
},
[199233] = {
true,
false,
"mediumpurple",
},
[92612] = {
true,
false,
"indigo",
},
[201792] = {
true,
false,
"mediumpurple",
},
[171343] = {
true,
true,
"blue",
},
[186696] = {
true,
false,
"magenta",
},
[128435] = {
true,
false,
"darkorange",
},
[98370] = {
true,
false,
"cyan",
},
[162133] = {
true,
false,
"fuchsia",
},
[176974] = {
true,
false,
"fuchsia",
},
[115642] = {
true,
false,
"blue",
},
[131685] = {
true,
false,
"cyan",
},
[199748] = {
true,
false,
"cyan",
},
[157017] = {
true,
false,
"blue",
},
[98243] = {
true,
false,
"indigo",
},
[184908] = {
true,
true,
"darkorange",
},
[195399] = {
true,
false,
"darkorange",
},
[173138] = {
true,
true,
"cyan",
},
[44404] = {
true,
false,
"cyan",
},
[136549] = {
true,
false,
"lightcoral",
},
[168022] = {
true,
true,
"blue",
},
[184910] = {
true,
true,
"yellow",
},
[115388] = {
true,
true,
"magenta",
},
[137830] = {
true,
false,
"indigo",
},
[130485] = {
true,
false,
"peru",
},
[136295] = {
true,
false,
"peru",
},
[186191] = {
true,
false,
"magenta",
},
[107073] = {
true,
true,
"cyan",
},
[185680] = {
true,
true,
"darkorange",
},
[127799] = {
true,
false,
"blue",
},
[192333] = {
true,
true,
"indigo",
},
[133482] = {
true,
false,
"maroon",
},
[208198] = {
true,
false,
"fuchsia",
},
[173655] = {
true,
true,
"blue",
},
[131436] = {
true,
false,
"indigo",
},
[205384] = {
true,
false,
"magenta",
},
[23682] = {
true,
true,
"cyan",
},
[134251] = {
true,
false,
"honeydew",
},
[194894] = {
true,
true,
"magenta",
},
[189265] = {
true,
false,
"fuchsia",
},
[185683] = {
true,
true,
"yellow",
},
[207177] = {
true,
false,
"blue",
},
[164702] = {
true,
true,
"magenta",
},
[190034] = {
true,
true,
"blue",
},
[178008] = {
true,
false,
"yellow",
},
[194896] = {
true,
true,
"blue",
},
[130488] = {
true,
false,
"lightsalmon",
},
[185685] = {
true,
true,
"blue",
},
[165471] = {
true,
false,
"blue",
},
[114624] = {
true,
true,
"blue",
},
[194897] = {
true,
false,
"fuchsia",
},
[194898] = {
true,
false,
"WARRIOR",
},
[164705] = {
true,
true,
"cyan",
},
[52019] = {
true,
false,
"fuchsia",
},
[83025] = {
true,
true,
"blue",
},
[40633] = {
true,
false,
"magenta",
},
[187224] = {
true,
false,
"magenta",
},
[134514] = {
true,
false,
"lightgreen",
},
[114626] = {
true,
true,
"cyan",
},
[174175] = {
true,
true,
"blue",
},
[198995] = {
true,
false,
"mediumpurple",
},
[96587] = {
true,
false,
"deepskyblue",
},
[203857] = {
true,
false,
"cyan",
},
[83026] = {
true,
true,
"blue",
},
[198996] = {
true,
false,
"mediumpurple",
},
[170850] = {
true,
true,
"blue",
},
[208208] = {
true,
false,
"lime",
},
[114627] = {
true,
false,
"blue",
},
[196694] = {
true,
true,
"darkorange",
},
[198997] = {
true,
false,
"mediumpurple",
},
[115395] = {
true,
true,
"blue",
},
[198998] = {
true,
false,
"mediumpurple",
},
[81236] = {
true,
true,
"magenta",
},
[189531] = {
true,
false,
"fuchsia",
},
[195928] = {
true,
true,
"magenta",
},
[165479] = {
true,
false,
"mediumpurple",
},
[114628] = {
true,
true,
"blue",
},
[198999] = {
true,
false,
"mediumpurple",
},
[203861] = {
true,
false,
"blue",
},
[195929] = {
true,
true,
"magenta",
},
[186206] = {
true,
false,
"WARRIOR",
},
[199000] = {
true,
false,
"mediumpurple",
},
[195930] = {
true,
true,
"magenta",
},
[114629] = {
true,
false,
"blue",
},
[186208] = {
true,
false,
"magenta",
},
[180323] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
true,
"magenta",
},
[116549] = {
true,
true,
"cyan",
},
[87252] = {
true,
true,
"blue",
},
[164461] = {
true,
false,
"blue",
},
[134012] = {
true,
false,
"lightsalmon",
},
[181861] = {
true,
false,
"mediumpurple",
},
[180070] = {
true,
false,
"fuchsia",
},
[129600] = {
true,
false,
"cyan",
},
[167533] = {
true,
true,
"blue",
},
[101326] = {
true,
false,
"fuchsia",
},
[157810] = {
true,
false,
"deepskyblue",
},
[164463] = {
true,
false,
"deepskyblue",
},
[102094] = {
true,
false,
"blue",
},
[167534] = {
true,
true,
"blue",
},
[114632] = {
true,
true,
"magenta",
},
[99664] = {
true,
false,
"fuchsia",
},
[101839] = {
true,
false,
"darkorange",
},
[197985] = {
true,
true,
"cyan",
},
[104270] = {
true,
true,
"blue",
},
[114633] = {
true,
true,
"blue",
},
[135552] = {
true,
false,
"magenta",
},
[129602] = {
true,
false,
"purple",
},
[115401] = {
true,
true,
"blue",
},
[111563] = {
true,
true,
"indigo",
},
[205151] = {
true,
false,
"WARRIOR",
},
[197219] = {
true,
true,
"blue",
},
[187240] = {
true,
false,
"mediumpurple",
},
[40765] = {
true,
false,
"mediumpurple",
},
[171376] = {
true,
true,
"indigo",
},
[167538] = {
true,
true,
"blue",
},
[114634] = {
true,
true,
"cyan",
},
[205152] = {
true,
false,
"blue",
},
[205408] = {
true,
false,
"blue",
},
[191847] = {
true,
true,
"blue",
},
[179821] = {
true,
true,
"indigo",
},
[196198] = {
true,
false,
"blue",
},
[115019] = {
true,
true,
"indigo",
},
[207969] = {
true,
false,
"cyan",
},
[101074] = {
true,
false,
"darkorange",
},
[186220] = {
true,
false,
"cyan",
},
[180335] = {
true,
true,
"cyan",
},
[150142] = {
true,
false,
"deepskyblue",
},
[104273] = {
true,
true,
"indigo",
},
[126918] = {
true,
false,
"lime",
},
[196712] = {
true,
false,
"fuchsia",
},
[168310] = {
true,
true,
"indigo",
},
[115020] = {
true,
true,
"blue",
},
[101075] = {
true,
false,
"fuchsia",
},
[134024] = {
true,
false,
"cyan",
},
[104274] = {
true,
true,
"cyan",
},
[126919] = {
true,
false,
"cyan",
},
[174197] = {
true,
true,
"cyan",
},
[205158] = {
true,
false,
"blue",
},
[196203] = {
true,
false,
"deepskyblue",
},
[135049] = {
true,
false,
"cyan",
},
[113998] = {
true,
false,
"indigo",
},
[128455] = {
true,
false,
"indigo",
},
[132491] = {
true,
false,
"palegreen",
},
[104275] = {
true,
true,
"blue",
},
[128967] = {
true,
false,
"palegreen",
},
[168058] = {
true,
true,
"cyan",
},
[136330] = {
true,
false,
"magenta",
},
[115406] = {
true,
true,
"darkorange",
},
[84957] = {
true,
false,
"magenta",
},
[157824] = {
true,
true,
"cyan",
},
[39616] = {
true,
false,
"WARRIOR",
},
[134284] = {
true,
false,
"magenta",
},
[135052] = {
true,
false,
"darkorange",
},
[168572] = {
true,
true,
"magenta",
},
[136076] = {
true,
false,
"lightcoral",
},
[115407] = {
true,
true,
"blue",
},
[186740] = {
true,
true,
"indigo",
},
[213607] = {
true,
false,
"darkorange",
},
[195696] = {
true,
true,
"blue",
},
[104277] = {
true,
true,
"darkorange",
},
[186229] = {
true,
false,
"blue",
},
[186741] = {
true,
true,
"cyan",
},
[183671] = {
true,
false,
"fuchsia",
},
[163457] = {
true,
true,
"magenta",
},
[157572] = {
true,
false,
"deepskyblue",
},
[164737] = {
true,
true,
"indigo",
},
[95834] = {
true,
true,
"magenta",
},
[104278] = {
true,
true,
"magenta",
},
[137103] = {
true,
false,
"fuchsia",
},
[98521] = {
true,
false,
"blue",
},
[163459] = {
true,
true,
"cyan",
},
[165762] = {
true,
false,
"fuchsia",
},
[40577] = {
true,
false,
"blue",
},
[150154] = {
true,
true,
"darkorange",
},
[187768] = {
true,
false,
"deepskyblue",
},
[102232] = {
true,
false,
"cyan",
},
[165763] = {
true,
false,
"deepskyblue",
},
[180348] = {
true,
true,
"blue",
},
[166275] = {
true,
true,
"cyan",
},
[168578] = {
true,
true,
"cyan",
},
[189816] = {
true,
false,
"deepskyblue",
},
[166276] = {
true,
true,
"blue",
},
[170882] = {
true,
true,
"cyan",
},
[188026] = {
true,
false,
"fuchsia",
},
[76518] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
true,
"cyan",
},
[168837] = {
true,
true,
"indigo",
},
[169861] = {
true,
false,
"blue",
},
[180864] = {
true,
false,
"fuchsia",
},
[183423] = {
true,
false,
"deepskyblue",
},
[179841] = {
true,
true,
"cyan",
},
[150160] = {
true,
true,
"indigo",
},
[173189] = {
true,
false,
"deepskyblue",
},
[179842] = {
true,
true,
"blue",
},
[204918] = {
true,
false,
"fuchsia",
},
[134041] = {
true,
false,
"WARRIOR",
},
[183425] = {
true,
false,
"blue",
},
[81638] = {
true,
false,
"magenta",
},
[165515] = {
true,
true,
"indigo",
},
[126928] = {
true,
false,
"darkorange",
},
[88163] = {
true,
true,
"magenta",
},
[86372] = {
true,
false,
"darkorange",
},
[186242] = {
true,
false,
"blue",
},
[179334] = {
true,
false,
"fuchsia",
},
[79720] = {
true,
true,
"magenta",
},
[122963] = {
true,
false,
"mediumpurple",
},
[199037] = {
true,
false,
"deepskyblue",
},
[96608] = {
true,
true,
"darkorange",
},
[183173] = {
true,
true,
"cyan",
},
[179847] = {
true,
false,
"fuchsia",
},
[176521] = {
true,
false,
"blue",
},
[205435] = {
true,
false,
"blue",
},
[205691] = {
true,
false,
"cyan",
},
[167566] = {
true,
true,
"blue",
},
[180104] = {
true,
false,
"deepskyblue",
},
[190340] = {
true,
false,
"indigo",
},
[176523] = {
true,
false,
"mediumpurple",
},
[150168] = {
true,
true,
"blue",
},
[95842] = {
true,
true,
"cyan",
},
[139422] = {
true,
false,
"gold",
},
[150169] = {
true,
true,
"cyan",
},
[189318] = {
true,
false,
"indigo",
},
[165010] = {
true,
true,
"blue",
},
[115417] = {
true,
true,
"blue",
},
[190342] = {
true,
false,
"cyan",
},
[135329] = {
true,
false,
"blue",
},
[136353] = {
true,
false,
"royalblue",
},
[179852] = {
true,
false,
"blue",
},
[131492] = {
true,
false,
"cyan",
},
[168594] = {
true,
true,
"blue",
},
[111068] = {
true,
false,
"mediumpurple",
},
[118489] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"blue",
},
[122967] = {
true,
false,
"mediumpurple",
},
[177808] = {
true,
true,
"magenta",
},
[122968] = {
true,
false,
"mediumpurple",
},
[45572] = {
true,
false,
"fuchsia",
},
[154014] = {
true,
false,
"deepskyblue",
},
[118491] = {
true,
false,
"deepskyblue",
},
[165529] = {
true,
true,
"cyan",
},
[188302] = {
true,
false,
"yellow",
},
[122969] = {
true,
false,
"cyan",
},
[164506] = {
true,
true,
"magenta",
},
[206214] = {
true,
false,
"blue",
},
[101476] = {
true,
false,
"fuchsia",
},
[144293] = {
true,
false,
"mediumpurple",
},
[114526] = {
true,
true,
"magenta",
},
[98406] = {
true,
false,
"blue",
},
[166299] = {
true,
true,
"cyan",
},
[129367] = {
true,
false,
"honeydew",
},
[144294] = {
true,
false,
"deepskyblue",
},
[173720] = {
true,
true,
"blue",
},
[105699] = {
true,
true,
"darkorange",
},
[75506] = {
true,
true,
"magenta",
},
[122971] = {
true,
false,
"indigo",
},
[166301] = {
true,
true,
"darkorange",
},
[164510] = {
true,
true,
"darkorange",
},
[144296] = {
true,
false,
"mediumpurple",
},
[208521] = {
true,
false,
"deepskyblue",
},
[166302] = {
true,
true,
"cyan",
},
[177817] = {
true,
true,
"cyan",
},
[98280] = {
true,
false,
"cyan",
},
[155812] = {
true,
false,
"blue",
},
[41096] = {
true,
false,
"magenta",
},
[129369] = {
true,
false,
"lightsalmon",
},
[144298] = {
true,
true,
"magenta",
},
[166304] = {
true,
true,
"darkorange",
},
[139949] = {
true,
false,
"honeydew",
},
[101991] = {
true,
false,
"cyan",
},
[174071] = {
true,
true,
"blue",
},
[122973] = {
true,
false,
"magenta",
},
[167536] = {
true,
true,
"blue",
},
[129370] = {
true,
false,
"gold",
},
[167532] = {
true,
true,
"blue",
},
[171887] = {
true,
true,
"magenta",
},
[175517] = {
true,
false,
"blue",
},
[184911] = {
true,
true,
"magenta",
},
[65310] = {
true,
true,
"greenyellow",
},
[170838] = {
true,
true,
"blue",
},
[85232] = {
true,
false,
"blue",
},
[156226] = {
true,
false,
"deepskyblue",
},
[84028] = {
true,
true,
"blue",
},
[81522] = {
true,
false,
"mediumpurple",
},
[96640] = {
true,
false,
"lime",
},
[96512] = {
true,
false,
"mediumpurple",
},
[190359] = {
true,
false,
"blue",
},
[109908] = {
true,
false,
"fuchsia",
},
[98538] = {
true,
false,
"mediumpurple",
},
[187033] = {
true,
false,
"indigo",
},
[196671] = {
true,
true,
"indigo",
},
[180431] = {
true,
true,
"cyan",
},
[183707] = {
true,
true,
"cyan",
},
[82590] = {
true,
true,
"indigo",
},
[130011] = {
true,
false,
"lime",
},
[167116] = {
true,
true,
"darkorange",
},
[163126] = {
true,
true,
"cyan",
},
[133852] = {
true,
false,
"blue",
},
[115640] = {
true,
false,
"fuchsia",
},
[184582] = {
true,
false,
"deepskyblue",
},
[184140] = {
true,
true,
"magenta",
},
[173729] = {
true,
false,
"fuchsia",
},
[99359] = {
true,
false,
"magenta",
},
[170147] = {
true,
true,
"darkorange",
},
[102404] = {
true,
false,
"blue",
},
[163058] = {
true,
true,
"blue",
},
[173016] = {
true,
true,
"cyan",
},
[120651] = {
true,
true,
"white",
},
[193944] = {
true,
false,
"cyan",
},
[45926] = {
true,
false,
"darkorange",
},
[190362] = {
true,
false,
"cyan",
},
[131009] = {
true,
false,
"magenta",
},
[40586] = {
true,
false,
"mediumpurple",
},
[99360] = {
true,
false,
"blue",
},
[96611] = {
true,
true,
"blue",
},
[197698] = {
true,
true,
"indigo",
},
[114636] = {
true,
true,
"indigo",
},
[97219] = {
true,
true,
"blue",
},
[169893] = {
true,
true,
"indigo",
},
[164707] = {
true,
true,
"blue",
},
[196548] = {
true,
true,
"magenta",
},
[84400] = {
true,
false,
"magenta",
},
[189340] = {
true,
false,
"mediumpurple",
},
[131812] = {
true,
false,
"magenta",
},
[206140] = {
true,
false,
"blue",
},
[200131] = {
true,
true,
"blue",
},
[206070] = {
true,
false,
"indigo",
},
[183424] = {
true,
true,
"cyan",
},
[105705] = {
true,
true,
"indigo",
},
[165483] = {
true,
false,
"fuchsia",
},
[195119] = {
true,
true,
"cyan",
},
[99358] = {
true,
false,
"magenta",
},
[167998] = {
true,
true,
"blue",
},
[130909] = {
true,
false,
"purple",
},
[165222] = {
true,
true,
"cyan",
},
[136249] = {
true,
false,
"plum",
},
[199749] = {
true,
false,
"indigo",
},
[189470] = {
true,
false,
"aqua",
},
[196043] = {
true,
false,
"cyan",
},
[192955] = {
true,
false,
"fuchsia",
},
[206230] = {
true,
false,
"blue",
},
[189266] = {
true,
false,
"indigo",
},
[190366] = {
true,
false,
"darkorange",
},
[128551] = {
true,
false,
"darkorange",
},
[188244] = {
true,
true,
"blue",
},
[165111] = {
true,
true,
"darkorange",
},
[167111] = {
true,
true,
"cyan",
},
[194895] = {
true,
false,
"lime",
},
[99366] = {
true,
false,
"deepskyblue",
},
[154744] = {
true,
true,
"blue",
},
[194745] = {
true,
false,
"darkorange",
},
[155824] = {
true,
false,
"blue",
},
[98542] = {
true,
false,
"mediumpurple",
},
[164920] = {
true,
true,
"blue",
},
[177816] = {
true,
true,
"cyan",
},
[134331] = {
true,
false,
"gold",
},
[98792] = {
true,
false,
"deepskyblue",
},
[163501] = {
true,
true,
"magenta",
},
[190368] = {
true,
false,
"cyan",
},
[134158] = {
true,
false,
"navajowhite",
},
[176551] = {
true,
true,
"cyan",
},
[185691] = {
true,
false,
"darkorange",
},
[206065] = {
true,
false,
"fuchsia",
},
[129758] = {
true,
false,
"fuchsia",
},
[165805] = {
true,
false,
"mediumpurple",
},
[104300] = {
true,
true,
"cyan",
},
[151476] = {
true,
false,
"mediumpurple",
},
[82039] = {
true,
false,
"darkorange",
},
[184581] = {
true,
false,
"fuchsia",
},
[199325] = {
true,
false,
"deepskyblue",
},
[131858] = {
true,
false,
"blue",
},
[185508] = {
true,
false,
"lime",
},
[163503] = {
true,
true,
"magenta",
},
[188067] = {
true,
true,
"cyan",
},
[190370] = {
true,
false,
"deepskyblue",
},
[168109] = {
true,
false,
"deepskyblue",
},
[162729] = {
true,
true,
"darkorange",
},
[130400] = {
true,
false,
"blue",
},
[197535] = {
true,
true,
"magenta",
},
[114266] = {
true,
false,
"deepskyblue",
},
[198047] = {
true,
true,
"magenta",
},
[131587] = {
true,
false,
"indigo",
},
[190371] = {
true,
false,
"blue",
},
[75899] = {
true,
true,
"magenta",
},
[205212] = {
true,
false,
"magenta",
},
[150146] = {
true,
true,
"magenta",
},
[168878] = {
true,
true,
"darkorange",
},
[171181] = {
true,
true,
"blue",
},
[185032] = {
true,
false,
"mediumpurple",
},
[167876] = {
true,
true,
"blue",
},
[122965] = {
true,
false,
"mediumpurple",
},
[75713] = {
true,
true,
"cyan",
},
[194241] = {
true,
false,
"magenta",
},
[204337] = {
true,
false,
"magenta",
},
[203678] = {
true,
false,
"mediumpurple",
},
[214117] = {
true,
false,
"magenta",
},
[77483] = {
true,
true,
"indigo",
},
[194467] = {
true,
false,
"blue",
},
[190373] = {
true,
false,
"cyan",
},
[155830] = {
true,
false,
"deepskyblue",
},
[167963] = {
true,
true,
"blue",
},
[154758] = {
true,
true,
"blue",
},
[170927] = {
true,
true,
"magenta",
},
[191739] = {
true,
false,
"mediumpurple",
},
[136470] = {
true,
false,
"honeydew",
},
[90997] = {
true,
false,
"indigo",
},
[193462] = {
true,
false,
"magenta",
},
[155831] = {
true,
false,
"fuchsia",
},
[132532] = {
true,
false,
"palegreen",
},
[171184] = {
true,
true,
"blue",
},
[205727] = {
true,
false,
"cyan",
},
[134338] = {
true,
false,
"navajowhite",
},
[194469] = {
true,
false,
"blue",
},
[79739] = {
true,
true,
"magenta",
},
[169905] = {
true,
true,
"blue",
},
[114794] = {
true,
true,
"magenta",
},
[192934] = {
true,
false,
"blue",
},
[165556] = {
true,
false,
"fuchsia",
},
[168882] = {
true,
false,
"fuchsia",
},
[77700] = {
true,
true,
"magenta",
},
[82682] = {
true,
false,
"mediumpurple",
},
[198308] = {
true,
false,
"mediumpurple",
},
[132126] = {
true,
false,
"magenta",
},
[185529] = {
true,
false,
"blue",
},
[105704] = {
true,
true,
"cyan",
},
[168627] = {
true,
true,
"cyan",
},
[166396] = {
true,
true,
"blue",
},
[83578] = {
true,
true,
"blue",
},
[152009] = {
true,
true,
"blue",
},
[127315] = {
true,
false,
"magenta",
},
[190377] = {
true,
false,
"cyan",
},
[192680] = {
true,
true,
"blue",
},
[137517] = {
true,
false,
"peru",
},
[168443] = {
true,
false,
"blue",
},
[100526] = {
true,
false,
"darkorange",
},
[187771] = {
true,
false,
"blue",
},
[186226] = {
true,
false,
"cyan",
},
[196263] = {
true,
false,
"deepskyblue",
},
[186284] = {
true,
false,
"blue",
},
[135365] = {
true,
false,
"blue",
},
[131527] = {
true,
false,
"mediumpurple",
},
[130404] = {
true,
false,
"magenta",
},
[172979] = {
true,
true,
"darkorange",
},
[162744] = {
true,
true,
"blue",
},
[151325] = {
true,
false,
"fuchsia",
},
[198311] = {
true,
false,
"mediumpurple",
},
[114796] = {
true,
true,
"cyan",
},
[122984] = {
true,
false,
"blue",
},
[114783] = {
true,
true,
"magenta",
},
[163458] = {
true,
true,
"cyan",
},
[168886] = {
true,
true,
"blue",
},
[168318] = {
true,
true,
"blue",
},
[134599] = {
true,
false,
"gold",
},
[167607] = {
true,
true,
"blue",
},
[95843] = {
true,
true,
"blue",
},
[115402] = {
true,
true,
"blue",
},
[173190] = {
true,
false,
"deepskyblue",
},
[122970] = {
true,
false,
"darkorange",
},
[172981] = {
true,
true,
"blue",
},
[130661] = {
true,
false,
"lightgreen",
},
[134600] = {
true,
false,
"peru",
},
[196200] = {
true,
true,
"blue",
},
[190381] = {
true,
false,
"magenta",
},
[98677] = {
true,
false,
"darkorange",
},
[167615] = {
true,
true,
"indigo",
},
[174773] = {
true,
true,
"indigo",
},
[40923] = {
true,
false,
"WARRIOR",
},
[81603] = {
true,
true,
"blue",
},
[212673] = {
true,
false,
"indigo",
},
[91001] = {
true,
false,
"indigo",
},
[95832] = {
true,
true,
"indigo",
},
[150292] = {
true,
true,
"indigo",
},
[176565] = {
true,
true,
"cyan",
},
[45917] = {
true,
false,
"blue",
},
[203688] = {
true,
false,
"cyan",
},
[150165] = {
true,
true,
"indigo",
},
[114544] = {
true,
true,
"indigo",
},
[114542] = {
true,
true,
"magenta",
},
[135204] = {
true,
false,
"honeydew",
},
[122972] = {
true,
false,
"cyan",
},
[91002] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"cyan",
},
[199595] = {
true,
false,
"mediumpurple",
},
[190128] = {
true,
true,
"white",
},
[136139] = {
true,
false,
"peru",
},
[179893] = {
true,
true,
"darkorange",
},
[84989] = {
true,
false,
"cyan",
},
[168891] = {
true,
true,
"darkorange",
},
[105715] = {
true,
true,
"cyan",
},
[133836] = {
true,
false,
"blue",
},
[81407] = {
true,
true,
"blue",
},
[157634] = {
true,
false,
"blue",
},
[129366] = {
true,
false,
"goldenrod",
},
[167612] = {
true,
true,
"blue",
},
[99891] = {
true,
true,
"indigo",
},
[180473] = {
true,
false,
"blue",
},
[187315] = {
true,
false,
"blue",
},
[166589] = {
true,
false,
"fuchsia",
},
[138187] = {
true,
false,
"cyan",
},
[92538] = {
true,
false,
"magenta",
},
[196202] = {
true,
true,
"cyan",
},
[103344] = {
true,
false,
"mediumpurple",
},
[84990] = {
true,
false,
"cyan",
},
[144071] = {
true,
false,
"gold",
},
[167611] = {
true,
true,
"blue",
},
[180091] = {
true,
true,
"blue",
},
[208438] = {
true,
false,
"indigo",
},
[129559] = {
true,
false,
"blue",
},
[91000] = {
true,
false,
"indigo",
},
[163520] = {
true,
true,
"magenta",
},
[192464] = {
true,
false,
"magenta",
},
[40634] = {
true,
false,
"cyan",
},
[208698] = {
true,
false,
"cyan",
},
[190207] = {
true,
true,
"cyan",
},
[86526] = {
true,
true,
"magenta",
},
[173714] = {
true,
true,
"blue",
},
[97720] = {
true,
false,
"fuchsia",
},
[99192] = {
true,
false,
"mediumpurple",
},
[165824] = {
true,
true,
"magenta",
},
[76104] = {
true,
true,
"magenta",
},
[199124] = {
true,
false,
"deepskyblue",
},
[205366] = {
true,
false,
"WARRIOR",
},
[127879] = {
true,
false,
"blue",
},
[179386] = {
true,
true,
"darkorange",
},
[204206] = {
true,
false,
"magenta",
},
[75652] = {
true,
true,
"blue",
},
[175992] = {
true,
false,
"fuchsia",
},
[84550] = {
true,
false,
"mediumpurple",
},
[168384] = {
true,
false,
"blue",
},
[98681] = {
true,
false,
"blue",
},
[180336] = {
true,
true,
"cyan",
},
[185528] = {
true,
false,
"cyan",
},
[189878] = {
true,
true,
"white",
},
[101549] = {
true,
false,
"cyan",
},
[165251] = {
true,
true,
"darkorange",
},
[165137] = {
true,
true,
"magenta",
},
[176573] = {
true,
false,
"fuchsia",
},
[207438] = {
true,
false,
"mediumpurple",
},
[171384] = {
true,
true,
"blue",
},
[179388] = {
true,
true,
"cyan",
},
[175550] = {
true,
false,
"fuchsia",
},
[163524] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"cyan",
},
[114802] = {
true,
true,
"indigo",
},
[115486] = {
true,
true,
"indigo",
},
[98275] = {
true,
false,
"magenta",
},
[98810] = {
true,
false,
"blue",
},
[130012] = {
true,
false,
"magenta",
},
[163862] = {
true,
true,
"blue",
},
[91006] = {
true,
false,
"cyan",
},
[157571] = {
true,
false,
"deepskyblue",
},
[23487] = {
true,
false,
"darkorange",
},
[176575] = {
true,
false,
"deepskyblue",
},
[170690] = {
true,
true,
"blue",
},
[97197] = {
true,
true,
"cyan",
},
[184023] = {
true,
false,
"blue",
},
[135474] = {
true,
false,
"cyan",
},
[114316] = {
true,
false,
"deepskyblue",
},
[194487] = {
true,
false,
"magenta",
},
[114803] = {
true,
true,
"cyan",
},
[200126] = {
true,
true,
"cyan",
},
[82594] = {
true,
true,
"indigo",
},
[84554] = {
true,
false,
"fuchsia",
},
[163620] = {
true,
true,
"indigo",
},
[195927] = {
true,
true,
"magenta",
},
[198326] = {
true,
false,
"mediumpurple",
},
[169924] = {
true,
false,
"mediumpurple",
},
[116410] = {
true,
true,
"darkorange",
},
[154020] = {
true,
false,
"deepskyblue",
},
[135048] = {
true,
false,
"WARRIOR",
},
[97788] = {
true,
true,
"indigo",
},
[45922] = {
true,
false,
"darkorange",
},
[40935] = {
true,
false,
"deepskyblue",
},
[165076] = {
true,
true,
"cyan",
},
[186246] = {
true,
false,
"cyan",
},
[114804] = {
true,
true,
"indigo",
},
[177892] = {
true,
false,
"blue",
},
[150143] = {
true,
true,
"cyan",
},
[129517] = {
true,
false,
"magenta",
},
[185534] = {
true,
false,
"magenta",
},
[115757] = {
true,
false,
"mediumpurple",
},
[91008] = {
true,
false,
"deepskyblue",
},
[100991] = {
true,
false,
"fuchsia",
},
[115244] = {
true,
true,
"blue",
},
[131545] = {
true,
false,
"mediumpurple",
},
[191164] = {
true,
true,
"blue",
},
[165414] = {
true,
true,
"cyan",
},
[169159] = {
true,
true,
"darkorange",
},
[128969] = {
true,
false,
"goldenrod",
},
[133436] = {
true,
false,
"gold",
},
[169927] = {
true,
true,
"blue",
},
[139269] = {
true,
false,
"darkorange",
},
[133593] = {
true,
false,
"honeydew",
},
[171799] = {
true,
true,
"magenta",
},
[98813] = {
true,
false,
"darkorange",
},
[167113] = {
true,
true,
"indigo",
},
[189886] = {
true,
false,
"gold",
},
[195842] = {
true,
true,
"cyan",
},
[184020] = {
true,
false,
"blue",
},
[165410] = {
true,
false,
"mediumpurple",
},
[173360] = {
true,
true,
"indigo",
},
[179733] = {
true,
false,
"fuchsia",
},
[168418] = {
true,
true,
"blue",
},
[185537] = {
true,
false,
"blue",
},
[193352] = {
true,
false,
"magenta",
},
[83761] = {
true,
true,
"blue",
},
[133870] = {
true,
false,
"magenta",
},
[189555] = {
true,
false,
"blue",
},
[168394] = {
true,
true,
"magenta",
},
[156212] = {
true,
false,
"deepskyblue",
},
[40825] = {
true,
false,
"mediumpurple",
},
[187159] = {
true,
true,
"magenta",
},
[86547] = {
true,
false,
"blue",
},
[98696] = {
true,
false,
"mediumpurple",
},
[206063] = {
true,
false,
"magenta",
},
[100486] = {
true,
false,
"fuchsia",
},
[178630] = {
true,
false,
"deepskyblue",
},
[164557] = {
true,
true,
"blue",
},
[168907] = {
true,
true,
"blue",
},
[134364] = {
true,
false,
"honeydew",
},
[155090] = {
true,
true,
"cyan",
},
[83846] = {
true,
false,
"mediumpurple",
},
[190401] = {
true,
false,
"mediumpurple",
},
[196798] = {
true,
true,
"cyan",
},
[168396] = {
true,
false,
"mediumpurple",
},
[102781] = {
true,
false,
"darkorange",
},
[213942] = {
true,
false,
"deepskyblue",
},
[134139] = {
true,
false,
"gold",
},
[150293] = {
true,
true,
"darkorange",
},
[135167] = {
true,
false,
"peru",
},
[102095] = {
true,
false,
"darkorange",
},
[113537] = {
true,
false,
"blue",
},
[134629] = {
true,
false,
"navajowhite",
},
[151127] = {
true,
false,
"fuchsia",
},
[98970] = {
true,
false,
"mediumpurple",
},
},
["hook_data"] = {
{
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["LastHookEdited"] = "",
["Time"] = 1547392935,
["Author"] = "Kastfall-Azralon",
["Name"] = "Color Automation [Plater]",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
},
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["LastHookEdited"] = "",
["Time"] = 1541606242,
["Author"] = "Izimode-Azralon",
["Name"] = "Hide Neutral Units [Plater]",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["HooksTemp"] = {
},
},
{
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1596791840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Reorder Nameplate [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["LastHookEdited"] = "",
["Time"] = 1554138845,
["Author"] = "Izimode-Azralon",
["Name"] = "Don't Have Aura [Plater]",
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
},
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["LastHookEdited"] = "",
["Time"] = 1548278227,
["Author"] = "Izimode-Azralon",
["Name"] = "Players Targeting a Target [Plater]",
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 176,
["semver"] = "",
["LastHookEdited"] = "",
["Time"] = 1547409079,
["Author"] = "Tecno-Azralon",
["Name"] = "Extra Border [Plater]",
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["LastHookEdited"] = "",
["Time"] = 1552354619,
["Author"] = "Izimode-Azralon",
["Name"] = "Current Target Color [Plater]",
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["HooksTemp"] = {
},
},
{
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1608663128,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = false,
["Revision"] = 356,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Aura Reorder [Plater]",
},
{
["LastHookEdited"] = "",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1597097268,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 348,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Icon Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconSizeOffset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Key"] = "iconPadding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.3056715726852417,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Name"] = "Texture Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureWidth",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Key"] = "textureHeightMod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Texture Position",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "texturePosition",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
},
["HooksTemp"] = {
},
["Name"] = "Cast Bar Icon Settings [P]",
},
{
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["LastHookEdited"] = "",
["Time"] = 1547406548,
["Author"] = "Ahwa-Azralon",
["Name"] = "Execute Range [Plater]",
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["HooksTemp"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1675433748,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 364,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Name"] = "Attacking Specific Unit [Plater]",
},
{
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Combo Points [Plater]",
},
{
["OptionsValues"] = {
["test"] = false,
["changecolor"] = true,
["color"] = {
0,
0.9411765336990356,
1,
1,
},
["size"] = 32,
},
["HooksTemp"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.TIF:Hide()\n    \n    local texture\n    \n    if modTable.config.test then\n        texture = modTable.RandomTexture()\n    else\n        texture = modTable.units[unitFrame.namePlateNpcId]\n    end\n    \n    if not texture then return end\n    \n    unitFrame.TIF.t:SetTexture(texture)\n    unitFrame.TIF:Show()\n    \nend\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.units[unitFrame.namePlateNpcId] or modTable.config.test then\n        if modTable.config.changecolor then\n            Plater.SetNameplateColor (unitFrame, modTable.config.color)\n        end\n        if modTable.config.hidename then\n            unitFrame.healthBar.unitName:Hide()\n        end\n        if modTable.config.hidehp then\n            unitFrame.healthBar.lifePercent:Hide()\n        end\n        if modTable.config.hideauras then\n            unitFrame.BuffFrame:Hide()\n            unitFrame.BuffFrame2:Hide()\n        end\n    end\n    \nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    modTable.units = {\n        -- war\n        [119052] = GetSpellTexture(236320), -- War Banner\n        -- sham\n        -- [3527] = GetSpellTexture(5394), -- Healing Stream Totem\n        -- [5913] = GetSpellTexture(8143), -- Tremor Totem\n        [61245] = GetSpellTexture(192058), -- Capacitor Totem\n        -- [2630] = GetSpellTexture(2484), -- Earthbind Totem\n        -- [53006] = GetSpellTexture(98008), -- Spirit Link Totem\n        [59764] = GetSpellTexture(108280), -- Healing Tide Totem\n        -- [10467] = GetSpellTexture(16191), -- Mana Tide Totem\n        -- [6112] = GetSpellTexture(8512), -- Windfury Totem\n        -- [97369] = GetSpellTexture(192222), -- Liquid Magma Totem\n        -- [100943] = GetSpellTexture(198838), -- Earthen Wall Totem\n        -- [78001] = GetSpellTexture(157153), -- Cloudburst Totem\n        -- [104818] = GetSpellTexture(207399), -- Ancestral Protection Totem\n        -- [60561] = GetSpellTexture(51485), -- Earthgrab Totem\n        [105427] = GetSpellTexture(204330), -- Skyfury Totem\n        [5925] = GetSpellTexture(204336), -- Grounding Totem\n        [105451] = GetSpellTexture(204331), -- Counterstrike Totem\n        -- [97285] = GetSpellTexture(192077), -- Wind Rush Totem\n        -- [166523] = GetSpellTexture(324386), -- Vesper Totem\n        -- tazavesh\n        [179733] = GetSpellTexture(355132),  -- Invigorating Fish Stick\n        -- lock\n        [135002] = GetSpellTexture(265187),  -- Demonic Tyrant\n    }\n    \n    modTable.RandomTexture = function()\n        local random = random(19)\n        local i = 0\n        for k, v in pairs(modTable.units) do\n            i = i+1\n            if i == random then\n                return v\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if not unitFrame.TIF then\n        -- create frame\n        local f = CreateFrame(\"Frame\", nil, unitFrame.healthBar.FrameOverlay)\n        f:SetFrameStrata(\"BACKGROUND\")\n        f:SetWidth(modTable.config.size)\n        f:SetHeight(modTable.config.size)\n        local t = f:CreateTexture(nil, \"BACKGROUND\")\n        t:SetAllPoints(f)\n        f.t = t\n        t:SetTexCoord(.08, .92, .08, .92)\n        f:SetPoint(\"BOTTOM\", unitFrame.healthBar.FrameOverlay, \"TOP\", 0, modTable.config.y)\n        f:Show() \n        unitFrame.TIF = f\n        -- create border\n        unitFrame.TIF.Border = CreateFrame(\n            \"Frame\", \n            nil, \n            f, \n            \"NamePlateFullBorderTemplate\"\n        )\n        unitFrame.TIF.Border:SetVertexColor(0, 0, 0)\n        unitFrame.TIF.Border:SetBorderSizes (0.5, 0.5, 0.5, 0.5)\n        unitFrame.TIF.Border:UpdateSizes()\n    end\n    \nend\n\n\n",
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.units[unitFrame.namePlateNpcId] or modTable.config.test then\n        if modTable.config.changecolor then\n            Plater.SetNameplateColor (unitFrame, modTable.config.color)\n        end\n        if modTable.config.hidename then\n            unitFrame.healthBar.unitName:Hide()\n        end\n        if modTable.config.hidehp then\n            unitFrame.healthBar.lifePercent:Hide()\n        end\n        if modTable.config.hideauras then\n            unitFrame.BuffFrame:Hide()\n            unitFrame.BuffFrame2:Hide()\n        end\n    end\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.TIF:Hide()\n    \n    local texture\n    \n    if modTable.config.test then\n        texture = modTable.RandomTexture()\n    else\n        texture = modTable.units[unitFrame.namePlateNpcId]\n    end\n    \n    if not texture then return end\n    \n    unitFrame.TIF.t:SetTexture(texture)\n    unitFrame.TIF:Show()\n    \nend\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    \n    modTable.units = {\n        -- war\n        [119052] = GetSpellTexture(236320), -- War Banner\n        -- sham\n        -- [3527] = GetSpellTexture(5394), -- Healing Stream Totem\n        -- [5913] = GetSpellTexture(8143), -- Tremor Totem\n        [61245] = GetSpellTexture(192058), -- Capacitor Totem\n        -- [2630] = GetSpellTexture(2484), -- Earthbind Totem\n        -- [53006] = GetSpellTexture(98008), -- Spirit Link Totem\n        [59764] = GetSpellTexture(108280), -- Healing Tide Totem\n        -- [10467] = GetSpellTexture(16191), -- Mana Tide Totem\n        -- [6112] = GetSpellTexture(8512), -- Windfury Totem\n        -- [97369] = GetSpellTexture(192222), -- Liquid Magma Totem\n        -- [100943] = GetSpellTexture(198838), -- Earthen Wall Totem\n        -- [78001] = GetSpellTexture(157153), -- Cloudburst Totem\n        -- [104818] = GetSpellTexture(207399), -- Ancestral Protection Totem\n        -- [60561] = GetSpellTexture(51485), -- Earthgrab Totem\n        [105427] = GetSpellTexture(204330), -- Skyfury Totem\n        [5925] = GetSpellTexture(204336), -- Grounding Totem\n        [105451] = GetSpellTexture(204331), -- Counterstrike Totem\n        -- [97285] = GetSpellTexture(192077), -- Wind Rush Totem\n        -- [166523] = GetSpellTexture(324386), -- Vesper Totem\n        -- tazavesh\n        [179733] = GetSpellTexture(355132),  -- Invigorating Fish Stick\n        -- lock\n        [135002] = GetSpellTexture(265187),  -- Demonic Tyrant\n    }\n    \n    modTable.RandomTexture = function()\n        local random = random(19)\n        local i = 0\n        for k, v in pairs(modTable.units) do\n            i = i+1\n            if i == random then\n                return v\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if not unitFrame.TIF then\n        -- create frame\n        local f = CreateFrame(\"Frame\", nil, unitFrame.healthBar.FrameOverlay)\n        f:SetFrameStrata(\"BACKGROUND\")\n        f:SetWidth(modTable.config.size)\n        f:SetHeight(modTable.config.size)\n        local t = f:CreateTexture(nil, \"BACKGROUND\")\n        t:SetAllPoints(f)\n        f.t = t\n        t:SetTexCoord(.08, .92, .08, .92)\n        f:SetPoint(\"BOTTOM\", unitFrame.healthBar.FrameOverlay, \"TOP\", 0, modTable.config.y)\n        f:Show() \n        unitFrame.TIF = f\n        -- create border\n        unitFrame.TIF.Border = CreateFrame(\n            \"Frame\", \n            nil, \n            f, \n            \"NamePlateFullBorderTemplate\"\n        )\n        unitFrame.TIF.Border:SetVertexColor(0, 0, 0)\n        unitFrame.TIF.Border:SetBorderSizes (0.5, 0.5, 0.5, 0.5)\n        unitFrame.TIF.Border:UpdateSizes()\n    end\n    \nend\n\n\n",
},
["Time"] = 1702034694,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/LBLLVTl9f/6",
["Icon"] = 3615519,
["Enabled"] = true,
["Revision"] = 837,
["Options"] = {
{
["Type"] = 4,
["Name"] = "test mode",
["Value"] = false,
["Key"] = "test",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "delim",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "size and positioning",
["Value"] = "size & positioning",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 256,
["Desc"] = "",
["Min"] = 32,
["Fraction"] = false,
["Value"] = 50,
["Key"] = "size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "icon size",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "anchor = topcenter",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "y",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "y offset",
},
{
["Type"] = 6,
["Name"] = "delim",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "color options",
["Value"] = "plate color",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "change color",
["Value"] = true,
["Key"] = "changecolor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "plate color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "delim",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "other options",
["Value"] = "other",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "hide name",
["Value"] = true,
["Key"] = "hidename",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "hide health text",
["Value"] = true,
["Key"] = "hidehp",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Max"] = 256,
["Desc"] = "",
["Min"] = 32,
["Fraction"] = false,
["Value"] = 50,
["Key"] = "hideauras",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Name"] = "hide auras",
},
},
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["version"] = 6,
["PlaterCore"] = 1,
["semver"] = "1.0.5",
["LastHookEdited"] = "",
["Name"] = "PVP Plate Icons",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.updatePosition = function(unitFrame)\n        if \n        unitFrame.PlaterRaidTargetFrame and \n        unitFrame.PlaterRaidTargetFrame.RaidTargetIcon and\n        unitFrame.PlaterRaidTargetFrame.RaidTargetIcon:IsShown()  then\n            --2 for enemy, 4 for neutral or 5 for friendly\n            if unitFrame.namePlateUnitReaction == 5 then\n                unitFrame.PlaterRaidTargetFrame:ClearAllPoints()\n                unitFrame.PlaterRaidTargetFrame:SetPoint(\"BOTTOM\", unitFrame.ActorNameSpecial, \"TOP\", 0, modTable.config.y)\n            end\n        end\n    end\n    \nend\n\n\n",
["Raid Target"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend",
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.updatePosition = function(unitFrame)\n        if \n        unitFrame.PlaterRaidTargetFrame and \n        unitFrame.PlaterRaidTargetFrame.RaidTargetIcon and\n        unitFrame.PlaterRaidTargetFrame.RaidTargetIcon:IsShown()  then\n            --2 for enemy, 4 for neutral or 5 for friendly\n            if unitFrame.namePlateUnitReaction == 5 then\n                unitFrame.PlaterRaidTargetFrame:ClearAllPoints()\n                unitFrame.PlaterRaidTargetFrame:SetPoint(\"BOTTOM\", unitFrame.ActorNameSpecial, \"TOP\", 0, modTable.config.y)\n            end\n        end\n    end\n    \nend\n\n\n",
["Raid Target"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend",
},
["Time"] = 1675446349,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/g5ra-5gil/1",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 139,
["Options"] = {
{
["Type"] = 2,
["Max"] = 30,
["Desc"] = "",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "y",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "y offset from unit name",
},
},
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["semver"] = "1.0.0",
["LastHookEdited"] = "",
["Name"] = "Friendly Raid Mark",
},
{
["OptionsValues"] = {
["iconAnchorSide"] = 2,
["iconAnchorY"] = 2,
["iconAnchorX"] = 16,
["iconSize"] = 14,
["textFontFace"] = "GennUI",
["textSize"] = 8,
["textColor"] = {
1,
1,
1,
1,
},
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local strText = \"\"\n    \n    if unitFrame and unitFrame.namePlateIsQuestObjective then\n        unitFrame.healthBar:Show()\n        \n        --check for only in combat\n        if (not modTable.config['ShowInCombat'] and InCombatLockdown()) then\n            unitFrame.questProgressIconFrame:Hide();\n            unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n            return \n        end\n        \n        for i, questInfo in ipairs(unitFrame.QuestInfo) do\n            if questInfo.yourQuest and not questInfo.finished then\n                local qtext = questInfo.questText:lower()\n                local name, realm = UnitName(unitId)\n                \n                local name_segments = {}\n                for w in string.gmatch (name, \"%w+\") do\n                    name_segments[#name_segments + 1] = w\n                end\n                name = string.lower(name_segments[1])\n                \n                -- Kill Quest\n                if questInfo.total\n                and (string.find(qtext, \"slain\") \n                    or string.find(qtext, \"killed\") \n                    or string.find(qtext, \"subdued\")\n                    or string.find(qtext, \"protect\")\n                    or string.find(qtext, name))\n                then\n                    strText = questInfo.total - questInfo.amount\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconSkull);\n                    break\n                    \n                    -- Loot Quest\n                elseif questInfo.total then\n                    strText = questInfo.total - questInfo.amount\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconBag);\n                    break\n                    \n                    -- Percentage quest\n                elseif not questInfo.total then\n                    local curr = questInfo.amount or 0\n                    if modTable.config['percentRemaining'] then\n                        strText = math.floor(100 - curr) .. \"%\"\n                    else\n                        strText = math.floor(curr) .. \"%\"\n                    end\n                    if unitFrame.PlayerCannotAttack then\n                        unitFrame.questProgressIconFrame:SetTexture (envTable.iconQuest);\n                        break\n                    else\n                        unitFrame.questProgressIconFrame:SetTexture (envTable.iconSkull);\n                        break\n                    end\n                    \n                    -- Use item quest\n                else\n                    strText = unitFrame.QuestAmountTotal - (unitFrame.QuestAmountCurrent or 0)\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconQuestParts);\n                    break                    \n                end\n            end \n        end\n        \n        unitFrame.questProgressIconFrame:Show();\n        unitFrame.healthBar.questProgressTextFrame:SetText(strText)\n    else\n        unitFrame.questProgressIconFrame:Hide();\n        unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n    end\nend\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    --insert code here\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- positioning\n    local iconAnchor = {\n        side = modTable.config['iconAnchorSide'],\n        x = modTable.config['iconAnchorX'],\n        y = modTable.config['iconAnchorY'],\n    };\n    \n    -- icon options\n    envTable.iconSkull = [[Interface\\TargetingFrame\\UI-RaidTargetingIcon_8]];\n    envTable.iconBag = [[Interface\\GroupFrame\\UI-Group-MasterLooter]];\n    envTable.iconQuest = [[Interface\\GossipFrame\\AvailableQuestIcon]];\n    envTable.iconQuestParts = [[Interface\\QuestFrame\\AutoQuest-Parts]]\n    \n    ------------------------------------------------------------------------------------------------------------- \n    --frames:\n    \n    --create the icon frame that will show the quest need\n    envTable.questProgressIconFrame = unitFrame.questProgressIconFrame or unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n    envTable.questProgressIconFrame:SetTexture (modTable.config['iconQuest'])\n    envTable.questProgressIconFrame:SetSize (modTable.config['iconSize'], modTable.config['iconSize'])\n    \n    --Plater:SetFrameStrata (envTable.questProgressIconFrame, modTable.config['iconStrata']);\n    --envTable.questProgressIconFrame:SetFrameStrata (modTable.config['iconStrata'])\n    Plater.SetAnchor (envTable.questProgressIconFrame, iconAnchor)\n    unitFrame.questProgressIconFrame = envTable.questProgressIconFrame\n    \n    \n    --create the text frame that will show the quest progress\n    envTable.questProgressTextFrame = unitFrame.healthBar.questProgressTextFrame or Plater:CreateLabel (unitFrame.healthBar);\n    Plater:SetFontFace (envTable.questProgressTextFrame, modTable.config['textFontFace']);\n    Plater:SetFontSize (envTable.questProgressTextFrame, modTable.config['textSize']);\n    Plater:SetFontColor (envTable.questProgressTextFrame, modTable.config['textColor']);\n    Plater:SetFontOutline (envTable.questProgressTextFrame, modTable.config['textOutline']);\n    DetailsFramework:SetFontShadow (envTable.questProgressTextFrame, 0, 0, 0, modTable.config['textShadowAlpha']);\n    envTable.questProgressTextFrame:SetPoint (modTable.config['textAnchor'], unitFrame.questProgressIconFrame, modTable.config['textIconAnchor'], modTable.config['textX'], modTable.config['textY']);\n    unitFrame.healthBar.questProgressTextFrame = envTable.questProgressTextFrame\n    envTable.questProgressTextFrame:SetText(\"\")\n    \nend",
},
["Time"] = 1722896035,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/PMdq2Rg_N/23",
["Icon"] = "INTERFACE\\ICONS\\Ability_Hunter_SniperShot",
["Enabled"] = true,
["Revision"] = 4652,
["semver"] = "1.0.22",
["Author"] = "Evolutious",
["Desc"] = "Adds a text indicator for quest progress to show how many times the objective has to be completed.",
["Prio"] = 99,
["Name"] = "QuestProgress",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Quest Percent Remaining",
["Value"] = false,
["Key"] = "percentRemaining",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set this if you want percent based quests to reflect the amount progressed or the amount remaining.",
},
{
["Type"] = 4,
["Name"] = "Show In Combat",
["Value"] = true,
["Key"] = "ShowInCombat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "This setting determins if quest NPC nameplates are always shown when in combat, even if not targeted or engaged",
},
{
["Type"] = 6,
["Name"] = "Option 17",
["Value"] = 0,
["Key"] = "option17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 16",
["Value"] = "Changing the below settings require a /reload to take effect",
["Key"] = "option16",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
0.36862745098039,
0,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Sets the text color",
},
{
["Type"] = 3,
["Name"] = "Text Font",
["Value"] = "Friz Quadrata TT",
["Key"] = "textFontFace",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Set this to the font you wish to use over the quest icon. You will need to set this manually. Default is: Friz Quadrata TT",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Sets the text size",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "textSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 3,
["Name"] = "Text Outline",
["Value"] = "OUTLINE",
["Key"] = "textOutline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Set the outline of the text. Options: NONE, OUTLINE, THICKOUTLINE. Default is: OUTLINE",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Sets the text shadow alpha. Options: 0 = Transparent, 1 = 100% Solid",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "textShadowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Shadow Alpha",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Adjusts the text left and right",
["Min"] = -64,
["Fraction"] = false,
["Value"] = 2,
["Key"] = "textX",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text X Offset",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Adjusts the text up and down",
["Min"] = -64,
["Fraction"] = false,
["Value"] = -4,
["Key"] = "textY",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Y Offset",
},
{
["Type"] = 3,
["Name"] = "Text Anchor",
["Value"] = "CENTER",
["Key"] = "textAnchor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Sets the anchor point for the text. Options: CENTER, TOP BOTTOM, TOPLEFT, LEFT, BOTTOMLEFT, TOPRIGHT, RIGHT, BOTTOMRIGHT",
},
{
["Type"] = 3,
["Name"] = "Text Anchor to Icon",
["Value"] = "CENTER",
["Key"] = "textIconAnchor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Sets the anchor point for the text relative to the icon. Options: CENTER, TOP BOTTOM, TOPLEFT, LEFT, BOTTOMLEFT, TOPRIGHT, RIGHT, BOTTOMRIGHT",
},
{
["Type"] = 6,
["Name"] = "Option 22",
["Value"] = 0,
["Key"] = "option22",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Sets the icon size",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 12,
["Key"] = "iconSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Size",
},
{
["Type"] = 2,
["Max"] = 8,
["Desc"] = "Sets the anchor point for the icon. Options: 1 = TOP LEFT, 2 = LEFT, 3 = BOTTOM LEFT, 4 = BOTTOM, 5 = BOTTOM RIGHT, 6 = RIGHT, 7 = TOP RIGHT, 8 = TOP",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 6,
["Key"] = "iconAnchorSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Anchor Side",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Adjusts the icon left and right",
["Min"] = -64,
["Fraction"] = false,
["Value"] = 4,
["Key"] = "iconAnchorX",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Anchor X Offset",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Adjusts the icon up and down",
["Min"] = -64,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "iconAnchorY",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "icon Anchor Y Offset",
},
{
["Type"] = 3,
["Name"] = "Icon Strata",
["Value"] = "BACKGROUND",
["Key"] = "iconStrata",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Set the icon strata. Options: BACKGROUND, LOW, MEDIUM, HIGH, DIALOG, FULLSCREEN, FULLSCREEN_DIALOG, TOOLTIP",
},
{
["Type"] = 6,
["Name"] = "Option 16",
["Value"] = 0,
["Key"] = "option16",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local strText = \"\"\n    \n    if unitFrame and unitFrame.namePlateIsQuestObjective then\n        unitFrame.healthBar:Show()\n        \n        --check for only in combat\n        if (not modTable.config['ShowInCombat'] and InCombatLockdown()) then\n            unitFrame.questProgressIconFrame:Hide();\n            unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n            return \n        end\n        \n        for i, questInfo in ipairs(unitFrame.QuestInfo) do\n            if questInfo.yourQuest and not questInfo.finished then\n                local qtext = questInfo.questText:lower()\n                local name, realm = UnitName(unitId)\n                \n                local name_segments = {}\n                for w in string.gmatch (name, \"%w+\") do\n                    name_segments[#name_segments + 1] = w\n                end\n                name = string.lower(name_segments[1])\n                \n                -- Kill Quest\n                if questInfo.total\n                and (string.find(qtext, \"slain\") \n                    or string.find(qtext, \"killed\") \n                    or string.find(qtext, \"subdued\")\n                    or string.find(qtext, \"protect\")\n                    or string.find(qtext, name))\n                then\n                    strText = questInfo.total - questInfo.amount\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconSkull);\n                    break\n                    \n                    -- Loot Quest\n                elseif questInfo.total then\n                    strText = questInfo.total - questInfo.amount\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconBag);\n                    break\n                    \n                    -- Percentage quest\n                elseif not questInfo.total then\n                    local curr = questInfo.amount or 0\n                    if modTable.config['percentRemaining'] then\n                        strText = math.floor(100 - curr) .. \"%\"\n                    else\n                        strText = math.floor(curr) .. \"%\"\n                    end\n                    if unitFrame.PlayerCannotAttack then\n                        unitFrame.questProgressIconFrame:SetTexture (envTable.iconQuest);\n                        break\n                    else\n                        unitFrame.questProgressIconFrame:SetTexture (envTable.iconSkull);\n                        break\n                    end\n                    \n                    -- Use item quest\n                else\n                    strText = unitFrame.QuestAmountTotal - (unitFrame.QuestAmountCurrent or 0)\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconQuestParts);\n                    break                    \n                end\n            end \n        end\n        \n        unitFrame.questProgressIconFrame:Show();\n        unitFrame.healthBar.questProgressTextFrame:SetText(strText)\n    else\n        unitFrame.questProgressIconFrame:Hide();\n        unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n    end\nend\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    --insert code here\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- positioning\n    local iconAnchor = {\n        side = modTable.config['iconAnchorSide'],\n        x = modTable.config['iconAnchorX'],\n        y = modTable.config['iconAnchorY'],\n    };\n    \n    -- icon options\n    envTable.iconSkull = [[Interface\\TargetingFrame\\UI-RaidTargetingIcon_8]];\n    envTable.iconBag = [[Interface\\GroupFrame\\UI-Group-MasterLooter]];\n    envTable.iconQuest = [[Interface\\GossipFrame\\AvailableQuestIcon]];\n    envTable.iconQuestParts = [[Interface\\QuestFrame\\AutoQuest-Parts]]\n    \n    ------------------------------------------------------------------------------------------------------------- \n    --frames:\n    \n    --create the icon frame that will show the quest need\n    envTable.questProgressIconFrame = unitFrame.questProgressIconFrame or unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n    envTable.questProgressIconFrame:SetTexture (modTable.config['iconQuest'])\n    envTable.questProgressIconFrame:SetSize (modTable.config['iconSize'], modTable.config['iconSize'])\n    \n    --Plater:SetFrameStrata (envTable.questProgressIconFrame, modTable.config['iconStrata']);\n    --envTable.questProgressIconFrame:SetFrameStrata (modTable.config['iconStrata'])\n    Plater.SetAnchor (envTable.questProgressIconFrame, iconAnchor)\n    unitFrame.questProgressIconFrame = envTable.questProgressIconFrame\n    \n    \n    --create the text frame that will show the quest progress\n    envTable.questProgressTextFrame = unitFrame.healthBar.questProgressTextFrame or Plater:CreateLabel (unitFrame.healthBar);\n    Plater:SetFontFace (envTable.questProgressTextFrame, modTable.config['textFontFace']);\n    Plater:SetFontSize (envTable.questProgressTextFrame, modTable.config['textSize']);\n    Plater:SetFontColor (envTable.questProgressTextFrame, modTable.config['textColor']);\n    Plater:SetFontOutline (envTable.questProgressTextFrame, modTable.config['textOutline']);\n    DetailsFramework:SetFontShadow (envTable.questProgressTextFrame, 0, 0, 0, modTable.config['textShadowAlpha']);\n    envTable.questProgressTextFrame:SetPoint (modTable.config['textAnchor'], unitFrame.questProgressIconFrame, modTable.config['textIconAnchor'], modTable.config['textX'], modTable.config['textY']);\n    unitFrame.healthBar.questProgressTextFrame = envTable.questProgressTextFrame\n    envTable.questProgressTextFrame:SetText(\"\")\n    \nend",
},
["version"] = 23,
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1680360347,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/N9tiB9mO2/1",
["Icon"] = 133006,
["Enabled"] = true,
["Revision"] = 118,
["Options"] = {
},
["Author"] = "????????-Illidan",
["Desc"] = "Config aura borders",
["Prio"] = 99,
["Name"] = "Advanced Debuff Border",
["PlaterCore"] = 1,
["semver"] = "1.0.0",
["LastHookEdited"] = "",
["version"] = 1,
},
{
["OptionsValues"] = {
["ignore_color_changes"] = true,
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local unitFrameGUID = UnitGUID(self.unit)\n    \n    if modTable.shouldIgnoreNpcId(self) or\n    not Plater.IsInCombat() or \n    not self.InCombat or \n    UnitPlayerControlled(self.unit)\n    then\n        envTable.hideAggroOverlay(self);\n        return\n    end        \n    \n    local targetGUID = UnitGUID(self.targetUnitID or '')\n    \n    if (targetGUID and targetGUID ~= self._lastTargetUnitID) then\n        self._lastTargetUnitID = targetGUID\n        if (modTable.playerHasAggro(self)) then\n            envTable.showAggroOverlay(self);\n        else\n            envTable.hideAggroOverlay(self);\n        end\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local unitFrameGUID = UnitGUID(self.unit)\n    \n    if modTable.shouldIgnoreNpcId(self) or\n    not Plater.IsInCombat() or \n    not self.InCombat or \n    UnitPlayerControlled(self.unit)\n    then\n        envTable.hideAggroOverlay(self);\n        return\n    end        \n    \n    local targetGUID = UnitGUID(self.targetUnitID or '')\n    \n    if (targetGUID and targetGUID ~= self._lastTargetUnitID) then\n        self._lastTargetUnitID = targetGUID\n        if (modTable.playerHasAggro(self)) then\n            envTable.showAggroOverlay(self);\n        else\n            envTable.hideAggroOverlay(self);\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    --[[\n        Checks if npcId should be ignored or not\n\n        @param  {Plater.unitFrame}  unitFrame\n\n        @return {bool}\n    --]]\n    function modTable.shouldIgnoreNpcId(unitFrame)\n        local unitId = unitFrame.unitId\n        \n        return unitFrame.isPerformanceUnit\n    end\n    \n    --[[\n        Checks if player has aggro\n\n        @return {Boolean}\n    --]]\n    function modTable.playerHasAggro(unitFrame)\n        if (modTable.config['testing'] == true) then\n            if (not modTable.config['ignore_color_changes']) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro);\n            end\n            \n            return true;\n        end\n        \n        if (not Plater.IsInCombat()) then\n            return false;\n        end\n        \n        if (not unitFrame.InCombat) then\n            return false;\n        end\n        \n        if (UnitPlayerControlled(unitFrame.unit)) then\n            return false;\n        end\n        \n        if (Plater.PlayerIsTank) then\n            if (not unitFrame.namePlateThreatIsTanking) then\n                if (not modTable.config['ignore_color_changes']) then\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro);\n                end\n                \n                return true;\n            else\n                return false;\n            end\n        else\n            local tanks = Plater.GetTanks();\n            local targetOfTarget = UnitName(unitFrame.targetUnitID or '');\n            local targetOfTargetIsPlayer = targetOfTarget == UnitName('player');\n            local unitIsNotAttackingTank = false;\n            \n            if (Plater.db.profile.aggro_can_check_notank) then\n                unitIsNotAttackingTank = (\n                    targetOfTarget and \n                    not tanks[targetOfTarget]\n                );\n            end\n            \n            if (unitFrame.namePlateThreatIsTanking or unitIsNotAttackingTank) then\n                if (Plater.db.profile.aggro_can_check_notank and unitIsNotAttackingTank and not targetOfTargetIsPlayer) then\n                    if (not modTable.config['ignore_color_changes']) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.notontank);\n                    end\n                else\n                    if (not modTable.config['ignore_color_changes']) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro);\n                    end\n                end\n                \n                return true;\n            else\n                return false;\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local textureHeight = self.healthBar:GetHeight() * 4;\n    local textureWidth = textureHeight * 2;\n    \n    unitFrame._currentColor = nil;\n    \n    --[[\n        @var {Table}\n    --]]\n    envTable.TEXTURE_CONFIG = {\n        ['height'] = textureHeight,\n        ['width'] = textureWidth\n    };\n    \n    --[[\n        @var {String}\n    --]]\n    envTable.TEXTURE_PATH = [[Interface\\Addons\\SharedMedia_MyMedia\\background\\Neon_AggroOverlayWhiteSingle.tga]];\n    \n    --[[ \n        Creates the overlay frame if it doesn't exist\n    \n        @param  {Plater.unitFrame}  unitFrame\n    \n        @return {void}\n    --]]\n    function envTable.createFrameIfNotExists(unitFrame)\n        local healthBar = unitFrame.healthBar;\n        \n        if (not healthBar.aggroOverlayLeft) then\n            healthBar.aggroOverlayLeft = envTable.createOverlayFrame(\n                healthBar, \n                'left', \n                -10 - math.floor(envTable.TEXTURE_CONFIG['width'] / 2), \n                0\n            );\n            \n            healthBar.aggroOverlayLeft.overlayTexture:SetTexCoord(0, 1, 1, 0);\n        end\n        \n        if (not healthBar.aggroOverlayRight) then\n            healthBar.aggroOverlayRight = envTable.createOverlayFrame(\n                healthBar, \n                'right', \n                10 + math.floor(envTable.TEXTURE_CONFIG['width'] / 2), \n                0\n            );\n            \n            healthBar.aggroOverlayRight.overlayTexture:SetTexCoord(1, 0, 0, 1);\n        end\n        \n        if (not healthBar.targetOfTargetText) then\n            unitFrame._currentTargetName = '';\n            healthBar.targetOfTargetText = envTable.createTargetOfTargetFrame(\n                healthBar\n            );\n        end\n    end\n    \n    --[[\n        Creates the target of target text frame\n\n        @param  {Plater.unitFrame.healthBar}  healthBar\n\n        @return {Frame}\n    --]]\n    function envTable.createTargetOfTargetFrame(healthBar)\n        local textFrame = Plater:CreateLabel(healthBar);        \n        textFrame:SetPoint('topleft', healthBar, 'topleft', 0, 5);\n        textFrame.textcolor = 'white';\n        textFrame.textsize = 7;\n        textFrame.outline = 'OUTLINE';\n        textFrame:Show();\n        \n        return textFrame;\n    end\n    \n    --[[ \n        Creates the overlay frame\n    \n        @param  {Plater.unitFrame.healthbar}  healthBar\n        @param  {String}  originPoint\n        @param  {Number}  posX\n        @param  {Number}  posY\n    \n        @return {Frame}\n    --]]\n    function envTable.createOverlayFrame(healthBar, originPoint, posX, posY)\n        local overlayFrame = CreateFrame('frame', nil, healthBar);\n        overlayFrame:SetFrameLevel(healthBar:GetFrameLevel());\n        overlayFrame:SetPoint(originPoint, healthBar, originPoint, posX, posY);\n        \n        local overlayColorR, overlayColorG, overlayColorB = DetailsFramework:ParseColors (Plater.db.profile.tank.colors.noaggro);\n        local overlayTexture = Plater:CreateImage(overlayFrame, envTable.TEXTURE_PATH);\n        overlayTexture:SetVertexColor(overlayColorR, overlayColorG, overlayColorB);\n        overlayTexture:SetPoint(originPoint, healthBar, originPoint, posX, posY);\n        overlayTexture:SetSize(envTable.TEXTURE_CONFIG['width'], envTable.TEXTURE_CONFIG['height']);\n        \n        overlayFrame.overlayTexture = overlayTexture;\n        overlayFrame:Show();\n        \n        return overlayFrame;\n    end\n    \n    --[[\n        Creates the target of target text frame\n\n        @param  {Plater.unitFrame}  unitFrame\n        @param  {String}  targetUnitID\n\n        @return {Frame}\n    --]]\n    function envTable.updateTargetOfTarget(unitFrame, targetUnitID)\n        local targetText = unitFrame.healthBar.targetOfTargetText;\n        local targetUnitName = UnitName(targetUnitID or '') or '';\n        \n        if modTable.config['disableTargetOfTarget'] then\n            targetUnitName = ' '\n        end\n        \n        if (targetUnitName == UnitName('player')) then\n            targetUnitName = '';\n        end\n        \n        if (unitFrame._currentTargetName == targetUnitName) then\n            return;\n        end\n        \n        unitFrame._currentTargetName = targetUnitName;\n        targetText.text = targetUnitName;\n        \n        local _, class = UnitClass(targetUnitID or '');\n        \n        if (class and UnitIsPlayer(targetUnitID or '')) then\n            targetText.textcolor = DetailsFramework:ParseColors(class);\n        else\n            targetText.textcolor = Plater.db.profile.castbar_target_color;\n        end\n    end\n    \n    --[[\n        Updates the aggro overlay texture color\n\n        @param  {Plater.unitFrame}  unitFrame\n\n        @return {void}\n    --]]\n    function envTable.updateAggroOverlayColor(unitFrame)\n        local colorR, colorG, colorB, colorA = DetailsFramework:ParseColors(unitFrame.healthBar:GetColor());\n        local qualifiedColor = envTable.qualifyColor(colorR, colorG, colorB, colorA);\n        \n        if (unitFrame._currentColor == qualifiedColor) then\n            return;\n        end\n        \n        unitFrame._currentColor = qualifiedColor;\n        \n        unitFrame.healthBar.aggroOverlayRight.overlayTexture:SetVertexColor(colorR, colorG, colorB);\n        unitFrame.healthBar.aggroOverlayLeft.overlayTexture:SetVertexColor(colorR, colorG, colorB);\n    end\n    \n    --[[\n        Qualifies a color to a cacheable string\n\n        @param  {Number}  r\n        @param  {Number}  g\n        @param  {Number}  b\n        @param  {Number}  a\n\n        @return {String}\n    --]]\n    function envTable.qualifyColor(r, g, b, a)\n        return tostring(r) .. tostring(g) .. tostring(b) .. tostring(a);\n    end\n    \n    --[[ \n        Shows the overlay frames\n\n        @param  {Plater.unitFrame}  unitFrame\n\n        @return {void}\n    --]]\n    function envTable.showAggroOverlay(unitFrame)\n        envTable.createFrameIfNotExists(unitFrame);\n        envTable.updateTargetOfTarget(unitFrame, unitFrame.targetUnitID);\n        unitFrame.healthBar.aggroOverlayLeft.overlayTexture:Show();\n        unitFrame.healthBar.aggroOverlayRight.overlayTexture:Show();\n        envTable.updateAggroOverlayColor(unitFrame);\n    end\n    \n    --[[ \n        Hides the overlay frames\n\n        @return {void}\n    --]]\n    function envTable.hideAggroOverlay(unitFrame)\n        envTable.createFrameIfNotExists(unitFrame);\n        envTable.updateTargetOfTarget(unitFrame, nil);\n        unitFrame.healthBar.aggroOverlayLeft.overlayTexture:Hide();\n        unitFrame.healthBar.aggroOverlayRight.overlayTexture:Hide();\n        envTable.updateAggroOverlayColor(unitFrame);\n    end\nend",
},
["Time"] = 1705683379,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/AUO8fWcea/8",
["Icon"] = 237529,
["Enabled"] = true,
["Revision"] = 453,
["semver"] = "2.1.3",
["Author"] = "Allessiel-Azralon",
["Desc"] = "Smart aggro overlay to nameplates",
["Prio"] = 99,
["Name"] = "Allessiel Smart Aggro Overlay for Tanks",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Test Mode",
["Value"] = false,
["Key"] = "testing",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Don't override Nameplate color",
["Value"] = false,
["Key"] = "ignore_color_changes",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Check this to prevent this mod to forcefully change the nameplate color.",
},
{
["Type"] = 4,
["Name"] = "Disable Target of Target",
["Value"] = false,
["Key"] = "disableTargetOfTarget",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local unitFrameGUID = UnitGUID(self.unit)\n    \n    if modTable.shouldIgnoreNpcId(self) or\n    not Plater.IsInCombat() or \n    not self.InCombat or \n    UnitPlayerControlled(self.unit)\n    then\n        envTable.hideAggroOverlay(self);\n        return\n    end        \n    \n    local targetGUID = UnitGUID(self.targetUnitID or '')\n    \n    if (targetGUID and targetGUID ~= self._lastTargetUnitID) then\n        self._lastTargetUnitID = targetGUID\n        if (modTable.playerHasAggro(self)) then\n            envTable.showAggroOverlay(self);\n        else\n            envTable.hideAggroOverlay(self);\n        end\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local unitFrameGUID = UnitGUID(self.unit)\n    \n    if modTable.shouldIgnoreNpcId(self) or\n    not Plater.IsInCombat() or \n    not self.InCombat or \n    UnitPlayerControlled(self.unit)\n    then\n        envTable.hideAggroOverlay(self);\n        return\n    end        \n    \n    local targetGUID = UnitGUID(self.targetUnitID or '')\n    \n    if (targetGUID and targetGUID ~= self._lastTargetUnitID) then\n        self._lastTargetUnitID = targetGUID\n        if (modTable.playerHasAggro(self)) then\n            envTable.showAggroOverlay(self);\n        else\n            envTable.hideAggroOverlay(self);\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    --[[\n        Checks if npcId should be ignored or not\n\n        @param  {Plater.unitFrame}  unitFrame\n\n        @return {bool}\n    --]]\n    function modTable.shouldIgnoreNpcId(unitFrame)\n        local unitId = unitFrame.unitId\n        \n        return unitFrame.isPerformanceUnit\n    end\n    \n    --[[\n        Checks if player has aggro\n\n        @return {Boolean}\n    --]]\n    function modTable.playerHasAggro(unitFrame)\n        if (modTable.config['testing'] == true) then\n            if (not modTable.config['ignore_color_changes']) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro);\n            end\n            \n            return true;\n        end\n        \n        if (not Plater.IsInCombat()) then\n            return false;\n        end\n        \n        if (not unitFrame.InCombat) then\n            return false;\n        end\n        \n        if (UnitPlayerControlled(unitFrame.unit)) then\n            return false;\n        end\n        \n        if (Plater.PlayerIsTank) then\n            if (not unitFrame.namePlateThreatIsTanking) then\n                if (not modTable.config['ignore_color_changes']) then\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro);\n                end\n                \n                return true;\n            else\n                return false;\n            end\n        else\n            local tanks = Plater.GetTanks();\n            local targetOfTarget = UnitName(unitFrame.targetUnitID or '');\n            local targetOfTargetIsPlayer = targetOfTarget == UnitName('player');\n            local unitIsNotAttackingTank = false;\n            \n            if (Plater.db.profile.aggro_can_check_notank) then\n                unitIsNotAttackingTank = (\n                    targetOfTarget and \n                    not tanks[targetOfTarget]\n                );\n            end\n            \n            if (unitFrame.namePlateThreatIsTanking or unitIsNotAttackingTank) then\n                if (Plater.db.profile.aggro_can_check_notank and unitIsNotAttackingTank and not targetOfTargetIsPlayer) then\n                    if (not modTable.config['ignore_color_changes']) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.notontank);\n                    end\n                else\n                    if (not modTable.config['ignore_color_changes']) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro);\n                    end\n                end\n                \n                return true;\n            else\n                return false;\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local textureHeight = self.healthBar:GetHeight() * 4;\n    local textureWidth = textureHeight * 2;\n    \n    unitFrame._currentColor = nil;\n    \n    --[[\n        @var {Table}\n    --]]\n    envTable.TEXTURE_CONFIG = {\n        ['height'] = textureHeight,\n        ['width'] = textureWidth\n    };\n    \n    --[[\n        @var {String}\n    --]]\n    envTable.TEXTURE_PATH = [[Interface\\Addons\\SharedMedia_MyMedia\\background\\Neon_AggroOverlayWhiteSingle.tga]];\n    \n    --[[ \n        Creates the overlay frame if it doesn't exist\n    \n        @param  {Plater.unitFrame}  unitFrame\n    \n        @return {void}\n    --]]\n    function envTable.createFrameIfNotExists(unitFrame)\n        local healthBar = unitFrame.healthBar;\n        \n        if (not healthBar.aggroOverlayLeft) then\n            healthBar.aggroOverlayLeft = envTable.createOverlayFrame(\n                healthBar, \n                'left', \n                -10 - math.floor(envTable.TEXTURE_CONFIG['width'] / 2), \n                0\n            );\n            \n            healthBar.aggroOverlayLeft.overlayTexture:SetTexCoord(0, 1, 1, 0);\n        end\n        \n        if (not healthBar.aggroOverlayRight) then\n            healthBar.aggroOverlayRight = envTable.createOverlayFrame(\n                healthBar, \n                'right', \n                10 + math.floor(envTable.TEXTURE_CONFIG['width'] / 2), \n                0\n            );\n            \n            healthBar.aggroOverlayRight.overlayTexture:SetTexCoord(1, 0, 0, 1);\n        end\n        \n        if (not healthBar.targetOfTargetText) then\n            unitFrame._currentTargetName = '';\n            healthBar.targetOfTargetText = envTable.createTargetOfTargetFrame(\n                healthBar\n            );\n        end\n    end\n    \n    --[[\n        Creates the target of target text frame\n\n        @param  {Plater.unitFrame.healthBar}  healthBar\n\n        @return {Frame}\n    --]]\n    function envTable.createTargetOfTargetFrame(healthBar)\n        local textFrame = Plater:CreateLabel(healthBar);        \n        textFrame:SetPoint('topleft', healthBar, 'topleft', 0, 5);\n        textFrame.textcolor = 'white';\n        textFrame.textsize = 7;\n        textFrame.outline = 'OUTLINE';\n        textFrame:Show();\n        \n        return textFrame;\n    end\n    \n    --[[ \n        Creates the overlay frame\n    \n        @param  {Plater.unitFrame.healthbar}  healthBar\n        @param  {String}  originPoint\n        @param  {Number}  posX\n        @param  {Number}  posY\n    \n        @return {Frame}\n    --]]\n    function envTable.createOverlayFrame(healthBar, originPoint, posX, posY)\n        local overlayFrame = CreateFrame('frame', nil, healthBar);\n        overlayFrame:SetFrameLevel(healthBar:GetFrameLevel());\n        overlayFrame:SetPoint(originPoint, healthBar, originPoint, posX, posY);\n        \n        local overlayColorR, overlayColorG, overlayColorB = DetailsFramework:ParseColors (Plater.db.profile.tank.colors.noaggro);\n        local overlayTexture = Plater:CreateImage(overlayFrame, envTable.TEXTURE_PATH);\n        overlayTexture:SetVertexColor(overlayColorR, overlayColorG, overlayColorB);\n        overlayTexture:SetPoint(originPoint, healthBar, originPoint, posX, posY);\n        overlayTexture:SetSize(envTable.TEXTURE_CONFIG['width'], envTable.TEXTURE_CONFIG['height']);\n        \n        overlayFrame.overlayTexture = overlayTexture;\n        overlayFrame:Show();\n        \n        return overlayFrame;\n    end\n    \n    --[[\n        Creates the target of target text frame\n\n        @param  {Plater.unitFrame}  unitFrame\n        @param  {String}  targetUnitID\n\n        @return {Frame}\n    --]]\n    function envTable.updateTargetOfTarget(unitFrame, targetUnitID)\n        local targetText = unitFrame.healthBar.targetOfTargetText;\n        local targetUnitName = UnitName(targetUnitID or '') or '';\n        \n        if modTable.config['disableTargetOfTarget'] then\n            targetUnitName = ' '\n        end\n        \n        if (targetUnitName == UnitName('player')) then\n            targetUnitName = '';\n        end\n        \n        if (unitFrame._currentTargetName == targetUnitName) then\n            return;\n        end\n        \n        unitFrame._currentTargetName = targetUnitName;\n        targetText.text = targetUnitName;\n        \n        local _, class = UnitClass(targetUnitID or '');\n        \n        if (class and UnitIsPlayer(targetUnitID or '')) then\n            targetText.textcolor = DetailsFramework:ParseColors(class);\n        else\n            targetText.textcolor = Plater.db.profile.castbar_target_color;\n        end\n    end\n    \n    --[[\n        Updates the aggro overlay texture color\n\n        @param  {Plater.unitFrame}  unitFrame\n\n        @return {void}\n    --]]\n    function envTable.updateAggroOverlayColor(unitFrame)\n        local colorR, colorG, colorB, colorA = DetailsFramework:ParseColors(unitFrame.healthBar:GetColor());\n        local qualifiedColor = envTable.qualifyColor(colorR, colorG, colorB, colorA);\n        \n        if (unitFrame._currentColor == qualifiedColor) then\n            return;\n        end\n        \n        unitFrame._currentColor = qualifiedColor;\n        \n        unitFrame.healthBar.aggroOverlayRight.overlayTexture:SetVertexColor(colorR, colorG, colorB);\n        unitFrame.healthBar.aggroOverlayLeft.overlayTexture:SetVertexColor(colorR, colorG, colorB);\n    end\n    \n    --[[\n        Qualifies a color to a cacheable string\n\n        @param  {Number}  r\n        @param  {Number}  g\n        @param  {Number}  b\n        @param  {Number}  a\n\n        @return {String}\n    --]]\n    function envTable.qualifyColor(r, g, b, a)\n        return tostring(r) .. tostring(g) .. tostring(b) .. tostring(a);\n    end\n    \n    --[[ \n        Shows the overlay frames\n\n        @param  {Plater.unitFrame}  unitFrame\n\n        @return {void}\n    --]]\n    function envTable.showAggroOverlay(unitFrame)\n        envTable.createFrameIfNotExists(unitFrame);\n        envTable.updateTargetOfTarget(unitFrame, unitFrame.targetUnitID);\n        unitFrame.healthBar.aggroOverlayLeft.overlayTexture:Show();\n        unitFrame.healthBar.aggroOverlayRight.overlayTexture:Show();\n        envTable.updateAggroOverlayColor(unitFrame);\n    end\n    \n    --[[ \n        Hides the overlay frames\n\n        @return {void}\n    --]]\n    function envTable.hideAggroOverlay(unitFrame)\n        envTable.createFrameIfNotExists(unitFrame);\n        envTable.updateTargetOfTarget(unitFrame, nil);\n        unitFrame.healthBar.aggroOverlayLeft.overlayTexture:Hide();\n        unitFrame.healthBar.aggroOverlayRight.overlayTexture:Hide();\n        envTable.updateAggroOverlayColor(unitFrame);\n    end\nend",
},
["version"] = 8,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Cast Start",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \n    --create thee border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1680361090,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/OgPOi4-vX/1",
["Icon"] = 133004,
["Enabled"] = true,
["Revision"] = 67,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Prio"] = 99,
["Name"] = "Cast Bar Border",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \n    --create thee border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end\n    \nend\n\n\n\n\n",
},
["version"] = 1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Cast Start",
["UID"] = "0x64123ca337069ce",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not envTable.originalLevel then\n        envTable.originalLevel = unitFrame:GetFrameLevel()\n        envTable.originalAlpha = unitFrame:GetEffectiveAlpha()\n    end\n    modTable.globalCastCounter = modTable.globalCastCounter + 1\n    unitFrame:SetFrameLevel(100 + modTable.globalCastCounter)\n    if modTable.config and modTable.config[\"fullOpacityOnCast\"] then\n        unitFrame:SetAlpha(1.0)\n    end\nend",
["Initialization"] = "function(modTable)\n    modTable.globalCastCounter = 0\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if envTable.originalLevel then\n        unitFrame:SetFrameLevel(envTable.originalLevel)\n        unitFrame:SetAlpha(envTable.originalAlpha)\n        envTable.originalLevel = nil\n        envTable.originalAlpha = nil\n    end\nend",
},
["Time"] = 1722896032,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/L7KPSDPMK/6",
["Icon"] = 4640492,
["Enabled"] = true,
["Revision"] = 342,
["semver"] = "1.0.5",
["Author"] = "Ryowarsu-Sanguino",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Casting on top",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Force full opacity when casting",
["Value"] = true,
["Key"] = "fullOpacityOnCast",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not envTable.originalLevel then\n        envTable.originalLevel = unitFrame:GetFrameLevel()\n        envTable.originalAlpha = unitFrame:GetEffectiveAlpha()\n    end\n    modTable.globalCastCounter = modTable.globalCastCounter + 1\n    unitFrame:SetFrameLevel(100 + modTable.globalCastCounter)\n    if modTable.config and modTable.config[\"fullOpacityOnCast\"] then\n        unitFrame:SetAlpha(1.0)\n    end\nend",
["Initialization"] = "function(modTable)\n    modTable.globalCastCounter = 0\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if envTable.originalLevel then\n        unitFrame:SetFrameLevel(envTable.originalLevel)\n        unitFrame:SetAlpha(envTable.originalAlpha)\n        envTable.originalLevel = nil\n        envTable.originalAlpha = nil\n    end\nend",
},
["version"] = 6,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateCastBarName(unitId, unitFrame.castBar)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateCastBarName(unitId, unitFrame.castBar)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --percent of total cast bar size, default: 60% spell name\n    local spellNameSize = 0.60\n    \n    --target name length limit\n    local targetNameMaxLength = 8\n    \n    --spell name length limit\n    local spellNameMaxLength = 16\n    \n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return table.concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    --update function\n    function envTable.UpdateCastBarName(unitId, castBar)\n        --do nothing if interrupted\n        if castBar.IsInterrupted then\n            return\n            \n        end\n        \n        --get the target's unitId \n        local targetUnitId = unitId .. \"target\"\n        \n        --does the unit exists?\n        if (UnitExists(targetUnitId)) then\n            \n            --get the target name\n            local targetName = UnitName(targetUnitId)\n            \n            \n            --does the target name exists?\n            if (targetName) then\n                \n                if strlenutf8(targetName) > targetNameMaxLength then\n                    targetName = strtrim(utf8sub(targetName, 0, targetNameMaxLength))\n                end\n                \n                \n                --get the current spell name\n                local spellName = castBar.SpellName\n                \n                if spellName and strlenutf8(spellName) > spellNameMaxLength then\n                    spellName = strtrim(utf8sub(spellName, 0, spellNameMaxLength))\n                end\n                \n                --reset the text in the cast bar\n                castBar.Text:SetText(spellName)\n                \n                --paint the target name with the player's class color\n                local targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                \n                --castbar width\n                local castBarWidth = castBar:GetWidth()\n                DetailsFramework:TruncateText (castBar.Text, castBarWidth * spellNameSize)\n                \n                --set the new text in the castbar spell name fontstring\n                local currentText = castBar.Text:GetText() or \"\"\n                castBar.Text:SetText(currentText .. \" [\" .. targetNameByColor .. \"]\")\n                DetailsFramework:TruncateText (castBar.Text, castBarWidth)                \n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1680361126,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/jsGuJ8TUI/2",
["Icon"] = 2126355,
["Enabled"] = true,
["Revision"] = 115,
["semver"] = "1.0.1",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the cast target name with the spell name",
["Prio"] = 99,
["Name"] = "Cast Target on Spell Name",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateCastBarName(unitId, unitFrame.castBar)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateCastBarName(unitId, unitFrame.castBar)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --percent of total cast bar size, default: 60% spell name\n    local spellNameSize = 0.60\n    \n    --target name length limit\n    local targetNameMaxLength = 8\n    \n    --spell name length limit\n    local spellNameMaxLength = 16\n    \n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return table.concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    --update function\n    function envTable.UpdateCastBarName(unitId, castBar)\n        --do nothing if interrupted\n        if castBar.IsInterrupted then\n            return\n            \n        end\n        \n        --get the target's unitId \n        local targetUnitId = unitId .. \"target\"\n        \n        --does the unit exists?\n        if (UnitExists(targetUnitId)) then\n            \n            --get the target name\n            local targetName = UnitName(targetUnitId)\n            \n            \n            --does the target name exists?\n            if (targetName) then\n                \n                if strlenutf8(targetName) > targetNameMaxLength then\n                    targetName = strtrim(utf8sub(targetName, 0, targetNameMaxLength))\n                end\n                \n                \n                --get the current spell name\n                local spellName = castBar.SpellName\n                \n                if spellName and strlenutf8(spellName) > spellNameMaxLength then\n                    spellName = strtrim(utf8sub(spellName, 0, spellNameMaxLength))\n                end\n                \n                --reset the text in the cast bar\n                castBar.Text:SetText(spellName)\n                \n                --paint the target name with the player's class color\n                local targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                \n                --castbar width\n                local castBarWidth = castBar:GetWidth()\n                DetailsFramework:TruncateText (castBar.Text, castBarWidth * spellNameSize)\n                \n                --set the new text in the castbar spell name fontstring\n                local currentText = castBar.Text:GetText() or \"\"\n                castBar.Text:SetText(currentText .. \" [\" .. targetNameByColor .. \"]\")\n                DetailsFramework:TruncateText (castBar.Text, castBarWidth)                \n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["version"] = 2,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x64392e34f6060a",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateCastState(unitFrame)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateCastState(unitFrame)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateCastState(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.checkToHide(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    \n    local badCasts = {\n        [123] = true,\n        [\"Uber Strike\"] = true,\n    }\n    \n    \n    local castingUnits = {}\n    \n    modTable.checkToHide = function(unitFrame)\n        -- maybe this: UnitTokenFromGUID\n        local needsHide = false\n        for t, i in pairs(castingUnits) do\n            if UnitExists(t) then\n                if unitFrame.namePlateUnitToken ~= t then\n                    if not modTable.updateCastState(unitFrame) then\n                        needsHide = true\n                        break\n                    end\n                end\n            else\n                castingUnits[t] = nil\n            end\n        end\n        \n        if needsHide then\n            unitFrame:Hide()\n        elseif not unitFrame:IsShown() then\n            unitFrame:Show()\n        end\n    end\n    \n    modTable.updateCastState = function(unitFrame)\n        if not unitFrame.namePlateUnitToken then return false end\n        local castBar = unitFrame.castBar\n        if castBar.casting or castBar.channeling then\n            local badCast = badCasts[castBar.spellName or \"N/A\"] or badCasts[castBar.spellID or -1] \n            if badCast then\n                castingUnits[unitFrame.namePlateUnitToken] = badCast\n                return true\n            end\n        end\n        castingUnits[unitFrame.namePlateUnitToken] = nil\n        return false\n    end\n    \nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateCastState(unitFrame)\nend",
},
["Time"] = 1682204902,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/x2Gf7E4E2/2",
["Icon"] = 1723989,
["Enabled"] = true,
["Revision"] = 20,
["semver"] = "1.0.1",
["Author"] = "Viashi-Argent Dawn",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Hide others units for Casts",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateCastState(unitFrame)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateCastState(unitFrame)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateCastState(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.checkToHide(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    \n    local badCasts = {\n        [123] = true,\n        [\"Uber Strike\"] = true,\n    }\n    \n    \n    local castingUnits = {}\n    \n    modTable.checkToHide = function(unitFrame)\n        -- maybe this: UnitTokenFromGUID\n        local needsHide = false\n        for t, i in pairs(castingUnits) do\n            if UnitExists(t) then\n                if unitFrame.namePlateUnitToken ~= t then\n                    if not modTable.updateCastState(unitFrame) then\n                        needsHide = true\n                        break\n                    end\n                end\n            else\n                castingUnits[t] = nil\n            end\n        end\n        \n        if needsHide then\n            unitFrame:Hide()\n        elseif not unitFrame:IsShown() then\n            unitFrame:Show()\n        end\n    end\n    \n    modTable.updateCastState = function(unitFrame)\n        if not unitFrame.namePlateUnitToken then return false end\n        local castBar = unitFrame.castBar\n        if castBar.casting or castBar.channeling then\n            local badCast = badCasts[castBar.spellName or \"N/A\"] or badCasts[castBar.spellID or -1] \n            if badCast then\n                castingUnits[unitFrame.namePlateUnitToken] = badCast\n                return true\n            end\n        end\n        castingUnits[unitFrame.namePlateUnitToken] = nil\n        return false\n    end\n    \nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateCastState(unitFrame)\nend",
},
["version"] = 2,
},
{
["OptionsValues"] = {
["manualNameOverwrites"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["nameLength"] = 18,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Initialization"] = "function (modTable)\n    local cache = {}\n    local concat = table.concat\n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    \n    local utf8len = function(str)\n        if utf8Enabled then\n            return str:utf8len()\n        end\n        \n        local count = 0\n        for _ in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n        end\n        \n        return count\n    end\n    \n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    -- Left to right works in the following steps for \"The Best Warrior Linaori\":\n    -- T. Best Warrior Linaori\n    -- T.B. Warrior Linaori\n    -- T.B.W. Linaori\n    local reduceLeftToRight\n    reduceLeftToRight = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not rightPart or utf8len(rightPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return leftPart .. \" \" .. rightPart, \"\"\n        end\n        \n        local firstWord, remainingRightPart = rightPart:match(\"^([^ ]*)[ ](.*)$\")\n        if not firstWord then\n            firstWord = rightPart\n            remainingRightPart = \"\"\n        end\n        leftPart = leftPart .. utf8sub(firstWord, 1, 1) .. \".\"\n        \n        return reduceLeftToRight(leftPart, remainingRightPart, lastPartLength, nameLength)\n    end\n    \n    -- Right to left works in the following steps for \"The Best Warrior Linaori\":\n    -- The Best W. Linaori\n    -- The B.W. Linaori\n    -- T.B.W. Linaori\n    local reduceRightToLeft\n    reduceRightToLeft = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not leftPart or utf8len(leftPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return \"\", leftPart .. \" \" .. rightPart\n        end\n        \n        local remainingLeftPart, lastWord = leftPart:match(\"^(.*)[ ]([^ ]*)$\")\n        \n        if not remainingLeftPart then\n            remainingLeftPart = \"\"\n            lastWord = leftPart\n        end\n        \n        rightPart = utf8sub(lastWord, 1, 1) .. \".\" .. rightPart\n        \n        return reduceRightToLeft(remainingLeftPart, rightPart, lastPartLength, nameLength)\n    end\n    \n    local cutOffName = function (wholeName, config)\n        if config.noSplitCutoff then\n            return utf8sub(wholeName, 1, config.nameLength)\n        end\n        \n        return wholeName\n    end\n    \n    local shorten = function (unitId, nameplateUnitName, config, nameLength)\n        -- let the player overwrite the name regardless of length based on the NPC name\n        local manualNameOverwrite = config.manualNameOverwrites[nameplateUnitName]\n        if manualNameOverwrite then\n            return manualNameOverwrite\n        end\n        \n        -- let the player overwrite the name regardless of length based on the NPC ID\n        local npcId = select(6, strsplit(\"-\", UnitGUID(unitId)))\n        local manualNpcIdOverwrite = config.manualNameOverwrites[npcId]\n        if manualNpcIdOverwrite then\n            return manualNpcIdOverwrite\n        end\n        \n        -- the original name is short enough already\n        if utf8len(nameplateUnitName) <= nameLength then\n            return nameplateUnitName\n        end\n        \n        -- Naming often implies \"<name>, <title>\" or \"<title> <name>\"\n        if nameplateUnitName:find(\",\") then\n            -- assumed that \",\" implies a title, and try to strip them of their title\n            local possibleName = nameplateUnitName:match(\"^(.*)[,][^,]*$\")\n            \n            if possibleName then\n                if utf8len(possibleName) <= nameLength then\n                    return possibleName\n                end\n                \n                -- in case of longer names: \"Linaori the best fury warrior ever, of the deeps\n                nameplateUnitName = possibleName\n            end\n        end\n        \n        -- Forsworn Squad-Leader -> Forsworn Squad Leader\n        -- Squad-Leader of the Forsworn -> Squad Leader of the Forsworn\n        if config.hyphenAsSpace then\n            local lastPart\n            \n            -- keep \"Forsworn Squad-Leader\" as is, while still replacing \"Squad-Leader of the Forsworn\"\n            if config.keepHyphenInLastName then\n                local _, spaces = nameplateUnitName:gsub(\" \", \"\")\n                if spaces > 0 then\n                    nameplateUnitName, lastPart = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n                end\n            end\n            \n            nameplateUnitName = nameplateUnitName:gsub(\"-\", \" \")\n            if lastPart then\n                nameplateUnitName = nameplateUnitName .. \" \" .. lastPart\n            end\n        end\n        \n        -- amount of times we can check if the name needs replacing\n        local _, occurrences = nameplateUnitName:gsub(\" \", \"\")\n        \n        -- no spaces left to split on, just return whatever can be made of it\n        if occurrences == 0 then\n            return cutOffName(nameplateUnitName, config)\n        end\n        \n        local nameToShorten, nameToKeep, nameToKeepLength\n        if config.keepRightSide then\n            -- we always want the last name if possible\n            -- example: Cleave Training Dummy -> Dummy\n            nameToShorten, nameToKeep = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        else\n            -- we always want the first name if possible\n            -- example: Cleave Training Dummy -> Cleave\n            nameToKeep, nameToShorten = nameplateUnitName:match(\"^([^ ]*)[ ](.*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        end\n        \n        -- in case the name to keep is too long, just use that\n        if nameToKeepLength > nameLength or not config.abbreviate then\n            return cutOffName(nameToKeep, config)\n        end\n        \n        local shortenedName\n        if config.abbreviateLeftToRight then\n            shortenedName, _ = reduceLeftToRight(\"\", nameToShorten, nameToKeepLength, nameLength)\n        else\n            _, shortenedName = reduceRightToLeft(nameToShorten, \"\", nameToKeepLength, nameLength)\n        end\n        \n        if config.keepRightSide then\n            return shortenedName .. \" \" .. nameToKeep\n        else\n            return nameToKeep .. \" \" .. shortenedName\n        end\n    end\n    \n    local tryCache = function (unitId, nameplateUnitName, config, nameLength)\n        if cache[nameLength] == nil then\n            cache[nameLength] = {}\n        end\n        \n        if cache[nameLength][nameplateUnitName] == nil then\n            cache[nameLength][nameplateUnitName] = shorten(unitId, nameplateUnitName, config, nameLength)\n        end\n        \n        return cache[nameLength][nameplateUnitName]\n    end\n    \n    modTable.shortenNameplateName = function (unitId, unitFrame, config)\n        if not unitId or not unitFrame.namePlateUnitName then return end\n        \n        if config.ignorePlayers and unitFrame.isPlayer then return end\n        if config.ignoreFriendlyNpcNameplate and unitFrame.actorType == \"friendlynpc\" then return end\n        if config.ignoreObjectNameplate and unitFrame.isObject then return end\n        \n        local name = tryCache(unitId, unitFrame.namePlateUnitName, config, config.nameLength)\n        \n        if name == unitFrame.namePlateUnitName then return end\n        \n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n        unitFrame.ActorNameSpecial:SetText(name)\n    end\n    \n    modTable.shortenCastBarName = function (unitId, unitFrame, config)\n        if not unitId then return end\n        \n        local castBar = unitFrame.castBar\n        if not castBar.unit then return end\n        local targetUnitId = castBar.unit .. \"target\"\n        \n        if not UnitExists(targetUnitId) then return end\n        \n        local isPlayer = UnitIsPlayer(targetUnitId)\n        if config.ignorePlayers and isPlayer then return end\n        if config.ignoreFriendlyNpcCastBar and not isPlayer and UnitIsFriend(\"player\", targetUnitId) then return end\n        \n        local targetName = castBar.FrameOverlay.TargetName\n        local oldName = targetName:GetText()\n        if not oldName then return end\n        \n        local newName = tryCache(unitId, oldName, config, config.castBarNameLength)\n        if oldName == newName then return end\n        \n        targetName:SetText(newName)\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenCastBarName(unitId, unitFrame, modTable.config, envTable)\nend\n\n\n",
},
["Time"] = 1702034695,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/name-shortener-for-plater/18",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 990,
["semver"] = "1.1.4",
["Author"] = "Linalori-Ragnaros",
["Desc"] = "Tries to make sense of long names",
["Prio"] = 99,
["Name"] = "Smart Name Shortener",
["PlaterCore"] = 1,
["version"] = 18,
["HooksTemp"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Initialization"] = "function (modTable)\n    local cache = {}\n    local concat = table.concat\n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    \n    local utf8len = function(str)\n        if utf8Enabled then\n            return str:utf8len()\n        end\n        \n        local count = 0\n        for _ in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n        end\n        \n        return count\n    end\n    \n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    -- Left to right works in the following steps for \"The Best Warrior Linaori\":\n    -- T. Best Warrior Linaori\n    -- T.B. Warrior Linaori\n    -- T.B.W. Linaori\n    local reduceLeftToRight\n    reduceLeftToRight = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not rightPart or utf8len(rightPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return leftPart .. \" \" .. rightPart, \"\"\n        end\n        \n        local firstWord, remainingRightPart = rightPart:match(\"^([^ ]*)[ ](.*)$\")\n        if not firstWord then\n            firstWord = rightPart\n            remainingRightPart = \"\"\n        end\n        leftPart = leftPart .. utf8sub(firstWord, 1, 1) .. \".\"\n        \n        return reduceLeftToRight(leftPart, remainingRightPart, lastPartLength, nameLength)\n    end\n    \n    -- Right to left works in the following steps for \"The Best Warrior Linaori\":\n    -- The Best W. Linaori\n    -- The B.W. Linaori\n    -- T.B.W. Linaori\n    local reduceRightToLeft\n    reduceRightToLeft = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not leftPart or utf8len(leftPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return \"\", leftPart .. \" \" .. rightPart\n        end\n        \n        local remainingLeftPart, lastWord = leftPart:match(\"^(.*)[ ]([^ ]*)$\")\n        \n        if not remainingLeftPart then\n            remainingLeftPart = \"\"\n            lastWord = leftPart\n        end\n        \n        rightPart = utf8sub(lastWord, 1, 1) .. \".\" .. rightPart\n        \n        return reduceRightToLeft(remainingLeftPart, rightPart, lastPartLength, nameLength)\n    end\n    \n    local cutOffName = function (wholeName, config)\n        if config.noSplitCutoff then\n            return utf8sub(wholeName, 1, config.nameLength)\n        end\n        \n        return wholeName\n    end\n    \n    local shorten = function (unitId, nameplateUnitName, config, nameLength)\n        -- let the player overwrite the name regardless of length based on the NPC name\n        local manualNameOverwrite = config.manualNameOverwrites[nameplateUnitName]\n        if manualNameOverwrite then\n            return manualNameOverwrite\n        end\n        \n        -- let the player overwrite the name regardless of length based on the NPC ID\n        local npcId = select(6, strsplit(\"-\", UnitGUID(unitId)))\n        local manualNpcIdOverwrite = config.manualNameOverwrites[npcId]\n        if manualNpcIdOverwrite then\n            return manualNpcIdOverwrite\n        end\n        \n        -- the original name is short enough already\n        if utf8len(nameplateUnitName) <= nameLength then\n            return nameplateUnitName\n        end\n        \n        -- Naming often implies \"<name>, <title>\" or \"<title> <name>\"\n        if nameplateUnitName:find(\",\") then\n            -- assumed that \",\" implies a title, and try to strip them of their title\n            local possibleName = nameplateUnitName:match(\"^(.*)[,][^,]*$\")\n            \n            if possibleName then\n                if utf8len(possibleName) <= nameLength then\n                    return possibleName\n                end\n                \n                -- in case of longer names: \"Linaori the best fury warrior ever, of the deeps\n                nameplateUnitName = possibleName\n            end\n        end\n        \n        -- Forsworn Squad-Leader -> Forsworn Squad Leader\n        -- Squad-Leader of the Forsworn -> Squad Leader of the Forsworn\n        if config.hyphenAsSpace then\n            local lastPart\n            \n            -- keep \"Forsworn Squad-Leader\" as is, while still replacing \"Squad-Leader of the Forsworn\"\n            if config.keepHyphenInLastName then\n                local _, spaces = nameplateUnitName:gsub(\" \", \"\")\n                if spaces > 0 then\n                    nameplateUnitName, lastPart = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n                end\n            end\n            \n            nameplateUnitName = nameplateUnitName:gsub(\"-\", \" \")\n            if lastPart then\n                nameplateUnitName = nameplateUnitName .. \" \" .. lastPart\n            end\n        end\n        \n        -- amount of times we can check if the name needs replacing\n        local _, occurrences = nameplateUnitName:gsub(\" \", \"\")\n        \n        -- no spaces left to split on, just return whatever can be made of it\n        if occurrences == 0 then\n            return cutOffName(nameplateUnitName, config)\n        end\n        \n        local nameToShorten, nameToKeep, nameToKeepLength\n        if config.keepRightSide then\n            -- we always want the last name if possible\n            -- example: Cleave Training Dummy -> Dummy\n            nameToShorten, nameToKeep = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        else\n            -- we always want the first name if possible\n            -- example: Cleave Training Dummy -> Cleave\n            nameToKeep, nameToShorten = nameplateUnitName:match(\"^([^ ]*)[ ](.*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        end\n        \n        -- in case the name to keep is too long, just use that\n        if nameToKeepLength > nameLength or not config.abbreviate then\n            return cutOffName(nameToKeep, config)\n        end\n        \n        local shortenedName\n        if config.abbreviateLeftToRight then\n            shortenedName, _ = reduceLeftToRight(\"\", nameToShorten, nameToKeepLength, nameLength)\n        else\n            _, shortenedName = reduceRightToLeft(nameToShorten, \"\", nameToKeepLength, nameLength)\n        end\n        \n        if config.keepRightSide then\n            return shortenedName .. \" \" .. nameToKeep\n        else\n            return nameToKeep .. \" \" .. shortenedName\n        end\n    end\n    \n    local tryCache = function (unitId, nameplateUnitName, config, nameLength)\n        if cache[nameLength] == nil then\n            cache[nameLength] = {}\n        end\n        \n        if cache[nameLength][nameplateUnitName] == nil then\n            cache[nameLength][nameplateUnitName] = shorten(unitId, nameplateUnitName, config, nameLength)\n        end\n        \n        return cache[nameLength][nameplateUnitName]\n    end\n    \n    modTable.shortenNameplateName = function (unitId, unitFrame, config)\n        if not unitId or not unitFrame.namePlateUnitName then return end\n        \n        if config.ignorePlayers and unitFrame.isPlayer then return end\n        if config.ignoreFriendlyNpcNameplate and unitFrame.actorType == \"friendlynpc\" then return end\n        if config.ignoreObjectNameplate and unitFrame.isObject then return end\n        \n        local name = tryCache(unitId, unitFrame.namePlateUnitName, config, config.nameLength)\n        \n        if name == unitFrame.namePlateUnitName then return end\n        \n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n        unitFrame.ActorNameSpecial:SetText(name)\n    end\n    \n    modTable.shortenCastBarName = function (unitId, unitFrame, config)\n        if not unitId then return end\n        \n        local castBar = unitFrame.castBar\n        if not castBar.unit then return end\n        local targetUnitId = castBar.unit .. \"target\"\n        \n        if not UnitExists(targetUnitId) then return end\n        \n        local isPlayer = UnitIsPlayer(targetUnitId)\n        if config.ignorePlayers and isPlayer then return end\n        if config.ignoreFriendlyNpcCastBar and not isPlayer and UnitIsFriend(\"player\", targetUnitId) then return end\n        \n        local targetName = castBar.FrameOverlay.TargetName\n        local oldName = targetName:GetText()\n        if not oldName then return end\n        \n        local newName = tryCache(unitId, oldName, config, config.castBarNameLength)\n        if oldName == newName then return end\n        \n        targetName:SetText(newName)\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenCastBarName(unitId, unitFrame, modTable.config, envTable)\nend\n\n\n",
},
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on nameplates before cutoff is applied",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 18,
["Name"] = "Nameplate name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameLength",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on the cast bar before cutoff is applied",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 15,
["Name"] = "Cast bar name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarNameLength",
},
{
["Type"] = 4,
["Name"] = "Treat hyphens (-) as space",
["Value"] = true,
["Key"] = "hyphenAsSpace",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Also split names on hyphens instead of just the whole word",
},
{
["Type"] = 4,
["Name"] = "Keep hyphen in the last name",
["Value"] = true,
["Key"] = "keepHyphenInLastName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When hyphens are treated as spaces, keep the last part of the name intact",
},
{
["Type"] = 4,
["Name"] = "Cutoff when no split can be done",
["Value"] = true,
["Key"] = "noSplitCutoff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When the smallest word is still longer than \"Name length\", cut it off to the name length. If unchecked, will return the full name",
},
{
["Type"] = 4,
["Name"] = "Abbreviate names (W.O. Warcraft)",
["Value"] = true,
["Key"] = "abbreviate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If unchecked, nothing is shown instead",
},
{
["Type"] = 4,
["Name"] = "Abbreviate left to right",
["Value"] = false,
["Key"] = "abbreviateLeftToRight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Where to start abbreviation. (ltr) \"T. Best Linaori\" vs (rtl) \"The B. Linaori\"",
},
{
["Type"] = 4,
["Name"] = "Keep right side",
["Value"] = true,
["Key"] = "keepRightSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Keep the right side instead of left side of the name. Right side: \"T.B. Warrior\". Left side: \"The B.L.\"",
},
{
["Type"] = 4,
["Name"] = "Ignore Players",
["Value"] = false,
["Key"] = "ignorePlayers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore player characters",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly NPC nameplate",
["Value"] = false,
["Key"] = "ignoreFriendlyNpcNameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the nameplate",
},
{
["Type"] = 4,
["Name"] = "Ignore Object Nameplate",
["Value"] = true,
["Key"] = "ignoreObjectNameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore nameplates from objects",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly NPC cast bar",
["Value"] = false,
["Key"] = "ignoreFriendlyNpcCastBar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the cast bar",
},
{
["Type"] = 7,
["Name"] = "Manual name overwrites",
["Value"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["Key"] = "manualNameOverwrites",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If a name matches the key, overwrite it with value and don't guess anything after",
},
},
},
},
["auras_per_row_auto"] = false,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 2,
["disable_omnicc_on_auras"] = true,
["aura_width"] = 28,
["ghost_auras"] = {
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
},
},
["castbar_target_shadow_color"] = {
nil,
nil,
nil,
0,
},
["blizzard_nameplate_large_font_size"] = 14,
["pet_width_scale"] = 0.9999999403953552,
["patch_version"] = 36,
["target_highlight_color"] = {
0.9803922176361084,
1,
0.9529412388801575,
},
["extra_icon_stack_outline"] = "OUTLINE",
["click_space"] = {
150,
},
["castbar_target_font"] = "GennUI",
["indicator_faction"] = false,
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["bossmod_cooldown_text_size"] = 14,
["extra_icon_height"] = 32,
["indicator_spec"] = false,
["pet_height_scale"] = 0.9999999403953552,
["aura_x_offset"] = 0,
["range_check_alpha_friendlies"] = 0.6499999761581421,
["aura_show_only_short_dispellable_on_players"] = true,
["ui_parent_scale_tune"] = 1,
["health_statusbar_bgtexture"] = "GennUI B",
["aura_tracker"] = {
["buff_tracked"] = {
[227931] = true,
[233210] = true,
[209859] = true,
[163689] = true,
[297133] = true,
},
},
["extra_icon_caster_font"] = "GennUI",
["cast_statusbar_color"] = {
0.05098039656877518,
0.4627451300621033,
0.9333333969116211,
0.9600000008940697,
},
["extra_icon_use_blizzard_border_color"] = false,
["extra_icon_timer_font"] = "GennUI",
["use_health_animation"] = true,
["target_highlight_alpha"] = 1,
["extra_icon_show_swipe"] = false,
["hook_data_trash"] = {
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Nameplate Added",
["UID"] = "0x64123ca337069ce",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local function OnCastStart(self, event, unit)\n        if unit ~= unitId then return end\n        if not unitFrame.originalLevel then\n            unitFrame.originalLevel = unitFrame:GetFrameLevel()\n            local timeBasedLevel = math.floor(GetTimePreciseSec() * 1000000) % 1000\n            local newFrameLevel = unitFrame.originalLevel + timeBasedLevel\n            unitFrame:SetFrameLevel(newFrameLevel)\n        end\n    end\n    \n    local function OnCastStop(self, event, unit)\n        if unit ~= unitId then return end\n        if unitFrame.originalLevel then\n            unitFrame:SetFrameLevel(unitFrame.originalLevel)\n            unitFrame.originalLevel = nil\n        end\n    end\n    \n    unitFrame:RegisterUnitEvent(\"UNIT_SPELLCAST_START\", unitId)\n    unitFrame:RegisterUnitEvent(\"UNIT_SPELLCAST_STOP\", unitId)\n    unitFrame:RegisterUnitEvent(\"UNIT_SPELLCAST_CHANNEL_START\", unitId)\n    unitFrame:RegisterUnitEvent(\"UNIT_SPELLCAST_CHANNEL_STOP\", unitId)\n    \n    unitFrame:SetScript(\"OnEvent\", function(self, event, ...)\n            if event == \"UNIT_SPELLCAST_START\" or event == \"UNIT_SPELLCAST_CHANNEL_START\" then\n                OnCastStart(self, event, ...)\n            elseif event == \"UNIT_SPELLCAST_STOP\" or event == \"UNIT_SPELLCAST_CHANNEL_STOP\" then\n                OnCastStop(self, event, ...)\n            end\n    end)\nend\n\n\n",
},
["__TrashAt"] = 1722896029,
["Time"] = 1680361106,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/L7KPSDPMK/4",
["Icon"] = 4640492,
["Enabled"] = true,
["Revision"] = 218,
["semver"] = "1.0.3",
["Author"] = "Ryowarsu-Sanguino",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Casting on top",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local function OnCastStart(self, event, unit)\n        if unit ~= unitId then return end\n        if not unitFrame.originalLevel then\n            unitFrame.originalLevel = unitFrame:GetFrameLevel()\n            local timeBasedLevel = math.floor(GetTimePreciseSec() * 1000000) % 1000\n            local newFrameLevel = unitFrame.originalLevel + timeBasedLevel\n            unitFrame:SetFrameLevel(newFrameLevel)\n        end\n    end\n    \n    local function OnCastStop(self, event, unit)\n        if unit ~= unitId then return end\n        if unitFrame.originalLevel then\n            unitFrame:SetFrameLevel(unitFrame.originalLevel)\n            unitFrame.originalLevel = nil\n        end\n    end\n    \n    unitFrame:RegisterUnitEvent(\"UNIT_SPELLCAST_START\", unitId)\n    unitFrame:RegisterUnitEvent(\"UNIT_SPELLCAST_STOP\", unitId)\n    unitFrame:RegisterUnitEvent(\"UNIT_SPELLCAST_CHANNEL_START\", unitId)\n    unitFrame:RegisterUnitEvent(\"UNIT_SPELLCAST_CHANNEL_STOP\", unitId)\n    \n    unitFrame:SetScript(\"OnEvent\", function(self, event, ...)\n            if event == \"UNIT_SPELLCAST_START\" or event == \"UNIT_SPELLCAST_CHANNEL_START\" then\n                OnCastStart(self, event, ...)\n            elseif event == \"UNIT_SPELLCAST_STOP\" or event == \"UNIT_SPELLCAST_CHANNEL_STOP\" then\n                OnCastStop(self, event, ...)\n            end\n    end)\nend\n\n\n",
},
["version"] = 4,
},
{
["OptionsValues"] = {
["iconAnchorSide"] = 2,
["iconAnchorX"] = 16,
["iconAnchorY"] = 2,
["iconSize"] = 14,
["textFontFace"] = "GennUI",
["textSize"] = 8,
["textColor"] = {
1,
1,
1,
1,
},
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local strText = \"\"\n    \n    if unitFrame and unitFrame.namePlateIsQuestObjective then\n        unitFrame.healthBar:Show()\n        \n        --check for only in combat\n        if (not modTable.config['ShowInCombat'] and InCombatLockdown()) then\n            unitFrame.questProgressIconFrame:Hide();\n            unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n            return \n        end\n        \n        for i, questInfo in ipairs(unitFrame.QuestInfo) do\n            if questInfo.yourQuest and not questInfo.finished then\n                local qtext = questInfo.questText:lower()\n                local name, realm = UnitName(unitId)\n                \n                local name_segments = {}\n                for w in string.gmatch (name, \"%w+\") do\n                    name_segments[#name_segments + 1] = w\n                end\n                name = string.lower(name_segments[1])\n                \n                -- Kill Quest\n                if questInfo.total\n                and (string.find(qtext, \"slain\") \n                    or string.find(qtext, \"killed\") \n                    or string.find(qtext, \"subdued\")\n                    or string.find(qtext, \"protect\")\n                    or string.find(qtext, name))\n                then\n                    strText = questInfo.total - questInfo.amount\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconSkull);\n                    break\n                    \n                    -- Loot Quest\n                elseif questInfo.total then\n                    strText = questInfo.total - questInfo.amount\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconBag);\n                    break\n                    \n                    -- Percentage quest\n                elseif not questInfo.total then\n                    local curr = questInfo.amount or 0\n                    if modTable.config['percentRemaining'] then\n                        strText = math.floor(100 - curr) .. \"%\"\n                    else\n                        strText = math.floor(curr) .. \"%\"\n                    end\n                    if unitFrame.PlayerCannotAttack then\n                        unitFrame.questProgressIconFrame:SetTexture (envTable.iconQuest);\n                        break\n                    else\n                        unitFrame.questProgressIconFrame:SetTexture (envTable.iconSkull);\n                        break\n                    end\n                    \n                    -- Use item quest\n                else\n                    strText = unitFrame.QuestAmountTotal - (unitFrame.QuestAmountCurrent or 0)\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconQuestParts);\n                    break                    \n                end\n            end \n        end\n        \n        unitFrame.questProgressIconFrame:Show();\n        unitFrame.healthBar.questProgressTextFrame:SetText(strText)\n    else\n        unitFrame.questProgressIconFrame:Hide();\n        unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n    end\nend\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    --insert code here\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- positioning\n    local iconAnchor = {\n        side = modTable.config['iconAnchorSide'],\n        x = modTable.config['iconAnchorX'],\n        y = modTable.config['iconAnchorY'],\n    };\n    \n    -- icon options\n    envTable.iconSkull = [[Interface\\TargetingFrame\\UI-RaidTargetingIcon_8]];\n    envTable.iconBag = [[Interface\\GroupFrame\\UI-Group-MasterLooter]];\n    envTable.iconQuest = [[Interface\\GossipFrame\\AvailableQuestIcon]];\n    envTable.iconQuestParts = [[Interface\\QuestFrame\\AutoQuest-Parts]]\n    \n    ------------------------------------------------------------------------------------------------------------- \n    --frames:\n    \n    --create the icon frame that will show the quest need\n    envTable.questProgressIconFrame = unitFrame.questProgressIconFrame or unitFrame:CreateTexture (nil, \"overlay\")\n    envTable.questProgressIconFrame:SetTexture (modTable.config['iconQuest'])\n    envTable.questProgressIconFrame:SetSize (modTable.config['iconSize'], modTable.config['iconSize'])\n    Plater.SetAnchor (envTable.questProgressIconFrame, iconAnchor)\n    unitFrame.questProgressIconFrame = envTable.questProgressIconFrame\n    \n    \n    --create the text frame that will show the quest progress\n    envTable.questProgressTextFrame = unitFrame.healthBar.questProgressTextFrame or Plater:CreateLabel (unitFrame.healthBar);\n    Plater:SetFontFace (envTable.questProgressTextFrame, modTable.config['textFontFace']);\n    Plater:SetFontSize (envTable.questProgressTextFrame, modTable.config['textSize']);\n    Plater:SetFontColor (envTable.questProgressTextFrame, modTable.config['textColor']);\n    Plater:SetFontOutline (envTable.questProgressTextFrame, modTable.config['textOutline']);\n    DetailsFramework:SetFontShadow (envTable.questProgressTextFrame, 0, 0, 0, modTable.config['textShadowAlpha']);\n    envTable.questProgressTextFrame:SetPoint (modTable.config['textAnchor'], unitFrame.questProgressIconFrame, modTable.config['textIconAnchor'], modTable.config['textX'], modTable.config['textY']);\n    unitFrame.healthBar.questProgressTextFrame = envTable.questProgressTextFrame\n    envTable.questProgressTextFrame:SetText(\"\")\n    \nend",
},
["__TrashAt"] = 1722896032,
["Time"] = 1698927852,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/PMdq2Rg_N/22",
["Icon"] = "INTERFACE\\ICONS\\Ability_Hunter_SniperShot",
["Enabled"] = true,
["Revision"] = 4479,
["semver"] = "1.0.21",
["Author"] = "Evolutious",
["Desc"] = "Adds a text indicator for quest progress to show how many times the objective has to be completed.",
["Prio"] = 99,
["Name"] = "QuestProgress",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Quest Percent Remaining",
["Value"] = false,
["Key"] = "percentRemaining",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set this if you want percent based quests to reflect the amount progressed or the amount remaining.",
},
{
["Type"] = 4,
["Name"] = "Show In Combat",
["Value"] = true,
["Key"] = "ShowInCombat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "This setting determins if quest NPC nameplates are always shown when in combat, even if not targeted or engaged",
},
{
["Type"] = 6,
["Name"] = "Option 17",
["Value"] = 0,
["Key"] = "option17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 16",
["Value"] = "Changing the below settings require a /reload to take effect",
["Key"] = "option16",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
0.36862745098039,
0,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Sets the text color",
},
{
["Type"] = 3,
["Name"] = "Text Font",
["Value"] = "Friz Quadrata TT",
["Key"] = "textFontFace",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Set this to the font you wish to use over the quest icon. You will need to set this manually. Default is: Friz Quadrata TT",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Sets the text size",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "textSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 3,
["Name"] = "Text Outline",
["Value"] = "OUTLINE",
["Key"] = "textOutline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Set the outline of the text. Options: NONE, OUTLINE, THICKOUTLINE. Default is: OUTLINE",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Sets the text shadow alpha. Options: 0 = Transparent, 1 = 100% Solid",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "textShadowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Shadow Alpha",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Adjusts the text left and right",
["Min"] = -64,
["Fraction"] = false,
["Value"] = 2,
["Key"] = "textX",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text X Offset",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Adjusts the text up and down",
["Min"] = -64,
["Fraction"] = false,
["Value"] = -4,
["Key"] = "textY",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Y Offset",
},
{
["Type"] = 3,
["Name"] = "Text Anchor",
["Value"] = "CENTER",
["Key"] = "textAnchor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Sets the anchor point for the text. Options: CENTER, TOP BOTTOM, TOPLEFT, LEFT, BOTTOMLEFT, TOPRIGHT, RIGHT, BOTTOMRIGHT",
},
{
["Type"] = 3,
["Name"] = "Text Anchor to Icon",
["Value"] = "CENTER",
["Key"] = "textIconAnchor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Sets the anchor point for the text relative to the icon. Options: CENTER, TOP BOTTOM, TOPLEFT, LEFT, BOTTOMLEFT, TOPRIGHT, RIGHT, BOTTOMRIGHT",
},
{
["Type"] = 6,
["Name"] = "Option 22",
["Value"] = 0,
["Key"] = "option22",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Sets the icon size",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 12,
["Key"] = "iconSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Size",
},
{
["Type"] = 2,
["Max"] = 8,
["Desc"] = "Sets the anchor point for the icon. Options: 1 = TOP LEFT, 2 = LEFT, 3 = BOTTOM LEFT, 4 = BOTTOM, 5 = BOTTOM RIGHT, 6 = RIGHT, 7 = TOP RIGHT, 8 = TOP",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 6,
["Key"] = "iconAnchorSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Anchor Side",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Adjusts the icon left and right",
["Min"] = -64,
["Fraction"] = false,
["Value"] = 4,
["Key"] = "iconAnchorX",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Anchor X Offset",
},
{
["Type"] = 2,
["Max"] = 64,
["Desc"] = "Adjusts the icon up and down",
["Min"] = -64,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "iconAnchorY",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "icon Anchor Y Offset",
},
{
["Type"] = 6,
["Name"] = "Option 16",
["Value"] = 0,
["Key"] = "option16",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local strText = \"\"\n    \n    if unitFrame and unitFrame.namePlateIsQuestObjective then\n        unitFrame.healthBar:Show()\n        \n        --check for only in combat\n        if (not modTable.config['ShowInCombat'] and InCombatLockdown()) then\n            unitFrame.questProgressIconFrame:Hide();\n            unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n            return \n        end\n        \n        for i, questInfo in ipairs(unitFrame.QuestInfo) do\n            if questInfo.yourQuest and not questInfo.finished then\n                local qtext = questInfo.questText:lower()\n                local name, realm = UnitName(unitId)\n                \n                local name_segments = {}\n                for w in string.gmatch (name, \"%w+\") do\n                    name_segments[#name_segments + 1] = w\n                end\n                name = string.lower(name_segments[1])\n                \n                -- Kill Quest\n                if questInfo.total\n                and (string.find(qtext, \"slain\") \n                    or string.find(qtext, \"killed\") \n                    or string.find(qtext, \"subdued\")\n                    or string.find(qtext, \"protect\")\n                    or string.find(qtext, name))\n                then\n                    strText = questInfo.total - questInfo.amount\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconSkull);\n                    break\n                    \n                    -- Loot Quest\n                elseif questInfo.total then\n                    strText = questInfo.total - questInfo.amount\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconBag);\n                    break\n                    \n                    -- Percentage quest\n                elseif not questInfo.total then\n                    local curr = questInfo.amount or 0\n                    if modTable.config['percentRemaining'] then\n                        strText = math.floor(100 - curr) .. \"%\"\n                    else\n                        strText = math.floor(curr) .. \"%\"\n                    end\n                    if unitFrame.PlayerCannotAttack then\n                        unitFrame.questProgressIconFrame:SetTexture (envTable.iconQuest);\n                        break\n                    else\n                        unitFrame.questProgressIconFrame:SetTexture (envTable.iconSkull);\n                        break\n                    end\n                    \n                    -- Use item quest\n                else\n                    strText = unitFrame.QuestAmountTotal - (unitFrame.QuestAmountCurrent or 0)\n                    unitFrame.questProgressIconFrame:SetTexture (envTable.iconQuestParts);\n                    break                    \n                end\n            end \n        end\n        \n        unitFrame.questProgressIconFrame:Show();\n        unitFrame.healthBar.questProgressTextFrame:SetText(strText)\n    else\n        unitFrame.questProgressIconFrame:Hide();\n        unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n    end\nend\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    --insert code here\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- positioning\n    local iconAnchor = {\n        side = modTable.config['iconAnchorSide'],\n        x = modTable.config['iconAnchorX'],\n        y = modTable.config['iconAnchorY'],\n    };\n    \n    -- icon options\n    envTable.iconSkull = [[Interface\\TargetingFrame\\UI-RaidTargetingIcon_8]];\n    envTable.iconBag = [[Interface\\GroupFrame\\UI-Group-MasterLooter]];\n    envTable.iconQuest = [[Interface\\GossipFrame\\AvailableQuestIcon]];\n    envTable.iconQuestParts = [[Interface\\QuestFrame\\AutoQuest-Parts]]\n    \n    ------------------------------------------------------------------------------------------------------------- \n    --frames:\n    \n    --create the icon frame that will show the quest need\n    envTable.questProgressIconFrame = unitFrame.questProgressIconFrame or unitFrame:CreateTexture (nil, \"overlay\")\n    envTable.questProgressIconFrame:SetTexture (modTable.config['iconQuest'])\n    envTable.questProgressIconFrame:SetSize (modTable.config['iconSize'], modTable.config['iconSize'])\n    Plater.SetAnchor (envTable.questProgressIconFrame, iconAnchor)\n    unitFrame.questProgressIconFrame = envTable.questProgressIconFrame\n    \n    \n    --create the text frame that will show the quest progress\n    envTable.questProgressTextFrame = unitFrame.healthBar.questProgressTextFrame or Plater:CreateLabel (unitFrame.healthBar);\n    Plater:SetFontFace (envTable.questProgressTextFrame, modTable.config['textFontFace']);\n    Plater:SetFontSize (envTable.questProgressTextFrame, modTable.config['textSize']);\n    Plater:SetFontColor (envTable.questProgressTextFrame, modTable.config['textColor']);\n    Plater:SetFontOutline (envTable.questProgressTextFrame, modTable.config['textOutline']);\n    DetailsFramework:SetFontShadow (envTable.questProgressTextFrame, 0, 0, 0, modTable.config['textShadowAlpha']);\n    envTable.questProgressTextFrame:SetPoint (modTable.config['textAnchor'], unitFrame.questProgressIconFrame, modTable.config['textIconAnchor'], modTable.config['textX'], modTable.config['textY']);\n    unitFrame.healthBar.questProgressTextFrame = envTable.questProgressTextFrame\n    envTable.questProgressTextFrame:SetText(\"\")\n    \nend",
},
["version"] = 22,
},
},
["health_cutoff_upper"] = false,
["health_selection_overlay"] = "GennUI B",
["blizzard_nameplate_font_size"] = 12,
["indicator_elite"] = false,
["border_color"] = {
nil,
nil,
nil,
1,
},
["cast_statusbar_color_interrupted"] = {
0.0196078431372549,
0.1843137254901961,
0.3176470588235294,
},
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 14,
["number_region_first_run"] = true,
["cast_statusbar_fadeout_time"] = 0.2000000029802322,
["health_statusbar_bgcolor"] = {
0.1137254901960784,
0.1137254901960784,
0.1137254901960784,
1,
},
["extra_icon_timer_outline"] = "OUTLINE",
["castbar_target_anchor"] = {
["y"] = -1,
["side"] = 4,
},
["script_auto_imported"] = {
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Tank Interrupt"] = 12,
["Cast - Important Target [P]"] = 2,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Unit - Show Energy"] = 11,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Glowing [P]"] = 10,
["Aura - Buff Alert"] = 15,
["Spiteful Affix"] = 3,
["Fixate"] = 11,
["Auto Set Skull"] = 11,
["Unit - Important"] = 11,
["Add - Non Elite Trash [P]"] = 4,
["Countdown"] = 11,
["Cast - On Going Cast [P]"] = 2,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Add - Explode on Die [P]"] = 1,
["Cast - Quick Flash"] = 2,
["Cast - Circular Swipe"] = 4,
["Cast - Shield Interrupt"] = 2,
["Fixate On You"] = 11,
},
["cast_statusbar_color_channeling"] = {
0.05098039656877518,
0.4627451300621033,
0.9333333969116211,
0.9600000008940697,
},
["aura2_grow_direction"] = 3,
["cast_statusbar_texture"] = "GennUI B",
["first_run3"] = true,
["click_space_friendly"] = {
150,
},
["aura_grow_direction"] = 1,
},
},
}
end